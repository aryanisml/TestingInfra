(window["webpackJsonp"] = window["webpackJsonp"] || []).push([["main"],{

/***/ "../../dist/common-library/fesm5/common-library.js":
/*!*****************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/dist/common-library/fesm5/common-library.js ***!
  \*****************************************************************************************************************************************/
/*! exports provided: ALERT_TYPE, APIEndPoints, AppBootstrap, AppUtil, AppWindow, ApplicationError, BASE_HREF, BASE_TERMS_PARAMS, BaseConnectionService, BasePayloadCommandService, BaseTermsService, BreadcrumbService, COMMON, CUSTOM_ERROR_CODES, CacheKey, CacheStoreManagerService, CacheType, CommonAngularMaterialModule, CommonLibraryModule, CommonRoutes, ComponentsModule, ConfigurationService, ConfirmEqualValidatorDirective, ConfirmationDialogComponent, CryptoJSEncryption, CtosWindow, DATE_FORMAT, DEBOUNCE_TIME, DEFAULT_HELP_ID, DIALOG_CONFIG, DISPATCH_URL, DataService, DependencyManagerService, DialogService, DisplayBannerComponent, EncryptionAction, EncryptionService, ErrorTermsService, ErrorTermsStoreService, HELP_ID_CONSTANTS, HELP_INDEX_PAGE_PATH, HELP_MAP, HOSTED_HELP_COMMAND, HOSTED_HELP_URL, HttpActionType, HttpVerbs, INDICATOR, InfoComponent, LOCALE_APP_TERMS_PARAMS, LOGGING_SERVLET_URL, LOGIN_PARAMS, LOGOUT_PARAMS, LabelControlDirective, ListItem, LocaleAppResourcesService, LoginTermsService, LogoutService, NestedDropdownComponent, NotesComponent, PCEService, PayloadCommandService, REPORTING_PERIOD_CONST, ResetPasswordService, ServerStatusService, SignedDecimalDirective, SignedIntegerDirective, SpinnerService, StoreType, StringUtil, UserIdleConfig, UserIdleService, UserProfile, VALID_DATE_FORMATS, ɵa, ɵb, ɵc, ɵd, ɵe, ɵf, ɵg, ɵh, ɵi, ɵj, ɵk, ɵl, ɵm, ɵn, ɵo, ɵp */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ALERT_TYPE", function() { return ALERT_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APIEndPoints", function() { return APIEndPoints; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppBootstrap", function() { return AppBootstrap; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppUtil", function() { return AppUtil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppWindow", function() { return AppWindow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationError", function() { return ApplicationError; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BASE_HREF", function() { return BASE_HREF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BASE_TERMS_PARAMS", function() { return BASE_TERMS_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseConnectionService", function() { return BaseConnectionService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasePayloadCommandService", function() { return BasePayloadCommandService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseTermsService", function() { return BaseTermsService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreadcrumbService", function() { return BreadcrumbService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMMON", function() { return COMMON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CUSTOM_ERROR_CODES", function() { return CUSTOM_ERROR_CODES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CacheKey", function() { return CacheKey; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CacheStoreManagerService", function() { return CacheStoreManagerService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CacheType", function() { return CacheType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonAngularMaterialModule", function() { return CommonAngularMaterialModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonLibraryModule", function() { return CommonLibraryModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonRoutes", function() { return CommonRoutes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentsModule", function() { return ComponentsModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfigurationService", function() { return ConfigurationService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfirmEqualValidatorDirective", function() { return ConfirmEqualValidatorDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfirmationDialogComponent", function() { return ConfirmationDialogComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CryptoJSEncryption", function() { return CryptoJSEncryption; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CtosWindow", function() { return CtosWindow; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DATE_FORMAT", function() { return DATE_FORMAT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEBOUNCE_TIME", function() { return DEBOUNCE_TIME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_HELP_ID", function() { return DEFAULT_HELP_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DIALOG_CONFIG", function() { return DIALOG_CONFIG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DISPATCH_URL", function() { return DISPATCH_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataService", function() { return DataService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DependencyManagerService", function() { return DependencyManagerService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogService", function() { return DialogService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DisplayBannerComponent", function() { return DisplayBannerComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EncryptionAction", function() { return EncryptionAction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EncryptionService", function() { return EncryptionService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorTermsService", function() { return ErrorTermsService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorTermsStoreService", function() { return ErrorTermsStoreService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HELP_ID_CONSTANTS", function() { return HELP_ID_CONSTANTS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HELP_INDEX_PAGE_PATH", function() { return HELP_INDEX_PAGE_PATH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HELP_MAP", function() { return HELP_MAP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HOSTED_HELP_COMMAND", function() { return HOSTED_HELP_COMMAND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HOSTED_HELP_URL", function() { return HOSTED_HELP_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpActionType", function() { return HttpActionType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpVerbs", function() { return HttpVerbs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INDICATOR", function() { return INDICATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InfoComponent", function() { return InfoComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOCALE_APP_TERMS_PARAMS", function() { return LOCALE_APP_TERMS_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOGGING_SERVLET_URL", function() { return LOGGING_SERVLET_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOGIN_PARAMS", function() { return LOGIN_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOGOUT_PARAMS", function() { return LOGOUT_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LabelControlDirective", function() { return LabelControlDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListItem", function() { return ListItem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocaleAppResourcesService", function() { return LocaleAppResourcesService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoginTermsService", function() { return LoginTermsService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogoutService", function() { return LogoutService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NestedDropdownComponent", function() { return NestedDropdownComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotesComponent", function() { return NotesComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PCEService", function() { return PCEService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PayloadCommandService", function() { return PayloadCommandService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "REPORTING_PERIOD_CONST", function() { return REPORTING_PERIOD_CONST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResetPasswordService", function() { return ResetPasswordService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerStatusService", function() { return ServerStatusService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignedDecimalDirective", function() { return SignedDecimalDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignedIntegerDirective", function() { return SignedIntegerDirective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpinnerService", function() { return SpinnerService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StoreType", function() { return StoreType; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringUtil", function() { return StringUtil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserIdleConfig", function() { return UserIdleConfig; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserIdleService", function() { return UserIdleService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserProfile", function() { return UserProfile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VALID_DATE_FORMATS", function() { return VALID_DATE_FORMATS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return CTOS_DATE_FORMATS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return CTOSDateAdapter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return MAT_SCROLL_STRATEGY_FACTORY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return BreadcrumbComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return MainHeaderComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return InMemoryService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function() { return RestApiService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵh", function() { return HelpService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵi", function() { return SubHeaderComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵj", function() { return SearchListComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵk", function() { return PasswordComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵl", function() { return ExportComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵm", function() { return RedirectComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵn", function() { return ContextMenuComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵo", function() { return TabComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵp", function() { return AuthMainHeaderComponent; });
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "../../node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "../../node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "../../node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material/button */ "../../node_modules/@angular/material/esm5/button.es5.js");
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/dialog */ "../../node_modules/@angular/material/esm5/dialog.es5.js");
/* harmony import */ var _angular_material_icon__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/icon */ "../../node_modules/@angular/material/esm5/icon.es5.js");
/* harmony import */ var _angular_material_menu__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/menu */ "../../node_modules/@angular/material/esm5/menu.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _angular_material_moment_adapter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material-moment-adapter */ "../../node_modules/@angular/material-moment-adapter/esm5/material-moment-adapter.es5.js");
/* harmony import */ var _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/autocomplete */ "../../node_modules/@angular/material/esm5/autocomplete.es5.js");
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/form-field */ "../../node_modules/@angular/material/esm5/form-field.es5.js");
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @angular/material/input */ "../../node_modules/@angular/material/esm5/input.es5.js");
/* harmony import */ var _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/material/snack-bar */ "../../node_modules/@angular/material/esm5/snack-bar.es5.js");
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @angular/material/tooltip */ "../../node_modules/@angular/material/esm5/tooltip.es5.js");
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! moment */ "../../node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_16___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_16__);
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @angular/cdk/overlay */ "../../node_modules/@angular/cdk/esm5/overlay.es5.js");
/* harmony import */ var _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @angular/material/slide-toggle */ "../../node_modules/@angular/material/esm5/slide-toggle.es5.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! xlsx */ "../../node_modules/xlsx/xlsx.js");
/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(xlsx__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! @angular/common/http */ "../../node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! file-saver */ "../../node_modules/file-saver/dist/FileSaver.min.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_23___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_23__);
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! @angular/cdk/portal */ "../../node_modules/@angular/cdk/esm5/portal.es5.js");
/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! crypto-js */ "../../node_modules/crypto-js/index.js");
/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_25___default = /*#__PURE__*/__webpack_require__.n(crypto_js__WEBPACK_IMPORTED_MODULE_25__);



























/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/label-control.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LabelControlDirective = /** @class */ (function () {
    function LabelControlDirective(parent) {
        this.parent = parent;
    }
    Object.defineProperty(LabelControlDirective.prototype, "controlValue", {
        /**
         * Gets host binding
         */
        get: /**
         * Gets host binding
         * @return {?}
         */
        function () {
            return this.parent ? this.parent.control.get(this.ctosControlName).value : '';
        },
        enumerable: true,
        configurable: true
    });
    LabelControlDirective.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                    selector: 'label[ctosControlName]',
                },] }
    ];
    /** @nocollapse */
    LabelControlDirective.ctorParameters = function () { return [
        { type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ControlContainer"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
    ]; };
    LabelControlDirective.propDecorators = {
        ctosControlName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        controlValue: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostBinding"], args: ['textContent',] }]
    };
    return LabelControlDirective;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/signed-decimal.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var signedDecimalRegex = '^-?\\d*\\.{0,1}\\d+$';
/** @type {?} */
var unsignedDecimalRegex = '^\\d*\\.{0,1}\\d+$';
var SignedDecimalDirective = /** @class */ (function () {
    function SignedDecimalDirective(el) {
        this.el = el;
        this.isSigned = false;
        this.inputElement = el.nativeElement;
    }
    /**
     * Hosts listener
     * @param e
     * @returns
     */
    /**
     * Params signed decimal directive
     * @param e
     * @returns
     */
    /**
         * Hosts listener
         * @param e
         * @returns
         */
    /**
     * Params signed decimal directive
     * @param {?} e
     * @return {?}
     */
    SignedDecimalDirective.prototype.onKeyDown = /**
         * Hosts listener
         * @param e
         * @returns
         */
    /**
     * Params signed decimal directive
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if ([46, 8, 9, 27, 13, 190, 110].indexOf(e.keyCode) !== -1 || // Allow: Delete, Backspace, Tab, Escape, Enter, Decimal Point
            (e.keyCode === 65 && e.ctrlKey === true) || // Allow: Ctrl+A
            (e.keyCode === 67 && e.ctrlKey === true) || // Allow: Ctrl+C
            (e.keyCode === 86 && e.ctrlKey === true) || // Allow: Ctrl+V
            (e.keyCode === 88 && e.ctrlKey === true) || // Allow: Ctrl+X
            (e.keyCode === 65 && e.metaKey === true) || // Allow: Cmd+A (Mac)
            (e.keyCode === 67 && e.metaKey === true) || // Allow: Cmd+C (Mac)
            (e.keyCode === 86 && e.metaKey === true) || // Allow: Cmd+V (Mac)
            (e.keyCode === 88 && e.metaKey === true) || // Allow: Cmd+X (Mac)
            (e.keyCode >= 35 && e.keyCode <= 39) // Allow: Home, End, Left, Right
        ) {
            // let it happen, don't do anything
            return;
        }
        if (this.isSigned && [189, 109].indexOf(e.keyCode) !== -1) {
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) &&
            (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SignedDecimalDirective.prototype.onPaste = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        /** @type {?} */
        var decimalRegex = unsignedDecimalRegex;
        if (this.isSigned) {
            decimalRegex = signedDecimalRegex;
        }
        /** @type {?} */
        var pastedInput = event.clipboardData
            .getData('text/plain');
        /** @type {?} */
        var valid = (new RegExp(decimalRegex)).test(pastedInput);
        /** @type {?} */
        var value = '';
        if (valid) {
            value = pastedInput;
        }
        document.execCommand('insertText', false, value);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SignedDecimalDirective.prototype.onDrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        /** @type {?} */
        var decimalRegex = unsignedDecimalRegex;
        if (this.isSigned) {
            decimalRegex = signedDecimalRegex;
        }
        /** @type {?} */
        var textData = event.dataTransfer.getData('text');
        /** @type {?} */
        var valid = (new RegExp(decimalRegex)).test(textData);
        /** @type {?} */
        var value = '';
        if (valid) {
            value = textData;
        }
        this.inputElement.focus();
        document.execCommand('insertText', false, value);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SignedDecimalDirective.prototype.onChange = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var decimalRegex = unsignedDecimalRegex;
        if (this.isSigned) {
            decimalRegex = signedDecimalRegex;
        }
        /** @type {?} */
        var inputValue = ((/** @type {?} */ (e.target))).value;
        /** @type {?} */
        var valid = (new RegExp(decimalRegex)).test(inputValue);
        if (!valid) {
            ((/** @type {?} */ (this.inputElement))).value = '';
        }
    };
    SignedDecimalDirective.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                    selector: 'input[ctosSignedDecimal]'
                },] }
    ];
    /** @nocollapse */
    SignedDecimalDirective.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
    ]; };
    SignedDecimalDirective.propDecorators = {
        isSigned: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onKeyDown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['keydown', ['$event'],] }],
        onPaste: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['paste', ['$event'],] }],
        onDrop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['drop', ['$event'],] }],
        onChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['change', ['$event'],] }]
    };
    return SignedDecimalDirective;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/signed-integer.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var signedIntegerRegex = '^[+-]?[0-9]+$';
/** @type {?} */
var unsignedIntegerRegex = '^[0-9]+$';
var SignedIntegerDirective = /** @class */ (function () {
    function SignedIntegerDirective(el) {
        this.el = el;
        this.isSigned = false;
        this.inputElement = el.nativeElement;
    }
    /**
     * @param {?} e
     * @return {?}
     */
    SignedIntegerDirective.prototype.onKeyDown = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if ([46, 8, 9, 27, 13].indexOf(e.keyCode) !== -1 || // Allow: Delete, Backspace, Tab, Escape, Enter
            (e.keyCode === 65 && e.ctrlKey === true) || // Allow: Ctrl+A
            (e.keyCode === 67 && e.ctrlKey === true) || // Allow: Ctrl+C
            (e.keyCode === 86 && e.ctrlKey === true) || // Allow: Ctrl+V
            (e.keyCode === 88 && e.ctrlKey === true) || // Allow: Ctrl+X
            (e.keyCode === 65 && e.metaKey === true) || // Allow: Cmd+A (Mac)
            (e.keyCode === 67 && e.metaKey === true) || // Allow: Cmd+C (Mac)
            (e.keyCode === 86 && e.metaKey === true) || // Allow: Cmd+V (Mac)
            (e.keyCode === 88 && e.metaKey === true) || // Allow: Cmd+X (Mac)
            (e.keyCode >= 35 && e.keyCode <= 39) // Allow: Home, End, Left, Right
        ) {
            // let it happen, don't do anything
            return;
        }
        if (this.isSigned && [189, 109].indexOf(e.keyCode) !== -1) {
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) &&
            (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SignedIntegerDirective.prototype.onPaste = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        /** @type {?} */
        var integerRegex = unsignedIntegerRegex;
        if (this.isSigned) {
            integerRegex = signedIntegerRegex;
        }
        /** @type {?} */
        var pastedInput = event.clipboardData
            .getData('text/plain');
        /** @type {?} */
        var valid = (new RegExp(integerRegex)).test(pastedInput);
        /** @type {?} */
        var value = '';
        if (valid) {
            value = pastedInput;
        }
        document.execCommand('insertText', false, value);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SignedIntegerDirective.prototype.onDrop = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        /** @type {?} */
        var integerRegex = unsignedIntegerRegex;
        if (this.isSigned) {
            integerRegex = signedIntegerRegex;
        }
        /** @type {?} */
        var textData = event.dataTransfer.getData('text');
        /** @type {?} */
        var valid = (new RegExp(integerRegex)).test(textData);
        /** @type {?} */
        var value = '';
        if (valid) {
            value = textData;
        }
        this.inputElement.focus();
        document.execCommand('insertText', false, value);
    };
    /**
     * @param {?} e
     * @return {?}
     */
    SignedIntegerDirective.prototype.onChange = /**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        /** @type {?} */
        var integerRegex = unsignedIntegerRegex;
        if (this.isSigned) {
            integerRegex = signedIntegerRegex;
        }
        /** @type {?} */
        var inputValue = ((/** @type {?} */ (e.target))).value;
        /** @type {?} */
        var valid = (new RegExp(integerRegex)).test(inputValue);
        if (!valid) {
            ((/** @type {?} */ (this.inputElement))).value = '';
        }
    };
    SignedIntegerDirective.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                    selector: 'input[ctosSignedInteger]'
                },] }
    ];
    /** @nocollapse */
    SignedIntegerDirective.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"] }
    ]; };
    SignedIntegerDirective.propDecorators = {
        isSigned: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        onKeyDown: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['keydown', ['$event'],] }],
        onPaste: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['paste', ['$event'],] }],
        onDrop: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['drop', ['$event'],] }],
        onChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["HostListener"], args: ['change', ['$event'],] }]
    };
    return SignedIntegerDirective;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/service-constant.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var COMMON = {
    RESULT_OK: 'OK',
    RESULT_ERROR: 'ERROR'
};
/** @type {?} */
var BASE_TERMS_PARAMS = {
    commandName: 'GetTerms',
    category: {
        category: 'terms'
    }
};
/** @type {?} */
var LOCALE_APP_TERMS_PARAMS = {
    commandName: 'GetTerms',
    category: {
        category: 'application'
    }
};
/** @type {?} */
var LOGOUT_PARAMS = {
    commandName: 'Logout'
};
/** @type {?} */
var LOGIN_PARAMS = {
    commandName: 'GetTerms',
    category: {
        category: 'login'
    }
};
/** @type {?} */
var REPORTING_PERIOD_CONST = {
    MONTH: 'MONTH',
    WEEK: 'WEEK',
    YEAR: 'YEAR',
    QUARTER: 'QUARTER',
    DAILY: 'DAY'
};
/** @type {?} */
var BASE_HREF = 'dv/StudyOptimizer';
/** @type {?} */
var DEBOUNCE_TIME = 750;
/** @type {?} */
var DISPATCH_URL = window.location.origin + "/dv/StudyOptimizer/dispatch";
/** @type {?} */
var LOGGING_SERVLET_URL = window.location.origin + "/dv/StudyOptimizer/loggingServlet";
/** @type {?} */
var VALID_DATE_FORMATS = [
    'MM-DD-YYYY',
    'MM/DD/YYYY',
    'YYYY-MM-DD',
    'YYYY/MM/DD',
    'DD-MMM-YYYY',
    'DD/MMM/YYYY',
    'DDMMMYYYY',
    'YYYY-MMM-DD',
    'YYYY/MMM/DD',
    'MMM-DD-YYYY',
    'MMM/DD/YYYY'
];
/** @type {?} */
var DIALOG_CONFIG = {
    LOGOUT: {
        ID: 'LogoutDialog',
        WIDTH: '25%',
        PANEL_CLASS: 'logout-dialog'
    },
    ABOUT: {
        ID: 'AboutDialog',
        WIDTH: '50%',
        PANEL_CLASS: 'about-dialog'
    },
    PASSWORD: {
        ID: 'PasswordDialog',
        WIDTH: '50%',
        PANEL_CLASS: 'password-dialog'
    },
    CONFIRM_UNSAVED_DATA: {
        WIDTH: '310px',
        HEIGHT: '190',
        PANEL_CLASS: 'unsaved-data-confirmation-dialog'
    },
    DELETE_PLAN: {
        ID: 'DeletePlanDialog',
        WIDTH: '310px',
        HEIGHT: '180px',
        PANEL_CLASS: 'delete-plan-confirmation-dialog'
    },
};
/** @type {?} */
var ALERT_TYPE = {
    CancelLabel: 'CancelLabel',
    OkLabel: 'OkLabel',
    OK: 'OK',
    YesLabel: 'YesLabel',
    NoLabel: 'NoLabel'
};
/** @type {?} */
var CUSTOM_ERROR_CODES = {
    FSI_REQUIRED_FOR_FSS: {
        error: 'FSIRequiredForFSS',
        message: 'NonEmptyField'
    },
    REQUIRED: {
        error: 'required',
        message: 'NonEmptyField'
    },
    MIN: {
        error: 'min',
        message: 'minNumExceedError'
    },
    MAX: {
        error: 'max',
        message: 'maxNumExceedError'
    },
    MAT_DATEPICKER_PARSE: {
        error: 'matDatepickerParse',
        message: 'DateFormatIncorrect'
    },
    DAYS_TO_SI_AFTER_ARTB: {
        error: 'daysToSIAfterARTB',
        message: 'SIDateError'
    },
    ARTB_LT_EQ_FSI: {
        error: 'ARTB_LT_EQ_FSI',
        message: 'ARTblteqFSI'
    },
    ARTB__LT_EQ_FSS: {
        error: 'ARTB__LT_EQ_FSS',
        message: 'ARTblteqFSS'
    },
    FSI_GT_TLSS: {
        error: 'FSI_GT_TLSS',
        message: 'FSIgtTLSS'
    },
    FSILT_ERROR: {
        error: 'FSILT_ERROR',
        message: 'FSILTError'
    },
    DEPENDENCY_ERROR: {
        error: 'DEPENDENCY_ERROR',
        message: 'dependencyError'
    }
};
/** @type {?} */
var INDICATOR = {
    INSERT: 'I',
    UPDATE: 'U',
    DELETE: 'D'
};
/** @type {?} */
var DATE_FORMAT = {
    NOTE_API_DATE_FORMAT: 'MMM-DD-YYYY HH:MM:SS',
    NOTE_API_DATE_FORMAT_SMALL: 'MMM-DD-YYYY HH:mm:ss',
    SERVER_DATE_FORMAT: 'YYYY-MM-DD',
    MONTH_DATE_FORMAT: 'DD-MMM-YYYY'
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/common-angular-material/ctos-date-adapter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment = moment__WEBPACK_IMPORTED_MODULE_16__;
/** @type {?} */
var CTOS_DATE_FORMATS = {
    parse: {
        dateInput: VALID_DATE_FORMATS
    },
    display: {
        dateInput: 'DD-MMM-YYYY',
        monthYearLabel: 'MMM-YYYY',
        dateA11yLabel: 'DD-MMM-YYYY',
        monthYearA11yLabel: 'MMM-YYYY',
    },
};
var CTOSDateAdapter = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_15__["__extends"])(CTOSDateAdapter, _super);
    function CTOSDateAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @param {?} value
     * @param {?} parseFormat
     * @return {?}
     */
    CTOSDateAdapter.prototype.parse = /**
     * @param {?} value
     * @param {?} parseFormat
     * @return {?}
     */
    function (value, parseFormat) {
        if (value && typeof value === 'string') {
            return moment(value, parseFormat, true);
        }
        return value ? moment(value) : null;
    };
    /**
     * This is needed to override the default behaviour as invalid values are also considered as null
     * and empty values are also considered as null, so to verify if both are null that is previous value
     * and current value then the value change should be triggered.
     *
     * param first
     * param second
     * returns
     * memberof CTOSDateAdapter
     */
    /**
     * This is needed to override the default behaviour as invalid values are also considered as null
     * and empty values are also considered as null, so to verify if both are null that is previous value
     * and current value then the value change should be triggered.
     *
     * param first
     * param second
     * returns
     * memberof CTOSDateAdapter
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    CTOSDateAdapter.prototype.sameDate = /**
     * This is needed to override the default behaviour as invalid values are also considered as null
     * and empty values are also considered as null, so to verify if both are null that is previous value
     * and current value then the value change should be triggered.
     *
     * param first
     * param second
     * returns
     * memberof CTOSDateAdapter
     * @param {?} first
     * @param {?} second
     * @return {?}
     */
    function (first, second) {
        if (first && second) {
            /** @type {?} */
            var firstValid = this.isValid(first);
            /** @type {?} */
            var secondValid = this.isValid(second);
            if (firstValid && secondValid) {
                return !this.compareDate(first, second);
            }
            return firstValid === secondValid;
        }
        else {
            return first !== null && second !== null && first === second;
        }
    };
    return CTOSDateAdapter;
}(_angular_material_moment_adapter__WEBPACK_IMPORTED_MODULE_9__["MomentDateAdapter"]));

/**
 * @fileoverview added by tsickle
 * Generated from: lib/common-angular-material/scroll.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} overlay
 * @return {?}
 */
function MAT_SCROLL_STRATEGY_FACTORY(overlay) {
    return (/**
     * @return {?}
     */
    function () { return overlay.scrollStrategies.close(); });
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/common-angular-material/common-angular-material.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ɵ0 = { duration: 2000, verticalPosition: 'top' }, ɵ1 = CTOS_DATE_FORMATS, ɵ2 = { _forceAnimations: true, diameter: 100, strokeWidth: 6 }, ɵ3 = MAT_SCROLL_STRATEGY_FACTORY, ɵ4 = MAT_SCROLL_STRATEGY_FACTORY, ɵ5 = MAT_SCROLL_STRATEGY_FACTORY, ɵ6 = {
    hasBackdrop: true,
    disableClose: true,
    backdropClass: 'backdrop'
};
var CommonAngularMaterialModule = /** @class */ (function () {
    function CommonAngularMaterialModule() {
    }
    CommonAngularMaterialModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
                        _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_10__["MatAutocompleteModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"],
                        _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_13__["MatSnackBarModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatIconModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatTreeModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatNativeDateModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatTableModule"],
                        _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_14__["MatTooltipModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialogModule"],
                        _angular_material_menu__WEBPACK_IMPORTED_MODULE_7__["MatMenuModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSelectModule"],
                        _angular_material_input__WEBPACK_IMPORTED_MODULE_12__["MatInputModule"],
                        _angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__["MatFormFieldModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatTabsModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatCheckboxModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatRadioModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDatepickerModule"],
                        _angular_material_moment_adapter__WEBPACK_IMPORTED_MODULE_9__["MatMomentDateModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatButtonModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatButtonToggleModule"],
                        _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_17__["OverlayModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatProgressSpinnerModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatPaginatorModule"],
                        _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_18__["MatSlideToggleModule"]
                    ],
                    providers: [
                        {
                            provide: _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_13__["MAT_SNACK_BAR_DEFAULT_OPTIONS"],
                            useValue: ɵ0
                        },
                        {
                            provide: _angular_material__WEBPACK_IMPORTED_MODULE_3__["DateAdapter"],
                            useClass: CTOSDateAdapter,
                            deps: [_angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_DATE_LOCALE"]]
                        },
                        { provide: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_DATE_FORMATS"], useValue: ɵ1 },
                        {
                            provide: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS"],
                            useValue: ɵ2
                        },
                        {
                            provide: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_SELECT_SCROLL_STRATEGY"],
                            useFactory: ɵ3,
                            deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_17__["Overlay"]]
                        },
                        {
                            provide: _angular_material_menu__WEBPACK_IMPORTED_MODULE_7__["MAT_MENU_SCROLL_STRATEGY"],
                            useFactory: ɵ4,
                            deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_17__["Overlay"]]
                        },
                        {
                            provide: _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_10__["MAT_AUTOCOMPLETE_SCROLL_STRATEGY"],
                            useFactory: ɵ5,
                            deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_17__["Overlay"]]
                        },
                        {
                            provide: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_DIALOG_DEFAULT_OPTIONS"],
                            useValue: ɵ6
                        }
                    ],
                    declarations: [],
                    exports: [
                        _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_10__["MatAutocompleteModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ReactiveFormsModule"],
                        _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_13__["MatSnackBarModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatIconModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatTreeModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatNativeDateModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatTableModule"],
                        _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_14__["MatTooltipModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialogModule"],
                        _angular_material_menu__WEBPACK_IMPORTED_MODULE_7__["MatMenuModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSelectModule"],
                        _angular_material_input__WEBPACK_IMPORTED_MODULE_12__["MatInputModule"],
                        _angular_material_form_field__WEBPACK_IMPORTED_MODULE_11__["MatFormFieldModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatTabsModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatCheckboxModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatRadioModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDatepickerModule"],
                        _angular_material_moment_adapter__WEBPACK_IMPORTED_MODULE_9__["MatMomentDateModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatButtonModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatButtonToggleModule"],
                        _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_17__["OverlayModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatProgressSpinnerModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatPaginatorModule"],
                        _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_18__["MatSlideToggleModule"]
                    ]
                },] }
    ];
    return CommonAngularMaterialModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/confirm-equal-validator.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ConfirmEqualValidatorDirective = /** @class */ (function () {
    function ConfirmEqualValidatorDirective() {
    }
    /**
     * Validates confirm equal validator directive
     * @param control
     * @returns validate
     */
    /**
     * Validates confirm equal validator directive
     * @param {?} control
     * @return {?} validate
     */
    ConfirmEqualValidatorDirective.prototype.validate = /**
     * Validates confirm equal validator directive
     * @param {?} control
     * @return {?} validate
     */
    function (control) {
        /** @type {?} */
        var controlToCompare = control.parent.get(this.ctosConfirmEqualValidator);
        if (controlToCompare && controlToCompare.value !== control.value) {
            return { 'notEqual': true };
        }
        return null;
    };
    ConfirmEqualValidatorDirective.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Directive"], args: [{
                    // tslint:disable-next-line:directive-selector
                    selector: '[ctosConfirmEqualValidator]',
                    providers: [{
                            provide: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["NG_VALIDATORS"],
                            useExisting: ConfirmEqualValidatorDirective,
                            multi: true
                        }]
                },] }
    ];
    /** @nocollapse */
    ConfirmEqualValidatorDirective.ctorParameters = function () { return []; };
    ConfirmEqualValidatorDirective.propDecorators = {
        ctosConfirmEqualValidator: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return ConfirmEqualValidatorDirective;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/AppUtil.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$1 = moment__WEBPACK_IMPORTED_MODULE_16__;
/**
 * App util
 */
var  /**
 * App util
 */
AppUtil = /** @class */ (function () {
    function AppUtil() {
    }
    /**
     * Checks if the element exists in the given array
     *
     * @param arr
     * @param element
     * @returns
     * @memberof AppUtil
     */
    /**
     * Checks if the element exists in the given array
     *
     * \@memberof AppUtil
     * @param {?} arr
     * @param {?} element
     * @return {?}
     */
    AppUtil.checkElementExistsInArray = /**
     * Checks if the element exists in the given array
     *
     * \@memberof AppUtil
     * @param {?} arr
     * @param {?} element
     * @return {?}
     */
    function (arr, element) {
        if (arr === undefined || arr === null) {
            throw new Error('arr should be defined');
        }
        if (!(arr instanceof Array)) {
            throw new Error('arr should be an array');
        }
        if (element === undefined || element === null) {
            throw new Error('element should be defined');
        }
        /** @type {?} */
        var result = arr.some((/**
         * @param {?} el
         * @return {?}
         */
        function (el) {
            return el.key === element.key;
        }));
        return result;
    };
    /**
     * extracts and concatenates the path from URL segments
     *
     * @param url
     * @returns
     * @memberof AppUtil
     */
    /**
     * extracts and concatenates the path from URL segments
     *
     * \@memberof AppUtil
     * @param {?} url
     * @return {?}
     */
    AppUtil.extractPathFromUrl = /**
     * extracts and concatenates the path from URL segments
     *
     * \@memberof AppUtil
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (url === undefined || url === null) {
            throw new Error('url must be defined');
        }
        if (!(url instanceof Array)) {
            throw new Error('url must be of type UrlSegment');
        }
        /** @type {?} */
        var paths = url.map((/**
         * @param {?} segment
         * @return {?}
         */
        function (segment) { return segment.path; }));
        /** @type {?} */
        var path = paths.join('/');
        return path;
    };
    /**
     * @param {?} text
     * @param {?} separator
     * @return {?}
     */
    AppUtil.getInitials = /**
     * @param {?} text
     * @param {?} separator
     * @return {?}
     */
    function (text, separator) {
        if (text === undefined || text === null) {
            throw new Error('text should be defined');
        }
        if (typeof text !== 'string') {
            throw new Error('text should be string');
        }
        /** @type {?} */
        var arr = text.split(separator);
        /** @type {?} */
        var initials = arr.map((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            return t
                .trim()
                .charAt(0)
                .toUpperCase();
        }));
        return initials.join('');
    };
    /**
     * @param {?} name
     * @param {?} separator
     * @return {?}
     */
    AppUtil.getNameInitials = /**
     * @param {?} name
     * @param {?} separator
     * @return {?}
     */
    function (name, separator) {
        if (name === undefined || name === null) {
            throw new Error('name should be defined');
        }
        if (typeof name !== 'string') {
            throw new Error('name should be string');
        }
        /** @type {?} */
        var arr = name.split(separator);
        /** @type {?} */
        var initials = [];
        if (arr.length > 0) {
            initials.push(arr[0]
                .trim()
                .charAt(0)
                .toUpperCase());
        }
        if (arr.length > 1) {
            initials.push(arr[arr.length - 1]
                .trim()
                .charAt(0)
                .toUpperCase());
        }
        return initials.join('');
    };
    /**
     * @param {?} baseHref
     * @param {?} fragment
     * @return {?}
     */
    AppUtil.generateUrl = /**
     * @param {?} baseHref
     * @param {?} fragment
     * @return {?}
     */
    function (baseHref, fragment) {
        /** @type {?} */
        var url = window.location.protocol +
            '//' +
            window.location.hostname +
            ':' +
            window.location.port +
            '/';
        if (baseHref) {
            url += baseHref + '/';
        }
        if (fragment) {
            url += fragment + '/';
        }
        url += 'index.html';
        return url;
    };
    /**
     * @param {?} baseHref
     * @return {?}
     */
    AppUtil.generateFlexUrl = /**
     * @param {?} baseHref
     * @return {?}
     */
    function (baseHref) {
        /** @type {?} */
        var url = '';
        url +=
            window.location.protocol +
                '//' +
                window.location.hostname +
                ':' +
                window.location.port +
                '/';
        if (baseHref) {
            url += baseHref + '/';
        }
        return url;
    };
    /**
     * @param {?} fromdt
     * @param {?} todt
     * @return {?}
     */
    AppUtil.dayDiff = /**
     * @param {?} fromdt
     * @param {?} todt
     * @return {?}
     */
    function (fromdt, todt) {
        /** @type {?} */
        var fromDate = moment$1(fromdt);
        /** @type {?} */
        var toDate = moment$1(todt);
        /** @type {?} */
        var daysDifference = toDate.diff(fromDate, 'days');
        return daysDifference;
        // const weekDiffernce = daysDifference / 7;
        // return weekDiffernce.toFixed(1) + ` ` + `Weeks`;
    };
    /**
     * @param {?} dt1
     * @param {?} dt2
     * @param {?=} by
     * @param {?=} num
     * @return {?}
     */
    AppUtil.dateDiff = /**
     * @param {?} dt1
     * @param {?} dt2
     * @param {?=} by
     * @param {?=} num
     * @return {?}
     */
    function (dt1, dt2, by, num) {
        /** @type {?} */
        var fromDate = moment$1(dt1);
        /** @type {?} */
        var toDate = moment$1(dt2);
        /** @type {?} */
        var dayDiff = toDate.diff(fromDate, 'd');
        if (by === 'd') {
            return dayDiff;
        }
        else {
            /** @type {?} */
            var weekDiff = (dayDiff + 1) / 7;
            return weekDiff.toFixed(num);
        }
    };
    /**
     * @param {?} date
     * @param {?} num
     * @return {?}
     */
    AppUtil.dateAdd = /**
     * @param {?} date
     * @param {?} num
     * @return {?}
     */
    function (date, num) {
        return moment$1(date).add(num, 'days');
    };
    /**
     * @param {?} date
     * @param {?} num
     * @return {?}
     */
    AppUtil.dateSubstract = /**
     * @param {?} date
     * @param {?} num
     * @return {?}
     */
    function (date, num) {
        return moment$1(date).subtract(num, 'days');
    };
    /**
     * @param {?=} date
     * @return {?}
     */
    AppUtil.dateFormatter = /**
     * @param {?=} date
     * @return {?}
     */
    function (date) {
        return moment$1(date).format('YYYY-MM-DD');
    };
    /**
     * @param {?=} date
     * @param {?=} format
     * @return {?}
     */
    AppUtil.formatDate = /**
     * @param {?=} date
     * @param {?=} format
     * @return {?}
     */
    function (date, format) {
        if (format === void 0) { format = 'YYYY-MM-DD'; }
        return moment$1(date).format(format);
    };
    /**
     * @param {?=} date
     * @param {?=} format
     * @param {?=} emptyValue
     * @return {?}
     */
    AppUtil.formatDateStrict = /**
     * @param {?=} date
     * @param {?=} format
     * @param {?=} emptyValue
     * @return {?}
     */
    function (date, format, emptyValue) {
        if (format === void 0) { format = 'DD-MMM-YYYY'; }
        if (emptyValue === void 0) { emptyValue = ''; }
        if (this.isDefined(date)) {
            return moment$1(date).format(format);
        }
        else {
            return emptyValue;
        }
    };
    /**
     * @param {?} dt1
     * @param {?} dt2
     * @return {?}
     */
    AppUtil.dateCompare = /**
     * @param {?} dt1
     * @param {?} dt2
     * @return {?}
     */
    function (dt1, dt2) {
        /** @type {?} */
        var date1 = dt1;
        /** @type {?} */
        var date2 = dt2;
        /** @type {?} */
        var days = moment$1(date2).diff(moment$1(date1), 'days');
        if (days >= 0) {
            return true;
        }
        else {
            return false;
        }
    };
    /********************************************************************
    * Function : isValidDate
    * Purpose: Utility method to validate date formate & the value.
    * Valid formate: DD-MMM-YYYY (For e.g. 05-Dec-2016). If user enters something which is not in this format
    * then it will return false. For e.g. 05..Dec.2016 will return false
    *********************************************************************/
    /**
     * *****************************************************************
     * Function : isValidDate
     * Purpose: Utility method to validate date formate & the value.
     * Valid formate: DD-MMM-YYYY (For e.g. 05-Dec-2016). If user enters something which is not in this format
     * then it will return false. For e.g. 05..Dec.2016 will return false
     * *******************************************************************
     * @param {?} dateStr
     * @return {?}
     */
    AppUtil.isValidDate = /**
     * *****************************************************************
     * Function : isValidDate
     * Purpose: Utility method to validate date formate & the value.
     * Valid formate: DD-MMM-YYYY (For e.g. 05-Dec-2016). If user enters something which is not in this format
     * then it will return false. For e.g. 05..Dec.2016 will return false
     * *******************************************************************
     * @param {?} dateStr
     * @return {?}
     */
    function (dateStr) {
        /** @type {?} */
        var currVal = dateStr;
        /** @type {?} */
        var months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];
        if (currVal === '' && currVal) {
            return false;
        }
        /** @type {?} */
        var dtPattern = /^(([1-9]|0[1-9]|1[0-9]|2[0-9]|3[0-1])(-)(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(-)((19|20)\d{2}))$/i;
        /** @type {?} */
        var dtArray = currVal.match(dtPattern);
        if (dtArray === null || dtArray === undefined) {
            return false;
        }
        /** @type {?} */
        var dtDay = parseInt(dtArray[1], 10);
        /** @type {?} */
        var dtMonth = months.indexOf(dtArray[4].toUpperCase()) + 1;
        /** @type {?} */
        var dtYear = parseInt(dtArray[6], 10);
        if (isNaN(dtMonth)) {
            for (var i = 4; i <= 15; i++) {
                if ((dtArray[i])) {
                    dtMonth = i - 3;
                    break;
                }
            }
        }
        if (dtMonth < 1 || dtMonth > 12) {
            return false;
        }
        else if (dtDay < 1 || dtDay > 31) {
            return false;
        }
        else if ((dtMonth === 4 || dtMonth === 6 || dtMonth === 9 || dtMonth === 11) && dtDay === 31) {
            return false;
        }
        else if (dtMonth === 2) {
            /** @type {?} */
            var isleap = (dtYear % 4 === 0 && (dtYear % 100 !== 0 || dtYear % 400 === 0));
            if (dtDay > 29 || (dtDay === 29 && !isleap)) {
                return false;
            }
        }
        return true;
    };
    /**
     * @param {?} value
     * @param {?=} isNumber
     * @return {?}
     */
    AppUtil.isDefined = /**
     * @param {?} value
     * @param {?=} isNumber
     * @return {?}
     */
    function (value, isNumber) {
        if (isNumber === void 0) { isNumber = false; }
        /** @type {?} */
        var isDefined = false;
        if (value !== undefined && value !== null) {
            isDefined = true;
            if (isNumber) {
                value = parseFloat(value.toString().split(',').join(''));
                isDefined = (isDefined && !isNaN((/** @type {?} */ (value))) && isFinite((/** @type {?} */ (value))));
            }
            else {
                isDefined = (isDefined && value.toString().trim() !== '');
            }
        }
        return isDefined;
    };
    /**
     * @param {?} value
     * @param {?=} format
     * @return {?}
     */
    AppUtil.formatDecimal = /**
     * @param {?} value
     * @param {?=} format
     * @return {?}
     */
    function (value, format) {
        /** @type {?} */
        var formattedValue = Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["formatNumber"])(value, 'en-US', format);
        value = Number(formattedValue.split(',').join(''));
        if (isNaN(value)) {
            value = null;
        }
        return value;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    AppUtil.stripNonnumbers = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        /** @type {?} */
        var regEx = /[^0-9]/g;
        return value ? value.replace(regEx, '') : value;
    };
    /**
     * @param {?} inputNumber
     * @return {?}
     */
    AppUtil.isValidNumber = /**
     * @param {?} inputNumber
     * @return {?}
     */
    function (inputNumber) {
        if (inputNumber && (typeof inputNumber === 'string')) {
            inputNumber = inputNumber.toString().trim();
        }
        if (inputNumber || inputNumber === 0) {
            return !isNaN(inputNumber);
        }
        return false;
    };
    /**
     * Checks if the given arrays are equal. If yes returns true and false otherwise.
     *
     * @param a
     * @param b
     * @memberof AppUtil
     */
    /**
     * Checks if the given arrays are equal. If yes returns true and false otherwise.
     *
     * \@memberof AppUtil
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    AppUtil.areArraysEqual = /**
     * Checks if the given arrays are equal. If yes returns true and false otherwise.
     *
     * \@memberof AppUtil
     * @param {?} a
     * @param {?} b
     * @return {?}
     */
    function (a, b) {
        /** @type {?} */
        var arraysEqual = false;
        if (a && b) {
            arraysEqual = Object(tslib__WEBPACK_IMPORTED_MODULE_15__["__spread"])(a).sort().join(',') === Object(tslib__WEBPACK_IMPORTED_MODULE_15__["__spread"])(b).sort().join(',');
        }
        return arraysEqual;
    };
    /**
     * Clears the validators applied on the formgroup as well as all its descendants
     * and updates their validity
     *
     * @param formGroup
     * @memberof AppUtil
     */
    /**
     * Clears the validators applied on the formgroup as well as all its descendants
     * and updates their validity
     *
     * \@memberof AppUtil
     * @param {?} formGroup
     * @return {?}
     */
    AppUtil.clearFormGroupValidators = /**
     * Clears the validators applied on the formgroup as well as all its descendants
     * and updates their validity
     *
     * \@memberof AppUtil
     * @param {?} formGroup
     * @return {?}
     */
    function (formGroup) {
        if (formGroup) {
            for (var field in formGroup.controls) {
                if (formGroup.get(field)) {
                    /** @type {?} */
                    var fg = formGroup.get(field);
                    fg.clearValidators();
                    fg.updateValueAndValidity();
                    if (((/** @type {?} */ (fg))).controls) {
                        this.clearFormGroupValidators((/** @type {?} */ (fg)));
                    }
                }
            }
            formGroup.clearValidators();
            formGroup.updateValueAndValidity();
        }
    };
    /**
     * Resets the error if any set on the form group as well as all its descendants
     *
     * @param form
     * @memberof AppUtil
     */
    /**
     * Resets the error if any set on the form group as well as all its descendants
     *
     * \@memberof AppUtil
     * @param {?} form
     * @return {?}
     */
    AppUtil.resetFormErrors = /**
     * Resets the error if any set on the form group as well as all its descendants
     *
     * \@memberof AppUtil
     * @param {?} form
     * @return {?}
     */
    function (form) {
        if (form) {
            form.setErrors(null);
            /** @type {?} */
            var fg = (/** @type {?} */ (form));
            if (fg && fg.controls && Object.keys(fg.controls).length > 0) {
                for (var field in fg.controls) {
                    if (fg.get(field)) {
                        /** @type {?} */
                        var fgEntry = fg.get(field);
                        this.resetFormErrors(fgEntry);
                    }
                }
            }
        }
    };
    /**
      * Calcuaters rate per frequency
      * @param rate
      * @param reportingPeriodVal
      * @returns rate per frequency
      */
    /**
     * Calcuaters rate per frequency
     * @param {?} rate
     * @param {?} reportingPeriodVal
     * @param {?=} isModify
     * @return {?} rate per frequency
     */
    AppUtil.calcuaterRatePerFrequency = /**
     * Calcuaters rate per frequency
     * @param {?} rate
     * @param {?} reportingPeriodVal
     * @param {?=} isModify
     * @return {?} rate per frequency
     */
    function (rate, reportingPeriodVal, isModify) {
        /** @type {?} */
        var ZERO = 0;
        if (this.isDefined(rate)) {
            if (rate !== ZERO) {
                /** @type {?} */
                var freq = reportingPeriodVal;
                // if (isModify && isModify === true) {
                //   return rate * freq;
                // } else {
                //   return (rate / freq);
                // }
                return rate;
            }
            else {
                return ZERO;
            }
        }
        else {
            return ZERO;
        }
    };
    /**
      * Checks not empty
      * @param [param]
      * @returns true if not empty
      */
    /**
     * Checks not empty
     * @param {?=} param
     * @return {?} true if not empty
     */
    AppUtil.checkNotEmpty = /**
     * Checks not empty
     * @param {?=} param
     * @return {?} true if not empty
     */
    function (param) {
        /** @type {?} */
        var EMPTY = '';
        if (param !== null && param !== undefined) {
            if (param !== EMPTY) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    };
    /**
  * Dates formatters
  * @param [date]
  * @returns
  */
    /**
     * Dates formatters
     * @param {?=} date
     * @return {?}
     */
    AppUtil.dateFormatters = /**
     * Dates formatters
     * @param {?=} date
     * @return {?}
     */
    function (date) {
        /** @type {?} */
        var EMPTY = '';
        if (this.isDefined(date)) {
            return moment$1(date).format('YYYY-MM-DD');
        }
        return EMPTY;
    };
    return AppUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/string-util.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * String util
 */
var  /**
 * String util
 */
StringUtil = /** @class */ (function () {
    function StringUtil() {
    }
    /**
     * Escapes html
     * @param text
     * @returns html
     */
    /**
     * Escapes html
     * @param {?} text
     * @return {?} html
     */
    StringUtil.escapeHTML = /**
     * Escapes html
     * @param {?} text
     * @return {?} html
     */
    function (text) {
        if (undefined === text || null === text) {
            throw new Error('text should be defined');
        }
        if (typeof text !== 'string') {
            throw new Error('text should be a string');
        }
        /** @type {?} */
        var replacements = {
            '<': '&lt;',
            '>': '&gt;',
            '&': '&amp;',
            '\"': '&quot;',
            '\'': '&apos;'
        };
        /** @type {?} */
        var result = text.replace(/[<>&"']/g, (/**
         * @param {?} character
         * @return {?}
         */
        function (character) {
            return replacements[character];
        }));
        return result;
    };
    /**
     * Interpolates arguments into string
     * for e.g. if str = test{0} and args=['abc']
     * the method will return string 'testabc'
     * @param str
     * @param args
     * @returns interpolate
     */
    /**
     * Interpolates arguments into string
     * for e.g. if str = test{0} and args=['abc']
     * the method will return string 'testabc'
     * @param {?} str
     * @param {?} args
     * @return {?} interpolate
     */
    StringUtil.interpolate = /**
     * Interpolates arguments into string
     * for e.g. if str = test{0} and args=['abc']
     * the method will return string 'testabc'
     * @param {?} str
     * @param {?} args
     * @return {?} interpolate
     */
    function (str, args) {
        if (undefined === str || null === str) {
            throw new Error('str should be defined');
        }
        if (typeof str !== 'string') {
            throw new Error('str should be a string');
        }
        if (undefined === args || null === args) {
            throw new Error('args should be defined');
        }
        if (!(args instanceof Array)) {
            throw new Error('args should be an array');
        }
        if (args.length === 0) {
            return str;
        }
        /** @type {?} */
        var result = str.replace(/(\{([0-9])\})/g, (/**
         * @param {?} match
         * @param {?} p1
         * @param {?} idx
         * @return {?}
         */
        function (match, p1, idx) {
            return args[idx];
        }));
        return result;
    };
    /**
     * Converts a string into CamelCase
     *
     * @param s
     * @returns string
     * @memberof AppUtil
     */
    /**
     * Converts a string into CamelCase
     *
     * \@memberof AppUtil
     * @param {?} s
     * @return {?} string
     */
    StringUtil.camelize = /**
     * Converts a string into CamelCase
     *
     * \@memberof AppUtil
     * @param {?} s
     * @return {?} string
     */
    function (s) {
        if (undefined === s || null === s) {
            throw new Error('s should be defined');
        }
        /** @type {?} */
        var ret = '';
        s = s.toLowerCase();
        /** @type {?} */
        var arr = s.split(' ');
        arr = arr.map((/**
         * @param {?} a
         * @return {?}
         */
        function (a) {
            /** @type {?} */
            var regex = /(?:^|[-_])(\w)/g;
            return a.replace(regex, (/**
             * @param {?} stripped
             * @param {?} letter
             * @return {?}
             */
            function (stripped, letter) {
                return letter ? letter.toUpperCase() : '';
            }));
        }));
        ret = arr.join(' ');
        return ret;
    };
    /**
     * @param {?} str
     * @param {?} args
     * @return {?}
     */
    StringUtil.substitute = /**
     * @param {?} str
     * @param {?} args
     * @return {?}
     */
    function (str, args) {
        /** @type {?} */
        var result = str.replace(/(\{([0-9])\})/g, (/**
         * @param {?} match
         * @param {?} p1
         * @param {?} idx
         * @return {?}
         */
        function (match, p1, idx) {
            return args[idx];
        }));
        return result;
    };
    return StringUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/breadcrumb/breadcrumb.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BreadcrumbService = /** @class */ (function () {
    /**
     *Creates an instance of BreadcrumbService.
     * @param activatedRoute
     * @memberof BreadcrumbService
     */
    function BreadcrumbService(activatedRoute) {
        this.activatedRoute = activatedRoute;
        this.breadcrumbsSubject = new rxjs__WEBPACK_IMPORTED_MODULE_19__["Subject"]();
        this.breadcrumbs$ = this.breadcrumbsSubject.asObservable();
    }
    /**
     * Updates the breadcrumb observable with new breadcrumb values
     *
     * @param event
     * @memberof BreadcrumbService
     */
    /**
     * Updates the breadcrumb observable with new breadcrumb values
     *
     * \@memberof BreadcrumbService
     * @param {?} event
     * @return {?}
     */
    BreadcrumbService.prototype.setBreadCrumb = /**
     * Updates the breadcrumb observable with new breadcrumb values
     *
     * \@memberof BreadcrumbService
     * @param {?} event
     * @return {?}
     */
    function (event) {
        // check if navigation has ended
        if (event instanceof _angular_router__WEBPACK_IMPORTED_MODULE_8__["NavigationEnd"]) {
            /** @type {?} */
            var root = this.activatedRoute.root;
            /** @type {?} */
            var breadcrumbs = void 0;
            // extract the breadcrumbs from the route object
            breadcrumbs = this.getBreadcrumbs(root);
            // update the observable with new breadcrumbs
            this.breadcrumbsSubject.next(breadcrumbs);
        }
    };
    /**
     * Extracts breadcrumbs from the route object using
     * the data if passed in the route or the path segment in absence of data
     *
     * @param route
     * @param [url='']
     * @param [breadcrumbs=[]]
     * @returns Breadcrumb[]
     * @memberof BreadcrumbService
     */
    /**
     * Extracts breadcrumbs from the route object using
     * the data if passed in the route or the path segment in absence of data
     *
     * \@memberof BreadcrumbService
     * @private
     * @param {?} route
     * @param {?=} url
     * @param {?=} breadcrumbs
     * @return {?} Breadcrumb[]
     */
    BreadcrumbService.prototype.getBreadcrumbs = /**
     * Extracts breadcrumbs from the route object using
     * the data if passed in the route or the path segment in absence of data
     *
     * \@memberof BreadcrumbService
     * @private
     * @param {?} route
     * @param {?=} url
     * @param {?=} breadcrumbs
     * @return {?} Breadcrumb[]
     */
    function (route, url, breadcrumbs) {
        var e_1, _a;
        if (url === void 0) { url = ''; }
        if (breadcrumbs === void 0) { breadcrumbs = []; }
        /** @type {?} */
        var ROUTE_DATA_BREADCRUMB = 'breadcrumb';
        // get the child routes
        /** @type {?} */
        var children = route.children;
        // return if there are no more children
        if (children.length === 0) {
            return breadcrumbs;
        }
        try {
            // iterate over each children
            for (var children_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_15__["__values"])(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                var child = children_1_1.value;
                // verify primary route
                if (child.outlet !== _angular_router__WEBPACK_IMPORTED_MODULE_8__["PRIMARY_OUTLET"]) {
                    continue;
                }
                // verify the custom data property "breadcrumb" is specified on the route
                // if (!child.snapshot.data.hasOwnProperty(ROUTE_DATA_BREADCRUMB)) {
                //   return this.getBreadcrumbs(child, url, breadcrumbs);
                // }
                // get the route's URL segment
                /** @type {?} */
                var routeURL = AppUtil.extractPathFromUrl(child.snapshot.url);
                // append route URL to URL
                url += "/" + routeURL;
                // extract the label for the breadcrumb from data if provided else set it as the url segment path
                /** @type {?} */
                var breadcrumbLabel = void 0;
                if (child.snapshot.data.hasOwnProperty(ROUTE_DATA_BREADCRUMB)) {
                    breadcrumbLabel = child.snapshot.data[ROUTE_DATA_BREADCRUMB];
                }
                else {
                    breadcrumbLabel = StringUtil.camelize(routeURL);
                }
                // add breadcrumb
                /** @type {?} */
                var breadcrumb = {
                    label: breadcrumbLabel,
                    params: child.snapshot.params,
                    url: url
                };
                breadcrumbs.push(breadcrumb);
                // recursive
                return this.getBreadcrumbs(child, url, breadcrumbs);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    BreadcrumbService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"] }
    ];
    /** @nocollapse */
    BreadcrumbService.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_8__["ActivatedRoute"] }
    ]; };
    return BreadcrumbService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/breadcrumb/breadcrumb.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BreadcrumbComponent = /** @class */ (function () {
    /**
     *Creates an instance of BreadcrumbComponent.
     * @param breadcrumbsService
     * @memberof BreadcrumbComponent
     * subscribes to the breadcrumb observable of breadcrumb service for changes in breadcrumbs
     */
    function BreadcrumbComponent(breadcrumbsService) {
        var _this = this;
        this.breadcrumbsService = breadcrumbsService;
        // subscribe to the breadcrumb observable in service to update the view on change of subject
        this.breadcrumbsService.breadcrumbs$.subscribe((/**
         * @param {?} breadcrumbs
         * @return {?}
         */
        function (breadcrumbs) {
            _this.breadcrumbs = breadcrumbs;
        }));
    }
    /**
     * @return {?}
     */
    BreadcrumbComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    BreadcrumbComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'ctos-breadcrumb',
                    template: "<div class=\"col-12\">\r\n  <div class=\"row\">\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol class=\"breadcrumb\">        \r\n        <li class=\"breadcrumb-item\" *ngFor=\"let breadcrumb of breadcrumbs\">\r\n          <a [routerLink]=\"[breadcrumb.url, breadcrumb.params]\">{{ breadcrumb.label }}</a>\r\n        </li>\r\n      </ol>\r\n    </nav>\r\n  </div>\r\n</div>\r\n"
                }] }
    ];
    /** @nocollapse */
    BreadcrumbComponent.ctorParameters = function () { return [
        { type: BreadcrumbService }
    ]; };
    return BreadcrumbComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/confirmation-dialog/confirmation-dialog.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ConfirmationDialogComponent = /** @class */ (function () {
    function ConfirmationDialogComponent(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        if (!data.okLabel) {
            data.okLabel = 'Ok';
        }
        if (!data.cancelLabel) {
            data.cancelLabel = 'Cancel';
        }
    }
    /**
     * Cancels confirmation dialog component
     * @param btnLabel
     */
    /**
     * Cancels confirmation dialog component
     * @param {?} btnLabel
     * @return {?}
     */
    ConfirmationDialogComponent.prototype.cancel = /**
     * Cancels confirmation dialog component
     * @param {?} btnLabel
     * @return {?}
     */
    function (btnLabel) {
        this.dialogRef.close({ action: btnLabel });
    };
    /**
     * confirmation dialog component
     * @param btnLabel
     */
    /**
     * confirmation dialog component
     * @param {?} btnLabel
     * @return {?}
     */
    ConfirmationDialogComponent.prototype.ok = /**
     * confirmation dialog component
     * @param {?} btnLabel
     * @return {?}
     */
    function (btnLabel) {
        this.dialogRef.close({ action: btnLabel });
    };
    /**
     * Shows cancel
     * @returns true if cancel
     */
    /**
     * Shows cancel
     * @return {?} true if cancel
     */
    ConfirmationDialogComponent.prototype.showCancel = /**
     * Shows cancel
     * @return {?} true if cancel
     */
    function () {
        /** @type {?} */
        var data = this.data;
        if (data && data.hasOwnProperty('showCancel')) {
            return data.showCancel;
        }
        return true;
    };
    ConfirmationDialogComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'ctos-confirmation-dialog',
                    template: "<div class=\"dialog-heading\">\r\n  <div *ngIf=\"data && data.prefixImageUrl\" class=\"col-sm-3\">\r\n    <img [src]=\"data?.prefixImageUrl\" alt=\"\" />\r\n  </div>\r\n  <div\r\n    [ngClass]=\"{\r\n      'col-sm-6': data.prefixImageUrl && data.postfixImageUrl ? true : false,\r\n      'col-sm-9': data.prefixImageUrl || data.postfixImageUrl ? true : false,\r\n      'col-sm-12': !data.prefixImageUrl && !data.postfixImageUrl ? true : false\r\n    }\"\r\n  >\r\n    <h1 mat-dialog-title *ngIf=\"data.heading\">{{ data?.heading }}</h1>\r\n  </div>\r\n  <div *ngIf=\"data && data.postfixImageUrl\" class=\"col-sm-3\">\r\n    <img [src]=\"data?.postfixImageUrl\" alt=\"\" />\r\n  </div>\r\n</div>\r\n<div mat-dialog-content class=\"dialog-content-container\">\r\n  <div class=\"col-sm-3\" *ngIf=\"data && data.prefixMaterialIcon\">\r\n    <i\r\n      class=\"material-icons\"\r\n      [ngStyle]=\"{\r\n        color: data?.prefixMaterialIcon?.color,\r\n        'font-size': data?.prefixMaterialIcon?.size\r\n      }\"\r\n    >\r\n      {{ data?.prefixMaterialIcon?.name }}\r\n    </i>\r\n  </div>\r\n  <div\r\n    class=\"html-data-container\"\r\n    [class]=\"data.contentClass\"\r\n    [ngClass]=\"{\r\n      'col-sm-6':\r\n        data.postfixMaterialIcon && data.prefixMaterialIcon ? true : false,\r\n      'col-sm-9':\r\n        data.prefixMaterialIcon || data.postfixMaterialIcon ? true : false,\r\n      'col-sm-12':\r\n        !data.prefixMaterialIcon && !data.postfixMaterialIcon ? true : false\r\n    }\"\r\n  >\r\n    <div [innerHtml]=\"data?.message\"></div>\r\n  </div>\r\n  <div class=\"col-sm-3\" *ngIf=\"data && data.postfixMaterialIcon\">\r\n    <i\r\n      class=\"material-icons\"\r\n      [ngStyle]=\"{\r\n        color: data?.postfixMaterialIcon?.color,\r\n        'font-size': data?.postfixMaterialIcon?.size\r\n      }\"\r\n    >\r\n      {{ data?.postfixMaterialIcon?.name }}\r\n    </i>\r\n  </div>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <button\r\n    mat-button\r\n    class=\"cancel-btn\"\r\n    *ngIf=\"showCancel()\"\r\n    (click)=\"cancel(data.cancelLabel)\"\r\n  >\r\n    {{ data?.cancelLabel }}\r\n  </button>\r\n  <button mat-button class=\"ok-btn\" (click)=\"ok(data.okLabel)\" cdkFocusInitial>\r\n    {{ data?.okLabel }}\r\n  </button>\r\n</div>\r\n"
                }] }
    ];
    /** @nocollapse */
    ConfirmationDialogComponent.ctorParameters = function () { return [
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialogRef"] },
        { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_DIALOG_DATA"],] }] }
    ]; };
    return ConfirmationDialogComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/context-menu/context-menu.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ContextMenuComponent = /** @class */ (function () {
    /**
     * Creates an instance of context menu component.
     */
    function ContextMenuComponent() {
        this.fireEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    ContextMenuComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    Object.defineProperty(ContextMenuComponent.prototype, "options", {
        /**
         * Gets options
         */
        get: /**
         * Gets options
         * @return {?}
         */
        function () {
            return this._options;
        },
        set: /**
         * @param {?} optionList
         * @return {?}
         */
        function (optionList) {
            this._options = optionList;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Menus click
     * @param name
     */
    /**
     * Menus click
     * @param {?} name
     * @return {?}
     */
    ContextMenuComponent.prototype.menuClick = /**
     * Menus click
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.fireEvent.emit(name);
    };
    ContextMenuComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'ctos-context-menu',
                    template: "<ng-content></ng-content>\r\n<mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\" [class]=\"'context-menu ' + contextMenuClass\" [xPosition]=\"xPosition\"\r\n  [yPosition]=\"yPosition\">\r\n  <h5 class=\"heading\" *ngIf=\"heading\" [matTooltipClass]=\"'ctos-tooltip'\" [matTooltip]=\"heading\"\r\n    matTooltipPosition=\"above\" [innerHTML]=\"heading\"></h5>\r\n  <div *ngFor=\"let item of options\" [matTooltip]=\"item.tooltipMsg\" matTooltipPosition=\"right\"\r\n    [matTooltipDisabled]=\"item.isEnabled || !item.tooltipMsg\">\r\n    <button mat-menu-item [disabled]=\"!item.isEnabled\" (click)=\"menuClick(item.name)\">\r\n      <span>{{ item.name }}</span>\r\n      <hr />\r\n    </button>\r\n  </div>\r\n</mat-menu>",
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
                }] }
    ];
    /** @nocollapse */
    ContextMenuComponent.ctorParameters = function () { return []; };
    ContextMenuComponent.propDecorators = {
        matMenu: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['menu', { static: true },] }],
        fireEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        contextMenuClass: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        xPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        yPosition: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        heading: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        options: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return ContextMenuComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/display-banner/display-banner.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DisplayBannerComponent = /** @class */ (function () {
    /**
     * Creates an instance of display banner component.
     * @param data
     * @param snackBarRef
     */
    function DisplayBannerComponent(data, snackBarRef) {
        this.data = data;
        this.snackBarRef = snackBarRef;
    }
    /**
     * @return {?}
     */
    DisplayBannerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * Closes display banner component
     */
    /**
     * Closes display banner component
     * @return {?}
     */
    DisplayBannerComponent.prototype.close = /**
     * Closes display banner component
     * @return {?}
     */
    function () {
        this.snackBarRef.dismiss();
    };
    DisplayBannerComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'ctos-display-banner',
                    template: "  <div  [ngClass]='data.messageType'>\r\n    <p class=\"position-text\">\r\n      <img [src]='data.icon'>\r\n      <!-- <span  class=\"positive-icon\"></span> -->\r\n      <span class=\"data\">{{data.message}}</span> \r\n    </p>\r\n    \r\n    <a (click)='close()' class=\"closeBanner\">&times;</a>\r\n  </div>\r\n\r\n  \r\n"
                }] }
    ];
    /** @nocollapse */
    DisplayBannerComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_SNACK_BAR_DATA"],] }] },
        { type: _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_13__["MatSnackBarRef"] }
    ]; };
    return DisplayBannerComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/cache/encryption-action.enum.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var EncryptionAction = {
    encrypt: "true",
    noencrypt: "false",
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/cache-key.enum.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var CacheKey = {
    TermErrorKey: "TermErrorKey",
    TermLoginKey: "TermLoginKey",
    TermApplicationKey: "TermApplicationKey",
    TermKey: "TermKey",
    ServerKey: "ServerKey",
    UserDataKey: "UserDataKey",
    StudyDataKey: "StudyDataKey",
    StudyTagkey: "StudyTagKey",
    FilterDataKey: "FilterDataKey",
    GetAppDataKey: "GetAppDataKey",
    GetPlanListKey: "GetPlanListKey",
    GetStudyPlanKey: "GetStudyPlanKey",
    GetStudySummary: "GetStudySummaryKey",
    GetPlanList: "GetPlanListKey",
    updatePlantList: "updatePlanListKey",
    getSourceCohortList: "getSourceCohortList",
    getAllCohortList: "getAllCohortList",
    GetBriefPlanList: "GetBriefPlanList",
    GetPlanDetails: "getPlanDetails",
    GetFilterCountryData: "GetFilterCountryData",
    GetInterimAnalysisList: "GetInterimAnalysisList",
    GetStudyDetails: "getStudyDetails",
    GetStudyTags: "GetStudyTags",
    GetStudySettings: "getStudySettings",
    GetCohortDetails: "GetCohortDetails",
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/cache/cache-type.enum.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var CacheType = {
    sticky: "Yes",
    nonsticky: "No",
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/cache/store-type.enum.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var StoreType = {
    InMemory: "In-Memory",
    Session: "Session",
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/cache/session-store.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SessionStore = /** @class */ (function () {
    function SessionStore(encryptionService, config) {
        this.encryptionService = encryptionService;
        this.config = config;
        this.maxAge = config.cacheMaxAge;
    }
    // constructor() {
    //  }
    /**
     * Gets session store
     *
     * This method will check if cache key is available in cache
     * then it will check the encryption flag if it is false then
     * return the value in observable form. If it is true then decrypt the value
     * and return in observable form
     * If key not present in cache then execute the this.post method
     * after the successful exection of  this.post observable method (which return the observable)
     * set the key and value in cache
     * @param key
     * @param [callback]
     * @returns
     */
    // constructor() {
    //  }
    /**
     * Gets session store
     *
     * This method will check if cache key is available in cache
     * then it will check the encryption flag if it is false then
     * return the value in observable form. If it is true then decrypt the value
     * and return in observable form
     * If key not present in cache then execute the this.post method
     * after the successful exection of  this.post observable method (which return the observable)
     * set the key and value in cache
     * @param {?} key
     * @param {?=} callback
     * @return {?}
     */
    SessionStore.prototype.get = 
    // constructor() {
    //  }
    /**
     * Gets session store
     *
     * This method will check if cache key is available in cache
     * then it will check the encryption flag if it is false then
     * return the value in observable form. If it is true then decrypt the value
     * and return in observable form
     * If key not present in cache then execute the this.post method
     * after the successful exection of  this.post observable method (which return the observable)
     * set the key and value in cache
     * @param {?} key
     * @param {?=} callback
     * @return {?}
     */
    function (key, callback) {
        var _this = this;
        if (this.hasValidCachedValue(key)) {
            if (this.isEncrypt) {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])(this.encryptionService.decrypt(sessionStorage.getItem(key)));
            }
            else {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])(JSON.parse(sessionStorage.getItem(key)));
            }
            //  return of(JSON.parse(sessionStorage.getItem(key)));
        }
        if (callback && callback instanceof rxjs__WEBPACK_IMPORTED_MODULE_19__["Observable"]) {
            console.log("%c Calling api for " + key, 'color: purple');
            return callback.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["tap"])((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                _this.set(key, value);
            })));
        }
        else {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["throwError"])('Requested key is not available in Cache');
        }
    };
    /**
     * Sets session store
     * Check the encryption flag if it true then store the value in encrypted format
     * other wise store the value in JSON.stringify format.
     * @param key
     * @param value
     */
    /**
     * Sets session store
     * Check the encryption flag if it true then store the value in encrypted format
     * other wise store the value in JSON.stringify format.
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    SessionStore.prototype.set = /**
     * Sets session store
     * Check the encryption flag if it true then store the value in encrypted format
     * other wise store the value in JSON.stringify format.
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        // const encryptedValue = this.encryptionService.encrypt(value);
        // sessionStorage.setItem(key, JSON.stringify(value));
        // sessionStorage.setItem(key, encryptedValue);
        if (this.isEncrypt) {
            /** @type {?} */
            var encryptedValue = this.encryptionService.encrypt(value);
            sessionStorage.setItem(key, encryptedValue);
        }
        else {
            sessionStorage.setItem(key, JSON.stringify(value));
        }
    };
    /**
     * Calls session store
     * @param [fallback]
     * @param [maxAge]
     * @returns call
     */
    /**
     * Calls session store
     * @param {?=} fallback
     * @param {?=} maxAge
     * @return {?} call
     */
    SessionStore.prototype.call = /**
     * Calls session store
     * @param {?=} fallback
     * @param {?=} maxAge
     * @return {?} call
     */
    function (fallback, maxAge) {
        if (fallback && fallback instanceof rxjs__WEBPACK_IMPORTED_MODULE_19__["Observable"]) {
            return fallback.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["tap"])((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return value; })));
        }
    };
    /**
     * Removes session store
     * @param key
     */
    /**
     * Removes session store
     * @param {?} key
     * @return {?}
     */
    SessionStore.prototype.remove = /**
     * Removes session store
     * @param {?} key
     * @return {?}
     */
    function (key) {
        if (this.hasValidCachedValue(key)) {
            sessionStorage.removeItem(key);
        }
    };
    /**
     * Determines whether valid cached value has
     * @param key
     * @returns true if valid cached value
     */
    /**
     * Determines whether valid cached value has
     * @private
     * @param {?} key
     * @return {?} true if valid cached value
     */
    SessionStore.prototype.hasValidCachedValue = /**
     * Determines whether valid cached value has
     * @private
     * @param {?} key
     * @return {?} true if valid cached value
     */
    function (key) {
        /** @type {?} */
        var returnVal = false;
        if (sessionStorage.getItem(key) === null) {
            returnVal = false;
        }
        else {
            returnVal = true;
        }
        return returnVal;
    };
    /**
     * Keys exist
     * @param key
     * @returns
     */
    /**
     * Keys exist
     * @param {?} key
     * @return {?}
     */
    SessionStore.prototype.keyExist = /**
     * Keys exist
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])(this.hasValidCachedValue(key));
    };
    /**
     * Sets cache age
     * @param [age]
     */
    /**
     * Sets cache age
     * @param {?=} age
     * @return {?}
     */
    SessionStore.prototype.setCacheAge = /**
     * Sets cache age
     * @param {?=} age
     * @return {?}
     */
    function (age) {
        if (age === void 0) { age = 0; }
        this.maxAge = age;
    };
    /**
     * Sets encryption
     * set the encryption flag
     * @param [encrypt]
     */
    /**
     * Sets encryption
     * set the encryption flag
     * @param {?=} encrypt
     * @return {?}
     */
    SessionStore.prototype.setEncryption = /**
     * Sets encryption
     * set the encryption flag
     * @param {?=} encrypt
     * @return {?}
     */
    function (encrypt) {
        this.isEncrypt = (encrypt === EncryptionAction.encrypt) ? true : false;
    };
    return SessionStore;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/cache/cache.factory.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Cache factory
 */
var /**
 * Cache factory
 */
CacheFactory = /** @class */ (function () {
    function CacheFactory() {
    }
    /**
     * @param {?} storeType
     * @param {?=} encryptionService
     * @param {?=} config
     * @param {?=} inMemory
     * @return {?}
     */
    CacheFactory.prototype.createStore = /**
     * @param {?} storeType
     * @param {?=} encryptionService
     * @param {?=} config
     * @param {?=} inMemory
     * @return {?}
     */
    function (storeType, encryptionService, config, inMemory) {
        switch (storeType) {
            case StoreType.InMemory:
                return inMemory;
            case StoreType.Session:
                return new SessionStore(encryptionService, config);
            default:
                return null;
        }
    };
    return CacheFactory;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/cache/encryption.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var EncryptionService = /** @class */ (function () {
    function EncryptionService() {
    }
    /**
     * Sets encryption
     * @param encryption
     */
    /**
     * Sets encryption
     * @param {?} encryption
     * @return {?}
     */
    EncryptionService.prototype.setEncryption = /**
     * Sets encryption
     * @param {?} encryption
     * @return {?}
     */
    function (encryption) {
        this.encryption = encryption;
    };
    /**
     * Sets key
     * @param key
     */
    /**
     * Sets key
     * @param {?} key
     * @return {?}
     */
    EncryptionService.prototype.setKey = /**
     * Sets key
     * @param {?} key
     * @return {?}
     */
    function (key) {
        this.key = key;
    };
    /**
     * Encrypts encryption service
     * @param obj
     * @param [key]
     * @returns encrypt
     */
    /**
     * Encrypts encryption service
     * @param {?} obj
     * @param {?=} key
     * @return {?} encrypt
     */
    EncryptionService.prototype.encrypt = /**
     * Encrypts encryption service
     * @param {?} obj
     * @param {?=} key
     * @return {?} encrypt
     */
    function (obj, key) {
        if (key === void 0) { key = this.key; }
        /** @type {?} */
        var ret = null;
        if (this.encryption !== undefined && key !== undefined) {
            ret = this.encryption.encrypt(obj, key);
        }
        else {
            throw new Error('Encryption object or key not set');
        }
        return ret;
    };
    /**
     * Decrypts encryption service
     * @param text
     * @param [key]
     * @returns decrypt
     */
    /**
     * Decrypts encryption service
     * @param {?} text
     * @param {?=} key
     * @return {?} decrypt
     */
    EncryptionService.prototype.decrypt = /**
     * Decrypts encryption service
     * @param {?} text
     * @param {?=} key
     * @return {?} decrypt
     */
    function (text, key) {
        if (key === void 0) { key = this.key; }
        /** @type {?} */
        var ret = null;
        if (this.encryption !== undefined && key !== undefined) {
            ret = this.encryption.decrypt(text, key);
        }
        else {
            throw new Error('Encryption object or key not set');
        }
        return ret;
    };
    EncryptionService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    EncryptionService.ctorParameters = function () { return []; };
    /** @nocollapse */ EncryptionService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function EncryptionService_Factory() { return new EncryptionService(); }, token: EncryptionService, providedIn: "root" });
    return EncryptionService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/configuration.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ConfigurationService = /** @class */ (function () {
    /**
     * Creates an instance of configuration service.
     * @param encryptionService
     */
    function ConfigurationService(encryptionService) {
        this.encryptionService = encryptionService;
    }
    Object.defineProperty(ConfigurationService.prototype, "encryptKey", {
        /**
         * Gets encrypt key
         */
        get: /**
         * Gets encrypt key
         * @return {?}
         */
        function () {
            return this.encryptionKey;
        },
        /**
         * Sets encrypt key
         */
        set: /**
         * Sets encrypt key
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.encryptionKey = v;
            this.encryptionService.setKey(this.encryptionKey);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "cacheMaxAge", {
        /**
         * Gets cache max age
         */
        get: /**
         * Gets cache max age
         * @return {?}
         */
        function () {
            return this.cacheAge;
        },
        /**
         * Sets cache max age
         */
        set: /**
         * Sets cache max age
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.cacheAge = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "encryptType", {
        /**
         * Gets encrypt type
         */
        get: /**
         * Gets encrypt type
         * @return {?}
         */
        function () {
            return this.encryptionType;
        },
        /**
         * Sets encrypt type
         */
        set: /**
         * Sets encrypt type
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.encryptionType = v;
            this.encryptionService.setEncryption(this.encryptionType);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "dispatchUrl", {
        /**
         * Gets dispatch url
         */
        get: /**
         * Gets dispatch url
         * @return {?}
         */
        function () {
            return this.dispatchedUrl;
        },
        /**
         * Sets dispatch url
         */
        set: /**
         * Sets dispatch url
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.dispatchedUrl = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "appUrl", {
        /**
         * Gets app url
         */
        get: /**
         * Gets app url
         * @return {?}
         */
        function () {
            return this.applicationUrl;
        },
        /**
         * Sets app url
         */
        set: /**
         * Sets app url
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.applicationUrl = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "$loginUrl", {
        /**
           * Getter $loginUrl
           * @return string
           */
        get: /**
         * Getter $loginUrl
         * @return {?} string
         */
        function () {
            return this.loginUrl;
        },
        /**
         * Setter $loginUrl
         * @param string value
         */
        set: /**
         * Setter $loginUrl
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.loginUrl = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "authUrl", {
        /**
         * Gets app url
         */
        get: /**
         * Gets app url
         * @return {?}
         */
        function () {
            return this._authUrl;
        },
        /**
         * Sets app url
         */
        set: /**
         * Sets app url
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._authUrl = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "soApiUrl", {
        /**
         * Gets app url
         */
        get: /**
         * Gets app url
         * @return {?}
         */
        function () {
            return this._soApiUrl;
        },
        /**
         * Sets app url
         */
        set: /**
         * Sets app url
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._soApiUrl = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets config
     *
     * Set the application configuration
     * encryptionKey
     * cacheAge
     * encryptionType
     * applicationUrl
     * @param environment
     */
    /**
     * Sets config
     *
     * Set the application configuration
     * encryptionKey
     * cacheAge
     * encryptionType
     * applicationUrl
     * @param {?=} environment
     * @return {?}
     */
    ConfigurationService.prototype.setConfig = /**
     * Sets config
     *
     * Set the application configuration
     * encryptionKey
     * cacheAge
     * encryptionType
     * applicationUrl
     * @param {?=} environment
     * @return {?}
     */
    function (environment) {
        if (environment) {
            if (!this.typeCheck(environment)) {
                throw new Error("Invalid environment object");
            }
            this.encryptKey = environment.clientEncryptionKey;
            this.cacheMaxAge = environment.cacheAge;
            this.encryptType = environment.cryptoJS;
            this.appUrl = environment.app_url;
            this.$loginUrl = environment.login_url;
            this.authUrl = environment.authUrl;
            this.soApiUrl = environment.soApiUrl;
        }
        else {
            throw new Error("Environment object is empty");
        }
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    ConfigurationService.prototype.typeCheck = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return (obj.clientEncryptionKey !== undefined && obj.cacheAge !== undefined
            && obj.cryptoJS !== undefined && obj.app_url !== undefined && obj.login_url !== undefined);
    };
    ConfigurationService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ConfigurationService.ctorParameters = function () { return [
        { type: EncryptionService }
    ]; };
    /** @nocollapse */ ConfigurationService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function ConfigurationService_Factory() { return new ConfigurationService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(EncryptionService)); }, token: ConfigurationService, providedIn: "root" });
    return ConfigurationService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/cache/in-memory.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InMemoryService = /** @class */ (function () {
    /**
     * Creates an instance of in memory service.
     * @param config
     */
    function InMemoryService(config) {
        this.config = config;
        this.cache = new Map();
        this.inFlightObservables = new Map();
        this.maxAge = config.cacheMaxAge;
    }
    /**
     * Gets in memory service
     *
     * This method will check if cache key is available in cache
     * then it will return the value in observable form.
     * If key not present in cache then execute the this.post method
     * after the successful exection of  this.post observable method (which return the observable)
     * set the key and value in cache
     *
     * @param key
     * @param [callback]
     * @returns get
     */
    /**
     * Gets in memory service
     *
     * This method will check if cache key is available in cache
     * then it will return the value in observable form.
     * If key not present in cache then execute the this.post method
     * after the successful exection of  this.post observable method (which return the observable)
     * set the key and value in cache
     *
     * @param {?} key
     * @param {?=} callback
     * @return {?} get
     */
    InMemoryService.prototype.get = /**
     * Gets in memory service
     *
     * This method will check if cache key is available in cache
     * then it will return the value in observable form.
     * If key not present in cache then execute the this.post method
     * after the successful exection of  this.post observable method (which return the observable)
     * set the key and value in cache
     *
     * @param {?} key
     * @param {?=} callback
     * @return {?} get
     */
    function (key, callback) {
        var _this = this;
        if (this.hasValidCachedValue(key)) {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])(this.cache.get(key).value);
        }
        /*
        if (this.inFlightObservables.has(key)) {
          return this.inFlightObservables.get(key);
        } else if (callback && callback instanceof Observable) {
          this.inFlightObservables.set(key, new Subject());
          console.log(`%c Calling api in memory for ${key}`, 'color: purple');
          return callback.pipe(tap((value) => { this.set(key, value); }));
        } else {
          return throwError('Requested key is not available in Cache');
        }
       */
        if (callback && callback instanceof rxjs__WEBPACK_IMPORTED_MODULE_19__["Observable"]) {
            console.log("%c Calling api for " + key, 'color: purple');
            return callback.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["tap"])((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                _this.set(key, value);
            })));
        }
        else {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["throwError"])('Requested key is not available in Cache');
        }
    };
    /**
     * Sets in memory service
     * @param key
     * @param value
     */
    /**
     * Sets in memory service
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    InMemoryService.prototype.set = /**
     * Sets in memory service
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        // this.cache.set(key, { value: value, expiry: Date.now() + this.maxAge });
        this.cache.set(key, { value: value, expiry: 0 });
        // this.notifyInFlightObservers(key, value);
        /**Testing */
        console.log("%c In Memory data", "color: green");
        console.log(this.cache);
    };
    /**
     * Has in memory service
     * @param key
     * @returns true if has
     */
    /**
     * Has in memory service
     * @param {?} key
     * @return {?} true if has
     */
    InMemoryService.prototype.has = /**
     * Has in memory service
     * @param {?} key
     * @return {?} true if has
     */
    function (key) {
        return this.cache.has(key);
    };
    /**
     * Calls in memory service
     * @param [fallback]
     * @returns call
     */
    /**
     * Calls in memory service
     * @param {?=} fallback
     * @return {?} call
     */
    InMemoryService.prototype.call = /**
     * Calls in memory service
     * @param {?=} fallback
     * @return {?} call
     */
    function (fallback) {
        if (fallback && fallback instanceof rxjs__WEBPACK_IMPORTED_MODULE_19__["Observable"]) {
            return fallback.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["tap"])((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return value; })));
        }
    };
    /**
     * Determines whether valid cached value has
     * @param key
     * @returns true if valid cached value
     */
    /**
     * Determines whether valid cached value has
     * @private
     * @param {?} key
     * @return {?} true if valid cached value
     */
    InMemoryService.prototype.hasValidCachedValue = /**
     * Determines whether valid cached value has
     * @private
     * @param {?} key
     * @return {?} true if valid cached value
     */
    function (key) {
        /*
            if (this.cache.has(key)) {
              if (this.cache.get(key).expiry < Date.now()) {
                this.cache.delete(key);
                return false;
              }
              return true;
            } else {
              return false;
            }*/
        /** @type {?} */
        var returnVal = false;
        if (this.cache.get(key)) {
            returnVal = true;
        }
        else {
            returnVal = false;
        }
        return returnVal;
    };
    /**
     * Notifys in flight observers
     * @param key
     * @param value
     */
    /**
     * Notifys in flight observers
     * @private
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    InMemoryService.prototype.notifyInFlightObservers = /**
     * Notifys in flight observers
     * @private
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        if (this.inFlightObservables.has(key)) {
            /** @type {?} */
            var inFlight = this.inFlightObservables.get(key);
            /** @type {?} */
            var observersCount = inFlight.observers.length;
            if (observersCount) {
                console.log("%cNotifying " + inFlight.observers.length + " flight subscribers for " + key, 'color: Swap');
                inFlight.next(value);
            }
            inFlight.complete();
            this.inFlightObservables.delete(key);
        }
    };
    /**
     * Removes in memory service
     * @param key
     */
    /**
     * Removes in memory service
     * @param {?} key
     * @return {?}
     */
    InMemoryService.prototype.remove = /**
     * Removes in memory service
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        //  this.cache.clear();
        //  this.inFlightObservables.clear();
        if (this.cache.has(key)) {
            this.cache.delete(key);
        }
        else {
            this.cache.forEach((/**
             * @param {?} value
             * @param {?} actualKey
             * @return {?}
             */
            function (value, actualKey) {
                if (actualKey.search(key)) {
                    _this.cache.delete(actualKey);
                }
            }));
        }
        console.log("%c In memory remove key " + key, "color:purple");
        console.log("%c Current In Memory data", "color: green");
        console.log(this.cache);
    };
    /**
     * Sets cache age
     * @param [age]
     */
    /**
     * Sets cache age
     * @param {?=} age
     * @return {?}
     */
    InMemoryService.prototype.setCacheAge = /**
     * Sets cache age
     * @param {?=} age
     * @return {?}
     */
    function (age) {
        if (age === void 0) { age = 0; }
        this.maxAge = age;
    };
    InMemoryService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    InMemoryService.ctorParameters = function () { return [
        { type: ConfigurationService }
    ]; };
    /** @nocollapse */ InMemoryService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function InMemoryService_Factory() { return new InMemoryService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(ConfigurationService)); }, token: InMemoryService, providedIn: "root" });
    return InMemoryService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/cache/cache-store-manager.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CacheStoreManagerService = /** @class */ (function () {
    /**
     * Creates an instance of cache store manager service.
     * @param encryptionService
     * @param config
     * @param inMemory
     */
    function CacheStoreManagerService(encryptionService, config, inMemory) {
        this.encryptionService = encryptionService;
        this.config = config;
        this.inMemory = inMemory;
        this.factory = null;
        this.factory = new CacheFactory();
    }
    /**
     * Gets cache store manager service
     *
     * This method will call the get method of cache classes (session, inmemory etc.)
     * @param key
     * @param [callback]
     * @returns
     */
    /**
     * Gets cache store manager service
     *
     * This method will call the get method of cache classes (session, inmemory etc.)
     * @param {?} key
     * @param {?=} callback
     * @return {?}
     */
    CacheStoreManagerService.prototype.get = /**
     * Gets cache store manager service
     *
     * This method will call the get method of cache classes (session, inmemory etc.)
     * @param {?} key
     * @param {?=} callback
     * @return {?}
     */
    function (key, callback) {
        return this.cachingStore.get(key, callback);
    };
    /**
     * Sets cache store manager service
     *
     * This method will set the value on cache classes (session, inmemory etc.)
     * @param key
     * @param value
     */
    /**
     * Sets cache store manager service
     *
     * This method will set the value on cache classes (session, inmemory etc.)
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    CacheStoreManagerService.prototype.set = /**
     * Sets cache store manager service
     *
     * This method will set the value on cache classes (session, inmemory etc.)
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this.cachingStore.set(key, value);
    };
    /**
     * Removes cache store manager service
     *
     * This method will remove the key and value from cache (session, inmemory etc.)
     * @param [key]
     */
    /**
     * Removes cache store manager service
     *
     * This method will remove the key and value from cache (session, inmemory etc.)
     * @param {?=} key
     * @return {?}
     */
    CacheStoreManagerService.prototype.remove = /**
     * Removes cache store manager service
     *
     * This method will remove the key and value from cache (session, inmemory etc.)
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        this.cachingStore.remove(key);
    };
    /**
     * Calls cache store manager service
     * @param [callback]
     * @returns
     */
    /**
     * Calls cache store manager service
     * @param {?=} callback
     * @return {?}
     */
    CacheStoreManagerService.prototype.call = /**
     * Calls cache store manager service
     * @param {?=} callback
     * @return {?}
     */
    function (callback) {
        return this.cachingStore.call(callback);
    };
    /**
     * Keys exist
     *
     * It will check the key exist in cache.
     *
     * @param [key]
     * @returns
     */
    /**
     * Keys exist
     *
     * It will check the key exist in cache.
     *
     * @param {?=} key
     * @return {?}
     */
    CacheStoreManagerService.prototype.keyExist = /**
     * Keys exist
     *
     * It will check the key exist in cache.
     *
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        return this.cachingStore.keyExist(key);
    };
    /**
     * Sets caching store
     *
     * This method will call the factory method and set the instance
     * of cache classes (session, localstorage etc) in
     * cachingStore variable.
     * If the storeType is in memory then the factory method will return the
     * singleton instance of inMemoryService to cachingStore variable.
     * Set the caching age.
     * If the storeType is not in memory then the cachingStore will call the setEncryption mehtod
     * to set the encryption.
     * @param storeType
     * @param [encryptionAction]
     * @param [age]
     */
    /**
     * Sets caching store
     *
     * This method will call the factory method and set the instance
     * of cache classes (session, localstorage etc) in
     * cachingStore variable.
     * If the storeType is in memory then the factory method will return the
     * singleton instance of inMemoryService to cachingStore variable.
     * Set the caching age.
     * If the storeType is not in memory then the cachingStore will call the setEncryption mehtod
     * to set the encryption.
     * @param {?} storeType
     * @param {?=} encryptionAction
     * @param {?=} age
     * @return {?}
     */
    CacheStoreManagerService.prototype.setCachingStore = /**
     * Sets caching store
     *
     * This method will call the factory method and set the instance
     * of cache classes (session, localstorage etc) in
     * cachingStore variable.
     * If the storeType is in memory then the factory method will return the
     * singleton instance of inMemoryService to cachingStore variable.
     * Set the caching age.
     * If the storeType is not in memory then the cachingStore will call the setEncryption mehtod
     * to set the encryption.
     * @param {?} storeType
     * @param {?=} encryptionAction
     * @param {?=} age
     * @return {?}
     */
    function (storeType, encryptionAction, age) {
        this.cachingStore = this.factory.createStore(storeType, this.encryptionService, this.config, this.inMemory);
        this.cachingStore.setCacheAge(age);
        if (storeType !== StoreType.InMemory) {
            this.cachingStore.setEncryption(encryptionAction);
        }
    };
    CacheStoreManagerService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CacheStoreManagerService.ctorParameters = function () { return [
        { type: EncryptionService },
        { type: ConfigurationService },
        { type: InMemoryService }
    ]; };
    /** @nocollapse */ CacheStoreManagerService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function CacheStoreManagerService_Factory() { return new CacheStoreManagerService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(EncryptionService), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(ConfigurationService), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(InMemoryService)); }, token: CacheStoreManagerService, providedIn: "root" });
    return CacheStoreManagerService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/http-verbs.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var HttpVerbs = {
    get: "get",
    post: "post",
    put: "put",
    delete: "delete",
    patch: "patch",
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/rest-api.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RestApiService = /** @class */ (function () {
    function RestApiService(httpClient) {
        this.httpClient = httpClient;
    }
    /**
     * @protected
     * @param {?} endPointUrl
     * @param {?} baseParam
     * @param {?} httpOptions
     * @return {?}
     */
    RestApiService.prototype.getMethod = /**
     * @protected
     * @param {?} endPointUrl
     * @param {?} baseParam
     * @param {?} httpOptions
     * @return {?}
     */
    function (endPointUrl, baseParam, httpOptions) {
        var _this = this;
        return this.httpClient.get("" + endPointUrl + baseParam.url, Object(tslib__WEBPACK_IMPORTED_MODULE_15__["__assign"])({}, httpOptions))
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return _this.handleResponse(res); })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["catchError"])((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleHttpError('get', error); })));
    };
    /**
     * @protected
     * @param {?} endPointUrl
     * @param {?} baseParam
     * @param {?} httpOptions
     * @param {?} reqData
     * @return {?}
     */
    RestApiService.prototype.postMethod = /**
     * @protected
     * @param {?} endPointUrl
     * @param {?} baseParam
     * @param {?} httpOptions
     * @param {?} reqData
     * @return {?}
     */
    function (endPointUrl, baseParam, httpOptions, reqData) {
        var _this = this;
        return this.httpClient.post("" + endPointUrl + baseParam.url, reqData, Object(tslib__WEBPACK_IMPORTED_MODULE_15__["__assign"])({}, httpOptions))
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return _this.handleResponse(res); })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["catchError"])((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleHttpError('post', error); })));
    };
    /**
     * @protected
     * @param {?} endPointUrl
     * @param {?} baseParam
     * @param {?} httpOptions
     * @param {?} reqData
     * @return {?}
     */
    RestApiService.prototype.put = /**
     * @protected
     * @param {?} endPointUrl
     * @param {?} baseParam
     * @param {?} httpOptions
     * @param {?} reqData
     * @return {?}
     */
    function (endPointUrl, baseParam, httpOptions, reqData) {
        var _this = this;
        return this.httpClient.put("" + endPointUrl + baseParam.url, reqData, Object(tslib__WEBPACK_IMPORTED_MODULE_15__["__assign"])({}, httpOptions))
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return _this.handleResponse(res); })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["catchError"])((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleHttpError('put', error); })));
    };
    /**
     * @protected
     * @param {?} endPointUrl
     * @param {?} baseParam
     * @param {?} httpOptions
     * @param {?} id
     * @return {?}
     */
    RestApiService.prototype.delete = /**
     * @protected
     * @param {?} endPointUrl
     * @param {?} baseParam
     * @param {?} httpOptions
     * @param {?} id
     * @return {?}
     */
    function (endPointUrl, baseParam, httpOptions, id) {
        var _this = this;
        return this.httpClient.delete("" + endPointUrl + baseParam.url + "/" + id, Object(tslib__WEBPACK_IMPORTED_MODULE_15__["__assign"])({}, httpOptions))
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return _this.handleResponse(res); })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["catchError"])((/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return _this.handleHttpError('delete', error); })));
    };
    /**
     * @private
     * @param {?} res
     * @return {?}
     */
    RestApiService.prototype.handleResponse = /**
     * @private
     * @param {?} res
     * @return {?}
     */
    function (res) {
        return res.body ? res.body : res || {};
    };
    /**
     * Handles error
     * @param [operation]
     * @param [result]
     * @returns
     */
    /**
     * Handles error
     * @private
     * @template T
     * @param {?=} operation
     * @param {?=} error
     * @return {?}
     */
    RestApiService.prototype.handleHttpError = /**
     * Handles error
     * @private
     * @template T
     * @param {?=} operation
     * @param {?=} error
     * @return {?}
     */
    function (operation, error) {
        if (operation === void 0) { operation = 'operation'; }
        /** @type {?} */
        var errMsg;
        if (error instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_22__["HttpErrorResponse"]) {
            if (!navigator.onLine) {
                // No Internet connection
                console.log('No Internet Connection');
            }
            // TODO
            /* if (environment.production) {
                if (error.status === 401 || error.status === 0) {
                    // redirect to any where
                }
            } */
            errMsg = error.status + " - " + (error.message || '');
        }
        else {
            // server(api) side error
            errMsg = error.message ? error.message : error.toString();
        }
        console.log(operation + " failed: " + error.message);
        return Promise.reject(error);
    };
    return RestApiService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DataService = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_15__["__extends"])(DataService, _super);
    /**
     * Creates an instance of data service.
     * @param httpClient
     */
    function DataService(httpClient, configService) {
        var _this = _super.call(this, httpClient) || this;
        _this.httpClient = httpClient;
        _this.configService = configService;
        return _this;
    }
    /**
     * Posts data service
     * It call the server api using httpClient
     * @param payload
     * @returns Data
     */
    /**
     * Posts data service
     * It call the server api using httpClient
     * @private
     * @param {?} payload
     * @param {?=} redirectUrl
     * @return {?} Data
     */
    DataService.prototype.postData = /**
     * Posts data service
     * It call the server api using httpClient
     * @private
     * @param {?} payload
     * @param {?=} redirectUrl
     * @return {?} Data
     */
    function (payload, redirectUrl) {
        if (redirectUrl === void 0) { redirectUrl = DISPATCH_URL; }
        /** @type {?} */
        var headers = new _angular_common_http__WEBPACK_IMPORTED_MODULE_22__["HttpHeaders"]({ 'Content-Type': 'application/x-www-form-urlencoded' });
        return this.httpClient.post(redirectUrl, 'payload=' + encodeURIComponent((/** @type {?} */ (payload))) + '&output=json', { headers: headers, withCredentials: true }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["catchError"])(this.handleError('post', [])));
    };
    /**
     * Handles error
     * @param [operation]
     * @param [result]
     * @returns
     */
    /**
     * Handles error
     * @protected
     * @template T
     * @param {?=} operation
     * @param {?=} result
     * @return {?}
     */
    DataService.prototype.handleError = /**
     * Handles error
     * @protected
     * @template T
     * @param {?=} operation
     * @param {?=} result
     * @return {?}
     */
    function (operation, result) {
        if (operation === void 0) { operation = 'operation'; }
        return (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            // TODO: send the error to remote logging infrastructure
            console.error(error); // log to console instead
            // TODO: better job of transforming error for user consumption
            console.log(operation + " failed: " + error.message);
            // Let the app keep running by returning an empty result.
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])((/** @type {?} */ (result)));
        });
    };
    /**
     *
     * It call the dataService.postData method which return the data in form of observable
     * @param cmdName
     * @param [xmlRequest]
     * @param [reportError]
     * @returns of(data)
     */
    /**
     *
     * It call the dataService.postData method which return the data in form of observable
     * @param {?} cmdName
     * @param {?=} xmlRequest
     * @param {?=} reportError
     * @param {?=} redirectUrl
     * @return {?} of(data)
     */
    DataService.prototype.post = /**
     *
     * It call the dataService.postData method which return the data in form of observable
     * @param {?} cmdName
     * @param {?=} xmlRequest
     * @param {?=} reportError
     * @param {?=} redirectUrl
     * @return {?} of(data)
     */
    function (cmdName, xmlRequest, reportError, redirectUrl) {
        if (reportError === void 0) { reportError = true; }
        if (!cmdName) {
            throw new Error("Command name can not be empty");
        }
        return this.postData(xmlRequest, redirectUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (!data.serviceResponse) {
                console.log('Could not find serviceResponse object.' +
                    'Trying to parse response as XML string for xml request :: XMLRequest: %s', xmlRequest);
                /** @type {?} */
                var xmlParsed = false;
                /** @type {?} */
                var errStr = '';
                try {
                    /** @type {?} */
                    var dom = (new DOMParser()).parseFromString(data, 'text/xml');
                    data = JSON.parse(((/** @type {?} */ (window))).xml2json(dom, '', ''));
                    xmlParsed = true;
                    console.log('Parse XML String', data);
                }
                catch (error) {
                    console.error('Response XML data parsing error ', error);
                    errStr = 'Failed to parse response data!' + error;
                    throw Error("Failed to parse response data!");
                }
                if (!xmlParsed) {
                    console.log(errStr);
                    return errStr;
                }
            }
            //
            if (data.serviceResponse.result === COMMON.RESULT_OK || !data.serviceResponse.result) {
                // TODO:: Implement add to cache mechanism here
            }
            else if (data.serviceResponse.result.toUpperCase() === COMMON.RESULT_ERROR) {
                if (reportError) {
                    /** @type {?} */
                    var error = {
                        desc: data.serviceResponse.error.errorCode + ' : ' + data.serviceResponse.error.message,
                        text: '----------------------------------------------' +
                            '--------------------------\nError Stack for command **' + cmdName + '**\n------' +
                            '------------------------------------------------------------------\n' + data.serviceResponse.error.stack
                    };
                    error = Object.assign({}, error, data.serviceResponse.error);
                    console.error('BaseConnection -> error', data.serviceResponse);
                    // TODO:: Implement raising exception or error here
                }
            }
            else {
                console.error('BaseConnection -> error2', data.serviceResponse);
            }
            return data.serviceResponse;
        })));
    };
    /**
    *This method is used to give an http get call
    *
    * @param url
    * @param headers
    * @returns Observable<any>
    * @memberof DataService
    */
    /**
     * This method is used to give an http get call
     *
     * \@memberof DataService
     * @param {?} url
     * @param {?} headers
     * @return {?} Observable<any>
     */
    DataService.prototype.get = /**
     * This method is used to give an http get call
     *
     * \@memberof DataService
     * @param {?} url
     * @param {?} headers
     * @return {?} Observable<any>
     */
    function (url, headers) {
        return this.httpClient.get(url, headers);
    };
    /**
     * Rest Api End point Integration
     */
    /**
     *
     * It call the dataService.postData method which return the data in form of observable
     * @param cmdName
     * @param [payload]
     * @param [reportError]
     * @returns of(data)
     */
    /**
         * Rest Api End point Integration
         */
    /**
     *
     * It call the dataService.postData method which return the data in form of observable
     * @param {?} cmdName
     * @param {?} payload
     * @param {?} baseParam
     * @param {?=} reportError
     * @return {?} of(data)
     */
    DataService.prototype.sendData = /**
         * Rest Api End point Integration
         */
    /**
     *
     * It call the dataService.postData method which return the data in form of observable
     * @param {?} cmdName
     * @param {?} payload
     * @param {?} baseParam
     * @param {?=} reportError
     * @return {?} of(data)
     */
    function (cmdName, payload, baseParam, reportError) {
        if (reportError === void 0) { reportError = true; }
        if (!cmdName) {
            throw new Error("Command name can not be empty");
        }
        return this.sendRequestToServer(payload, baseParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            console.log(data);
            if (!data.serviceResponse) {
                /** @type {?} */
                var error = {
                    status: 200,
                    message: 'No content found or No records found'
                };
                console.error(error.message);
                throw error;
            }
            if (data.serviceResponse.result === COMMON.RESULT_OK || !data.serviceResponse.result) {
                // TODO:: Implement add to cache mechanism here
            }
            else if (data.serviceResponse.result.toUpperCase() === COMMON.RESULT_ERROR) {
                if (reportError) {
                    /** @type {?} */
                    var error = {
                        desc: data.serviceResponse.error.errorCode + ' : ' + data.serviceResponse.error.message,
                        text: '----------------------------------------------' +
                            '--------------------------\nError Stack for command **' + cmdName + '**\n------' +
                            '------------------------------------------------------------------\n' + data.serviceResponse.error.stack
                    };
                    error = Object.assign({}, error, data.serviceResponse.error);
                    console.error('BaseConnection -> error', data.serviceResponse);
                    // TODO:: Implement raising exception or error here
                }
            }
            else {
                console.error('BaseConnection -> error2', data.serviceResponse);
            }
            return data.serviceResponse;
        })));
    };
    /**
     * @private
     * @param {?} payload
     * @param {?} baseParam
     * @return {?}
     */
    DataService.prototype.getHttpOptions = /**
     * @private
     * @param {?} payload
     * @param {?} baseParam
     * @return {?}
     */
    function (payload, baseParam) {
        /** @type {?} */
        var httpOptions = { headers: payload.headers, params: payload.queryParams, withCredentials: false };
        if (!baseParam.prelogin) {
            httpOptions = Object(tslib__WEBPACK_IMPORTED_MODULE_15__["__assign"])({}, httpOptions, { withCredentials: true });
        }
        return httpOptions;
    };
    /**
     * @private
     * @param {?} baseParam
     * @return {?}
     */
    DataService.prototype.getEndPointUrl = /**
     * @private
     * @param {?} baseParam
     * @return {?}
     */
    function (baseParam) {
        /** @type {?} */
        var endPointUrl = '';
        if (baseParam.isSSOEndPoint) {
            endPointUrl = this.configService.authUrl;
        }
        else {
            endPointUrl = this.configService.soApiUrl;
        }
        return endPointUrl;
    };
    /**
     * @private
     * @param {?} payload
     * @param {?} baseParam
     * @return {?}
     */
    DataService.prototype.sendRequestToServer = /**
     * @private
     * @param {?} payload
     * @param {?} baseParam
     * @return {?}
     */
    function (payload, baseParam) {
        if (!baseParam.httpMethod) {
            baseParam.httpMethod = HttpVerbs.get;
        }
        if (!baseParam.url) {
            throw new Error('Rest end point url can not be empty, please set Action Url.');
        }
        /** @type {?} */
        var httpOptions = this.getHttpOptions(payload, baseParam);
        /** @type {?} */
        var endPointUrl = this.getEndPointUrl(baseParam);
        if (!endPointUrl) {
            throw new Error('Rest end point url can not be empty.');
        }
        switch (baseParam.httpMethod) {
            case HttpVerbs.get:
                return this.getMethod(endPointUrl, baseParam, httpOptions); // will rename - affects on app1
            case HttpVerbs.post:
                return this.postMethod(endPointUrl, baseParam, httpOptions, payload.jsonRequest); // will rename - affects on app1
            case HttpVerbs.put:
                return this.put(endPointUrl, baseParam, httpOptions, payload.jsonRequest);
            case HttpVerbs.delete:
                return this.delete(endPointUrl, baseParam, httpOptions, payload.id);
            default:
                // return of([]);
                throw new Error('Http method not found!');
        }
    };
    DataService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DataService.ctorParameters = function () { return [
        { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_22__["HttpClient"] },
        { type: ConfigurationService }
    ]; };
    /** @nocollapse */ DataService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function DataService_Factory() { return new DataService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common_http__WEBPACK_IMPORTED_MODULE_22__["HttpClient"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(ConfigurationService)); }, token: DataService, providedIn: "root" });
    return DataService;
}(RestApiService));
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/dependency-manager.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// const dependencyList: any = <any>require('../assets/data/getDependencyList.json');
var DependencyManagerService = /** @class */ (function () {
    /**
     * Creates an instance of dependency manager service.
     * @param cacheStoreManagerService
     * @param dataService
     */
    function DependencyManagerService(cacheStoreManagerService, dataService) {
        this.cacheStoreManagerService = cacheStoreManagerService;
        this.dataService = dataService;
    }
    /**
     * Gets dependency manager service
     *
     * Check the cacheKey in action parameter
     * if it is undefined then call the post method. On success of the call, clear if any dependencies specified.
     * If it is not null or defined then check cacheType, if cacheType is non sticky then
     * set the storeType is in-memory. If no storeType information pass in parameter
     * then the default value of storeType is in-memory.
     * If no encryption information pass in parameter then the default value of encryption is false.
     * Set the reference of cache classes (session, in-memory etc) by calling the cacheStoreManagerService.SetCachingStore() function.
     * Call the cacheStoreManager get method, It will check if cache key available in cache
     * then it will return the value in observable form. If not then
     * execute the this.post method and set the response in cache and return the value in observable form
     * if there are dependency list then purge the dependency list means remove the key from cache.
     * @param baseParam
     * @returns get
     */
    /**
     * Gets dependency manager service
     *
     * Check the cacheKey in action parameter
     * if it is undefined then call the post method. On success of the call, clear if any dependencies specified.
     * If it is not null or defined then check cacheType, if cacheType is non sticky then
     * set the storeType is in-memory. If no storeType information pass in parameter
     * then the default value of storeType is in-memory.
     * If no encryption information pass in parameter then the default value of encryption is false.
     * Set the reference of cache classes (session, in-memory etc) by calling the cacheStoreManagerService.SetCachingStore() function.
     * Call the cacheStoreManager get method, It will check if cache key available in cache
     * then it will return the value in observable form. If not then
     * execute the this.post method and set the response in cache and return the value in observable form
     * if there are dependency list then purge the dependency list means remove the key from cache.
     * @param {?} baseParam
     * @return {?} get
     */
    DependencyManagerService.prototype.get = /**
     * Gets dependency manager service
     *
     * Check the cacheKey in action parameter
     * if it is undefined then call the post method. On success of the call, clear if any dependencies specified.
     * If it is not null or defined then check cacheType, if cacheType is non sticky then
     * set the storeType is in-memory. If no storeType information pass in parameter
     * then the default value of storeType is in-memory.
     * If no encryption information pass in parameter then the default value of encryption is false.
     * Set the reference of cache classes (session, in-memory etc) by calling the cacheStoreManagerService.SetCachingStore() function.
     * Call the cacheStoreManager get method, It will check if cache key available in cache
     * then it will return the value in observable form. If not then
     * execute the this.post method and set the response in cache and return the value in observable form
     * if there are dependency list then purge the dependency list means remove the key from cache.
     * @param {?} baseParam
     * @return {?} get
     */
    function (baseParam) {
        var _this = this;
        if (!baseParam.cacheKey) {
            return this.dataService.post(baseParam.cmdName, baseParam.xmlRequest, baseParam.reportError, baseParam.url)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["tap"])((/**
             * @return {?}
             */
            function () {
                _this.cacheStoreManagerService.setCachingStore(baseParam.storeType);
                _this.clearDependencies(baseParam.dependencyList);
            })));
        }
        else {
            baseParam.storeType = (baseParam.cacheType === CacheType.nonsticky) ? StoreType.InMemory : baseParam.storeType;
            this.cacheStoreManagerService.setCachingStore(baseParam.storeType, baseParam.encryption);
            if (baseParam.isSelf === true) {
                this.clearDependencies(baseParam.dependencyList);
            }
            return this.cacheStoreManagerService.get(baseParam.cacheKey, this.dataService.post(baseParam.cmdName, baseParam.xmlRequest, baseParam.reportError, baseParam.url))
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["tap"])((/**
             * @return {?}
             */
            function () {
                if (baseParam.isSelf === false) {
                    _this.clearDependencies(baseParam.dependencyList);
                }
            })));
        }
    };
    /**
     * Gets dependency manager service
     *
     * Check the cacheKey in action parameter
     * if it is undefined then call the post method. On success of the call, clear if any dependencies specified.
     * If it is not null or defined then check cacheType, if cacheType is non sticky then
     * set the storeType is in-memory. If no storeType information pass in parameter
     * then the default value of storeType is in-memory.
     * If no encryption information pass in parameter then the default value of encryption is false.
     * Set the reference of cache classes (session, in-memory etc) by calling the cacheStoreManagerService.SetCachingStore() function.
     * Call the cacheStoreManager get method, It will check if cache key available in cache
     * then it will return the value in observable form. If not then
     * execute the this.post method and set the response in cache and return the value in observable form
     * if there are dependency list then purge the dependency list means remove the key from cache.
     * @param baseParam
     * @returns get
     */
    /**
     * Gets dependency manager service
     *
     * Check the cacheKey in action parameter
     * if it is undefined then call the post method. On success of the call, clear if any dependencies specified.
     * If it is not null or defined then check cacheType, if cacheType is non sticky then
     * set the storeType is in-memory. If no storeType information pass in parameter
     * then the default value of storeType is in-memory.
     * If no encryption information pass in parameter then the default value of encryption is false.
     * Set the reference of cache classes (session, in-memory etc) by calling the cacheStoreManagerService.SetCachingStore() function.
     * Call the cacheStoreManager get method, It will check if cache key available in cache
     * then it will return the value in observable form. If not then
     * execute the this.post method and set the response in cache and return the value in observable form
     * if there are dependency list then purge the dependency list means remove the key from cache.
     * @param {?} payload
     * @param {?} baseParam
     * @return {?} get
     */
    DependencyManagerService.prototype.setDependencies = /**
     * Gets dependency manager service
     *
     * Check the cacheKey in action parameter
     * if it is undefined then call the post method. On success of the call, clear if any dependencies specified.
     * If it is not null or defined then check cacheType, if cacheType is non sticky then
     * set the storeType is in-memory. If no storeType information pass in parameter
     * then the default value of storeType is in-memory.
     * If no encryption information pass in parameter then the default value of encryption is false.
     * Set the reference of cache classes (session, in-memory etc) by calling the cacheStoreManagerService.SetCachingStore() function.
     * Call the cacheStoreManager get method, It will check if cache key available in cache
     * then it will return the value in observable form. If not then
     * execute the this.post method and set the response in cache and return the value in observable form
     * if there are dependency list then purge the dependency list means remove the key from cache.
     * @param {?} payload
     * @param {?} baseParam
     * @return {?} get
     */
    function (payload, baseParam) {
        var _this = this;
        if (!baseParam.cacheKey) {
            return this.dataService.sendData(baseParam.cmdName, payload, baseParam, baseParam.reportError)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["tap"])((/**
             * @return {?}
             */
            function () {
                _this.cacheStoreManagerService.setCachingStore(baseParam.storeType);
                _this.clearDependencies(baseParam.dependencyList);
            })));
        }
        else {
            baseParam.storeType = (baseParam.cacheType === CacheType.nonsticky) ? StoreType.InMemory : baseParam.storeType;
            this.cacheStoreManagerService.setCachingStore(baseParam.storeType, baseParam.encryption);
            if (baseParam.isSelf === true) {
                this.clearDependencies(baseParam.dependencyList);
            }
            return this.cacheStoreManagerService.get(baseParam.cacheKey, this.dataService.sendData(baseParam.cmdName, payload, baseParam, baseParam.reportError))
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["tap"])((/**
             * @return {?}
             */
            function () {
                if (baseParam.isSelf === false) {
                    _this.clearDependencies(baseParam.dependencyList);
                }
            })));
        }
    };
    /**
     * @param {?} dependencies
     * @return {?}
     */
    DependencyManagerService.prototype.clearDependencies = /**
     * @param {?} dependencies
     * @return {?}
     */
    function (dependencies) {
        var _this = this;
        if (dependencies && dependencies.length > 0) {
            dependencies.map((/**
             * @param {?} key
             * @return {?}
             */
            function (key) {
                _this.cacheStoreManagerService.remove(key);
            }));
        }
    };
    DependencyManagerService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DependencyManagerService.ctorParameters = function () { return [
        { type: CacheStoreManagerService },
        { type: DataService }
    ]; };
    /** @nocollapse */ DependencyManagerService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function DependencyManagerService_Factory() { return new DependencyManagerService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(CacheStoreManagerService), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DataService)); }, token: DependencyManagerService, providedIn: "root" });
    return DependencyManagerService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/base-connection.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BaseConnectionService = /** @class */ (function () {
    /**
     * Creates an instance of base connection service.
     * @param dependencyManagerService
     */
    function BaseConnectionService(dependencyManagerService) {
        this.dependencyManagerService = dependencyManagerService;
    }
    /**
     * Sends request
     *
     * It call the dependencyManagerService get method which return the api result.
     * It contains the payloadObj (xmlRequest which pass in api call)
     * and action interface parameter.
     * It call the setDefault method and setting the default values.
     *
     * @param payloadObj
     * @param [baseParam]
     * @returns data
     */
    /**
     * Sends request
     *
     * It call the dependencyManagerService get method which return the api result.
     * It contains the payloadObj (xmlRequest which pass in api call)
     * and action interface parameter.
     * It call the setDefault method and setting the default values.
     *
     * @param {?} payloadObj
     * @param {?=} baseParam
     * @return {?} data
     */
    BaseConnectionService.prototype.sendRequest = /**
     * Sends request
     *
     * It call the dependencyManagerService get method which return the api result.
     * It contains the payloadObj (xmlRequest which pass in api call)
     * and action interface parameter.
     * It call the setDefault method and setting the default values.
     *
     * @param {?} payloadObj
     * @param {?=} baseParam
     * @return {?} data
     */
    function (payloadObj, baseParam) {
        if (!payloadObj) {
            throw new Error('PayloadObj can not be undefined or empty');
        }
        /** @type {?} */
        var xmlRequest;
        if (typeof payloadObj === 'string') {
            xmlRequest = payloadObj;
        }
        else {
            xmlRequest = payloadObj.xmlRequest;
        }
        console.warn('BaseConnection ->sendRequest [DEPRECATED]:' +
            ' Directly passing XMLRequest as string is no longer supported!  XMLRequest :: ', xmlRequest);
        /** @type {?} */
        var cmdName = xmlRequest.match(/<command name=\"(\w+)\"/i)[1];
        /** @type {?} */
        var actionParam = {};
        if (!baseParam) {
            baseParam = actionParam;
        }
        baseParam = this.setDefault(baseParam);
        if (!baseParam.xmlRequest) {
            baseParam.xmlRequest = xmlRequest;
        }
        if (!baseParam.cmdName) {
            baseParam.cmdName = cmdName;
        }
        return this.dependencyManagerService.get(baseParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            return data;
        })));
    };
    /**
     * Sends request
     *
     * It call the dependencyManagerService get method which return the api result.
     * It contains the payloadObj (jsonRequest which pass in api call)
     * and action interface parameter.
     * It call the setDefault method and setting the default values.
     *
     * @param payloadObj
     * @param [actionParam]
     * @returns res
     */
    /**
     * Sends request
     *
     * It call the dependencyManagerService get method which return the api result.
     * It contains the payloadObj (jsonRequest which pass in api call)
     * and action interface parameter.
     * It call the setDefault method and setting the default values.
     *
     * @param {?} payloadObj
     * @param {?=} actionParam
     * @return {?} res
     */
    BaseConnectionService.prototype.send = /**
     * Sends request
     *
     * It call the dependencyManagerService get method which return the api result.
     * It contains the payloadObj (jsonRequest which pass in api call)
     * and action interface parameter.
     * It call the setDefault method and setting the default values.
     *
     * @param {?} payloadObj
     * @param {?=} actionParam
     * @return {?} res
     */
    function (payloadObj, actionParam) {
        if (!payloadObj) {
            throw new Error('PayloadObj can not be undefined or empty');
        }
        console.warn('BaseConnection ->sendRequest:', payloadObj.jsonRequest);
        /** @type {?} */
        var cmdName = payloadObj.command;
        actionParam = !actionParam ? (/** @type {?} */ ({})) : actionParam;
        actionParam = this.setDefault(actionParam);
        if (!actionParam.cmdName) {
            actionParam.cmdName = cmdName;
        }
        return this.dependencyManagerService.setDependencies(payloadObj, actionParam)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            return res;
        })));
    };
    /**
     * Sets default
     * sendRequest function is caller of setDefault method.
     *
     * Default value
     * reportError=true
     * storeType=InMemory
     * cacheType=nonSticky
     * encryption=false
     * isSelf= false
     *
     * @param [baseParam]
     * @returns
     */
    /**
     * Sets default
     * sendRequest function is caller of setDefault method.
     *
     * Default value
     * reportError=true
     * storeType=InMemory
     * cacheType=nonSticky
     * encryption=false
     * isSelf= false
     *
     * @param {?=} baseParam
     * @return {?}
     */
    BaseConnectionService.prototype.setDefault = /**
     * Sets default
     * sendRequest function is caller of setDefault method.
     *
     * Default value
     * reportError=true
     * storeType=InMemory
     * cacheType=nonSticky
     * encryption=false
     * isSelf= false
     *
     * @param {?=} baseParam
     * @return {?}
     */
    function (baseParam) {
        if (!baseParam.url) {
            baseParam.url = DISPATCH_URL;
        }
        if (baseParam.reportError === undefined || baseParam.reportError === null) {
            baseParam.reportError = true;
        }
        if (!baseParam.cacheType) {
            baseParam.cacheType = CacheType.nonsticky;
        }
        if (!baseParam.storeType) {
            baseParam.storeType = StoreType.InMemory;
        }
        if (!baseParam.encryption) {
            baseParam.encryption = EncryptionAction.noencrypt;
        }
        if (baseParam.isSelf === undefined || baseParam.isSelf === null) {
            baseParam.isSelf = false;
        }
        // to call studyoptimizer app by default(after login)
        if (!baseParam.isSSOEndPoint) {
            baseParam.isSSOEndPoint = false;
        }
        /* if (!baseParam.endPoint) {
            baseParam.endPoint = true;
        } */
        if (!baseParam.prelogin) {
            baseParam.prelogin = false;
        }
        return baseParam;
    };
    BaseConnectionService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    BaseConnectionService.ctorParameters = function () { return [
        { type: DependencyManagerService }
    ]; };
    /** @nocollapse */ BaseConnectionService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function BaseConnectionService_Factory() { return new BaseConnectionService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(DependencyManagerService)); }, token: BaseConnectionService, providedIn: "root" });
    return BaseConnectionService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/payload.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Payload
 */
var /**
 * Payload
 */
Payload = /** @class */ (function () {
    /**
     * Creates an instance of payload.
     * @param command
     * @param params
     * @param xmlRequest
     */
    function Payload(command, params, xmlRequest) {
        this.command = command;
        this.params = params;
        this.xmlRequest = xmlRequest;
    }
    return Payload;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/api-payload.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * API Payload
 */
var /**
 * API Payload
 */
APIPayload = /** @class */ (function () {
    function APIPayload(command, queryParams, headers, moduleInfo, jsonRequest) {
        if (queryParams === void 0) { queryParams = null; }
        if (headers === void 0) { headers = null; }
        if (moduleInfo === void 0) { moduleInfo = null; }
        this.command = command;
        this.queryParams = queryParams;
        this.headers = headers;
        this.moduleInfo = moduleInfo;
        this.jsonRequest = jsonRequest;
        this.command = command;
        this.queryParams = this.getQueryParams(queryParams);
        this.headers = this.getHeaders(headers);
        this.moduleInfo = moduleInfo;
        this.jsonRequest = this.getJSONReq(jsonRequest);
    }
    /**
     * @private
     * @param {?} headers
     * @return {?}
     */
    APIPayload.prototype.getHeaders = /**
     * @private
     * @param {?} headers
     * @return {?}
     */
    function (headers) {
        /** @type {?} */
        var httpHeaders = {};
        for (var key in headers) {
            if (headers.hasOwnProperty(key)) {
                /** @type {?} */
                var element = headers[key];
                httpHeaders[key] = element;
            }
        }
        httpHeaders['Content-Type'] = 'application/json; charset=utf-8';
        // local time header
        httpHeaders['localTime'] = new Date().toString();
        // tenant id
        httpHeaders['tenantID'] = 'tenant1';
        // command header
        if (this.command) {
            httpHeaders['command'] = this.command;
        }
        if (this.moduleInfo) {
            // module header
            if (this.moduleInfo.moduleName) {
                httpHeaders['module'] = this.moduleInfo.moduleName;
            }
            // page name
            if (this.moduleInfo.pageName) {
                httpHeaders['page'] = this.moduleInfo.pageName;
            }
            // study key
            if (this.moduleInfo.studykey) {
                httpHeaders['studykey'] = this.moduleInfo.studykey.toString();
            }
            if (this.moduleInfo.plankey) {
                httpHeaders['plankey'] = this.moduleInfo.plankey.toString();
            }
        }
        return new _angular_common_http__WEBPACK_IMPORTED_MODULE_22__["HttpHeaders"](httpHeaders);
    };
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    APIPayload.prototype.getQueryParams = /**
     * @private
     * @param {?} params
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var queryParams = {};
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                /** @type {?} */
                var element = params[key];
                queryParams[key] = element;
            }
        }
        return new _angular_common_http__WEBPACK_IMPORTED_MODULE_22__["HttpParams"]({
            fromObject: queryParams
        });
    };
    /**
     * @private
     * @param {?} jsonRequest
     * @return {?}
     */
    APIPayload.prototype.getJSONReq = /**
     * @private
     * @param {?} jsonRequest
     * @return {?}
     */
    function (jsonRequest) {
        try {
            return jsonRequest ? JSON.stringify(jsonRequest) : null;
        }
        catch (error) {
            console.error('JSON stringify error', error);
            throw new Error('APIPayload: Error passing request object to JSON string');
        }
    };
    return APIPayload;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/base-payload-command.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BasePayloadCommandService = /** @class */ (function () {
    /**
     * Creates an instance of base payload command service.
     */
    function BasePayloadCommandService() {
    }
    /**
     * Gets xmltag
     * @param tags
     * @returns the xml elements
     */
    /**
     * Gets xmltag
     * @private
     * @param {?} tags
     * @return {?} the xml elements
     */
    BasePayloadCommandService.prototype.getXMLTag = /**
     * Gets xmltag
     * @private
     * @param {?} tags
     * @return {?} the xml elements
     */
    function (tags) {
        // If the content is not an Object or an Array return the value
        if (typeof tags !== 'object') {
            if (typeof tags === 'string') {
                tags = StringUtil.escapeHTML(tags);
            }
            return tags;
        }
        /** @type {?} */
        var req = '';
        // For each Value that you have in the object or an Array process it for a new tag
        for (var key in tags) {
            if (!tags.hasOwnProperty(key)) {
                continue;
            }
            // If The Data is not in the form of an Array parse the OBject for parameters and tags
            if (Object.prototype.toString.call(tags) !== '[object Array]') {
                if (key !== 'params' && key !== 'value') {
                    req += "<" + key;
                    if (tags[key] && tags[key].params !== undefined) {
                        // console.log('Params:', tags[key].params);
                        for (var value in tags[key].params) {
                            // req += ' ' + value + '=\'' + tags[key].params[value] + '\'';
                            if (value) {
                                req += " " + value + "=\"" + tags[key].params[value] + "\"";
                            }
                        }
                    }
                    req += ">";
                }
            }
            if (key !== 'params') {
                req += this.getXMLTag(tags[key]);
            }
            if (Object.prototype.toString.call(tags) !== '[object Array]') {
                if (key !== 'params' && key !== 'value') {
                    req += "</" + key + ">";
                }
            }
        }
        return req;
    };
    /**
     * Builds request
     *
     * It will generate the xmlRequest
     * Create the serviceRequest xml root tag
     * Based on command parameter value, create the command xml tag
     * If params parameter value is not null then iterate it and
     * create the parameter tag under the command xml tag
     * check the commandTags parameter if it is not null then call the getXMLTag method and set
     * the output in request variable.
     * create the UserAction xml tag and add module, page and localtime xml tag.
     * e.g.
     * const params = categories: {
          category: 'login'
      }
     * buildRequest('GetTerms',params.categories);
     * Output
     *  <serviceRequest xmlns="http://www.coprindm.com">
        <command name="GetTerms">
          <parameter name="category">login</parameter>
        </command>
        <userAction>
        <module>STDLST</module>
        <page>MNGHILST</page>
          <localTime>Thu Jun 21 10:21:46 GMT+0530 2018</localTime>
        </userAction>
      </serviceRequest>
     * If the commandTags paramter is not null then call the getXMLTag method
     * e.g. const tempObject = {
        criteriaList: {
          value: [ {
            criterionVal: {
            params: {
              criterionId: 'THERAPY'
            },
            value: 'All1'
          }},
          {
            criterionVal: {
            params: {
              criterionId: 'ASSET'
            },
            value: 'All2'
          }}
          ]
        }
      };
     * buildRequest('GetTerms',{},{},tempObject);
     * Output
     *<serviceRequest xmlns="http://www.coprindm.com">
        <command name="GetStudyList">
          <criteriaList>
            <criterionVal criterionId="THERAPY">All1</criterionVal>
               <criterionVal criterionId="ASSET">All2</criterionVal>
          </criteriaList>
        </command>
        <userAction>
          <localTime>Thu Jun 21 12:25:23 GMT+0530 2018</localTime>
        </userAction>
      </serviceRequest>
     * @param command
     * @param [params]
     * @param [tags]
     * @param [commandTags]
     * @param [moduleInfo]
     * @returns xmlRequest
     */
    /**
     * Builds request
     *
     * It will generate the xmlRequest
     * Create the serviceRequest xml root tag
     * Based on command parameter value, create the command xml tag
     * If params parameter value is not null then iterate it and
     * create the parameter tag under the command xml tag
     * check the commandTags parameter if it is not null then call the getXMLTag method and set
     * the output in request variable.
     * create the UserAction xml tag and add module, page and localtime xml tag.
     * e.g.
     * const params = categories: {
     * category: 'login'
     * }
     * buildRequest('GetTerms',params.categories);
     * Output
     *  <serviceRequest xmlns="http://www.coprindm.com">
     * <command name="GetTerms">
     * <parameter name="category">login</parameter>
     * </command>
     * <userAction>
     * <module>STDLST</module>
     * <page>MNGHILST</page>
     * <localTime>Thu Jun 21 10:21:46 GMT+0530 2018</localTime>
     * </userAction>
     * </serviceRequest>
     * If the commandTags paramter is not null then call the getXMLTag method
     * e.g. const tempObject = {
     * criteriaList: {
     * value: [ {
     * criterionVal: {
     * params: {
     * criterionId: 'THERAPY'
     * },
     * value: 'All1'
     * }},
     * {
     * criterionVal: {
     * params: {
     * criterionId: 'ASSET'
     * },
     * value: 'All2'
     * }}
     * ]
     * }
     * };
     * buildRequest('GetTerms',{},{},tempObject);
     * Output
     * <serviceRequest xmlns="http://www.coprindm.com">
     * <command name="GetStudyList">
     * <criteriaList>
     * <criterionVal criterionId="THERAPY">All1</criterionVal>
     * <criterionVal criterionId="ASSET">All2</criterionVal>
     * </criteriaList>
     * </command>
     * <userAction>
     * <localTime>Thu Jun 21 12:25:23 GMT+0530 2018</localTime>
     * </userAction>
     * </serviceRequest>
     * @param {?} command
     * @param {?=} params
     * @param {?=} tags
     * @param {?=} commandTags
     * @param {?=} moduleInfo
     * @return {?} xmlRequest
     */
    BasePayloadCommandService.prototype.buildRequest = /**
     * Builds request
     *
     * It will generate the xmlRequest
     * Create the serviceRequest xml root tag
     * Based on command parameter value, create the command xml tag
     * If params parameter value is not null then iterate it and
     * create the parameter tag under the command xml tag
     * check the commandTags parameter if it is not null then call the getXMLTag method and set
     * the output in request variable.
     * create the UserAction xml tag and add module, page and localtime xml tag.
     * e.g.
     * const params = categories: {
     * category: 'login'
     * }
     * buildRequest('GetTerms',params.categories);
     * Output
     *  <serviceRequest xmlns="http://www.coprindm.com">
     * <command name="GetTerms">
     * <parameter name="category">login</parameter>
     * </command>
     * <userAction>
     * <module>STDLST</module>
     * <page>MNGHILST</page>
     * <localTime>Thu Jun 21 10:21:46 GMT+0530 2018</localTime>
     * </userAction>
     * </serviceRequest>
     * If the commandTags paramter is not null then call the getXMLTag method
     * e.g. const tempObject = {
     * criteriaList: {
     * value: [ {
     * criterionVal: {
     * params: {
     * criterionId: 'THERAPY'
     * },
     * value: 'All1'
     * }},
     * {
     * criterionVal: {
     * params: {
     * criterionId: 'ASSET'
     * },
     * value: 'All2'
     * }}
     * ]
     * }
     * };
     * buildRequest('GetTerms',{},{},tempObject);
     * Output
     * <serviceRequest xmlns="http://www.coprindm.com">
     * <command name="GetStudyList">
     * <criteriaList>
     * <criterionVal criterionId="THERAPY">All1</criterionVal>
     * <criterionVal criterionId="ASSET">All2</criterionVal>
     * </criteriaList>
     * </command>
     * <userAction>
     * <localTime>Thu Jun 21 12:25:23 GMT+0530 2018</localTime>
     * </userAction>
     * </serviceRequest>
     * @param {?} command
     * @param {?=} params
     * @param {?=} tags
     * @param {?=} commandTags
     * @param {?=} moduleInfo
     * @return {?} xmlRequest
     */
    function (command, params, tags, commandTags, moduleInfo) {
        if (params === void 0) { params = {}; }
        if (tags === void 0) { tags = null; }
        if (commandTags === void 0) { commandTags = null; }
        if (moduleInfo === void 0) { moduleInfo = null; }
        // let cacheResponse = (!!params && !!params.cacheResponse),
        // cacheId = command;
        /** @type {?} */
        var req = "<serviceRequest xmlns=\"http://www.coprindm.com\">";
        /** @type {?} */
        var key;
        req += "<command name=\"" + command + "\">";
        if (params !== null) {
            // if (cacheResponse) {
            // delete cacheResponse prop from params as it's used flagging BaseConnection.sendRequest to cache response or not.
            // delete params.cacheResponse;
            // }
            for (key in params) {
                if (key) {
                    /** @type {?} */
                    var paramsVal = '';
                    if (typeof params[key] === 'string') {
                        paramsVal = StringUtil.escapeHTML(params[key]);
                    }
                    else {
                        paramsVal = params[key];
                    }
                    req += "<parameter name=\"" + key + "\">" + paramsVal + "</parameter>";
                    // cacheId += '_' + key + '-' + params[key];
                }
                // @NOTE should we consider truncating cache id as it might get really long for long list of parameters!
            }
        }
        if (null !== commandTags && undefined !== commandTags) {
            req += this.getXMLTag(commandTags);
        }
        req += "</command>";
        req += "<userAction>";
        // To add module and page detail parameters
        if (moduleInfo) {
            if (moduleInfo.moduleName) {
                req += "<module>" + moduleInfo.moduleName + "</module>";
            }
            if (moduleInfo.pageName) {
                req += "<page>" + moduleInfo.pageName + "</page>";
            }
            if (moduleInfo.studykey) {
                req += "<studykey>" + moduleInfo.studykey + "</studykey>";
            }
        }
        req += "<localTime>" + (new Date()).toString() + "</localTime>";
        req += "</userAction>";
        if (null !== tags) {
            for (key in tags) {
                if (key) {
                    req += "<" + key + ">" + tags[key] + "</" + key + ">";
                }
            }
        }
        req += "</serviceRequest>";
        return new Payload(command, params, req);
    };
    /**
     * @param {?} command
     * @param {?=} params
     * @param {?=} tags
     * @param {?=} commandTags
     * @param {?=} moduleInfo
     * @return {?}
     */
    BasePayloadCommandService.prototype.buildAPIRequest = /**
     * @param {?} command
     * @param {?=} params
     * @param {?=} tags
     * @param {?=} commandTags
     * @param {?=} moduleInfo
     * @return {?}
     */
    function (command, params, tags, commandTags, moduleInfo) {
        if (params === void 0) { params = {}; }
        if (tags === void 0) { tags = null; }
        if (commandTags === void 0) { commandTags = null; }
        if (moduleInfo === void 0) { moduleInfo = null; }
        return new APIPayload(command, params, moduleInfo);
    };
    BasePayloadCommandService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    BasePayloadCommandService.ctorParameters = function () { return []; };
    /** @nocollapse */ BasePayloadCommandService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function BasePayloadCommandService_Factory() { return new BasePayloadCommandService(); }, token: BasePayloadCommandService, providedIn: "root" });
    return BasePayloadCommandService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/payload-command.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PayloadCommandService = /** @class */ (function () {
    /**
     * Creates an instance of payload command service.
     * @param basePayloadCommand
     */
    function PayloadCommandService(basePayloadCommand) {
        this.basePayloadCommand = basePayloadCommand;
    }
    /**
     * Gets command details
     * It called the basePayloadCommand.buildRequest method which returns the xmlRequest
     * @param [command]
     * @param [params]
     * @param [tags]
     * @param [commandtags]
     * @param [moduleInfo]
     * @returns xmlRequest
     */
    /**
     * Gets command details
     * It called the basePayloadCommand.buildRequest method which returns the xmlRequest
     * @param {?} command
     * @param {?=} params
     * @param {?=} tags
     * @param {?=} commandtags
     * @param {?=} moduleInfo
     * @return {?} xmlRequest
     */
    PayloadCommandService.prototype.getCommandDetails = /**
     * Gets command details
     * It called the basePayloadCommand.buildRequest method which returns the xmlRequest
     * @param {?} command
     * @param {?=} params
     * @param {?=} tags
     * @param {?=} commandtags
     * @param {?=} moduleInfo
     * @return {?} xmlRequest
     */
    function (command, params, tags, commandtags, moduleInfo) {
        if (params === void 0) { params = null; }
        if (tags === void 0) { tags = null; }
        if (commandtags === void 0) { commandtags = null; }
        if (moduleInfo === void 0) { moduleInfo = null; }
        if (!command) {
            throw new Error("Command name can not be empty");
        }
        return this.basePayloadCommand.buildRequest(command, params, tags, commandtags, moduleInfo);
    };
    /**
     * Gets command details
     * It called the basePayloadCommand.buildRequest method which returns the xmlRequest
     * @param [command]
     * @param [queryParams]
     * @param [headers]
     * @param [moduleInfo]
     * @param [req]
     */
    /**
     * Gets command details
     * It called the basePayloadCommand.buildRequest method which returns the xmlRequest
     * @param {?} command
     * @param {?=} queryParams
     * @param {?=} headers
     * @param {?=} moduleInfo
     * @param {?=} req
     * @return {?}
     */
    PayloadCommandService.prototype.getApiRequest = /**
     * Gets command details
     * It called the basePayloadCommand.buildRequest method which returns the xmlRequest
     * @param {?} command
     * @param {?=} queryParams
     * @param {?=} headers
     * @param {?=} moduleInfo
     * @param {?=} req
     * @return {?}
     */
    function (command, queryParams, headers, moduleInfo, req) {
        if (queryParams === void 0) { queryParams = null; }
        if (headers === void 0) { headers = null; }
        if (moduleInfo === void 0) { moduleInfo = null; }
        if (!command) {
            throw new Error("Command name can not be empty");
        }
        return new APIPayload(command, queryParams, headers, moduleInfo, req);
    };
    PayloadCommandService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PayloadCommandService.ctorParameters = function () { return [
        { type: BasePayloadCommandService }
    ]; };
    /** @nocollapse */ PayloadCommandService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function PayloadCommandService_Factory() { return new PayloadCommandService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BasePayloadCommandService)); }, token: PayloadCommandService, providedIn: "root" });
    return PayloadCommandService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/api-end-points.enum.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var APIEndPoints = {
    LOGIN: "login",
    LOGOUT: "logout",
    USER_DATA: "user/data",
    STUDY_TAGS: "study/tags",
    STUDY_TAGS_LIST: "study/tagsList",
    BASE_TERMS: "prelogin/terms",
    APP_DATA: "prelogin/appdata",
    SERVER_STATUS: "prelogin/serverstatus",
    USER_PREFERENCE: "user/preference",
    STUDY_DETAILS: "study/details",
    STUDY_SETTINGS: "study/settings",
    COHORT_DETAILS: "cohorts/details",
    STUDY_SUMMARY: "study/summary",
    FILTER_COUNTRY_DATA: "filter/countrydata",
    UPDATE_COUNTRY_NOTES: "study/country/notes",
    GETALLCURVES: "study/all-curves",
    GETALLMILESTONES: "getAllMileStones",
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/base-terms.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var BaseTermsService = /** @class */ (function () {
    /**
     * Creates an instance of base terms service.
     * @param baseConnectionService
     * @param payloadCommandService
     */
    function BaseTermsService(baseConnectionService, payloadCommandService) {
        this.baseConnectionService = baseConnectionService;
        this.payloadCommandService = payloadCommandService;
        this.appResources = null;
        this.appPropertyList = {};
        /**
         * Common terms of base terms service
         */
        this._commonTerms = null;
    }
    /**
     * Load Term Service
     *
     * The first api call will load the GetTerms data of terms category.
     * Based on parameter the second api call will load the Getterms data of login or error category.
     * e.g.
     *
       ProductName available in  terms api call
        {
          "name": "ProductName",
          "value": "IQVIA StudyOptimizer"
        }
     *  login api call
     *  {
          "name": "LoginWelcome",
          "value": "<font color='#333333'>Welcome to !ProductName!<\/font>"
        }
     * Since productname is available in terms api hence first call the terms api and set the information in
     * _commonTerms variable and then call the login api.
     *
     * @param params
     * @param [actionParam]
     * @returns login or error terminology information
     */
    /**
     * Load Term Service
     *
     * The first api call will load the GetTerms data of terms category.
     * Based on parameter the second api call will load the Getterms data of login or error category.
     * e.g.
     *
     * ProductName available in  terms api call
     * {
     * "name": "ProductName",
     * "value": "IQVIA StudyOptimizer"
     * }
     *  login api call
     *  {
     * "name": "LoginWelcome",
     * "value": "<font color='#333333'>Welcome to !ProductName!<\/font>"
     * }
     * Since productname is available in terms api hence first call the terms api and set the information in
     * _commonTerms variable and then call the login api.
     *
     * @param {?} params
     * @param {?=} actionParam
     * @return {?} login or error terminology information
     */
    BaseTermsService.prototype.loadData = /**
     * Load Term Service
     *
     * The first api call will load the GetTerms data of terms category.
     * Based on parameter the second api call will load the Getterms data of login or error category.
     * e.g.
     *
     * ProductName available in  terms api call
     * {
     * "name": "ProductName",
     * "value": "IQVIA StudyOptimizer"
     * }
     *  login api call
     *  {
     * "name": "LoginWelcome",
     * "value": "<font color='#333333'>Welcome to !ProductName!<\/font>"
     * }
     * Since productname is available in terms api hence first call the terms api and set the information in
     * _commonTerms variable and then call the login api.
     *
     * @param {?} params
     * @param {?=} actionParam
     * @return {?} login or error terminology information
     */
    function (params, actionParam) {
        if (!params) {
            throw new Error("Params can not be empty or undefined in base term servie");
        }
        if (!this.typeCheck(params)) {
            throw new Error("Invalid params object");
        }
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var termsPayload = this.payloadCommandService.getCommandDetails(params.commandName, params.category);
        /** @type {?} */
        var baseParam = {};
        baseParam = Object.assign({}, actionParam);
        baseParam.cacheKey = CacheKey.TermKey;
        return that.baseConnectionService.sendRequest(termsPayload, baseParam)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
         * @param {?} res
         * @return {?}
         */
        function (res) { return res; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["mergeMap"])((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data.terminologies.term) {
                that._commonTerms = [];
                Object.assign(that._commonTerms, data.terminologies);
                termsPayload = that.payloadCommandService.getCommandDetails(params.commandName, params.category);
                /** @type {?} */
                var param = {};
                if (!actionParam) {
                    actionParam = param;
                }
                return that.baseConnectionService.sendRequest(termsPayload, actionParam)
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    if (response.terminologies) {
                        /** @type {?} */
                        var rTerms = response.terminologies;
                        return rTerms;
                    }
                })));
            }
        })));
    };
    /**
     * @param {?} params
     * @param {?=} actionParam
     * @return {?}
     */
    BaseTermsService.prototype.load = /**
     * @param {?} params
     * @param {?=} actionParam
     * @return {?}
     */
    function (params, actionParam) {
        if (!params) {
            throw new Error("Params can not be empty or undefined in base term servie");
        }
        if (!this.typeCheck(params)) {
            throw new Error("Invalid params object");
        }
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var baseParam = {};
        if (!actionParam) {
            actionParam = baseParam;
        }
        /** @type {?} */
        var termsPayload;
        if (actionParam.endPoint) {
            termsPayload = that.payloadCommandService.getApiRequest(params.commandName, params.category);
            return that.baseConnectionService.send(termsPayload, actionParam)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response.terminologies) {
                    /** @type {?} */
                    var rTerms = response.terminologies;
                    return rTerms;
                }
            })));
        }
        else {
            termsPayload = that.payloadCommandService.getCommandDetails(params.commandName, params.category);
            return that.baseConnectionService.sendRequest(termsPayload, actionParam)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                if (response.terminologies) {
                    /** @type {?} */
                    var rTerms = response.terminologies;
                    return rTerms;
                }
            })));
        }
    };
    /**
     * Resolves value
     *
     * It returns the value from Terms.
     * e.g. Pass the 'ProductName' as input for the resolveValue method.
     * It search the information in terms and return the value like 'IQVIA StudyOptimizer'
     * _commonTerms.term - Terms data.
     *
     * @param str
     * @returns
     */
    /**
     * Resolves value
     *
     * It returns the value from Terms.
     * e.g. Pass the 'ProductName' as input for the resolveValue method.
     * It search the information in terms and return the value like 'IQVIA StudyOptimizer'
     * _commonTerms.term - Terms data.
     *
     * @param {?} str
     * @return {?}
     */
    BaseTermsService.prototype.resolveValue = /**
     * Resolves value
     *
     * It returns the value from Terms.
     * e.g. Pass the 'ProductName' as input for the resolveValue method.
     * It search the information in terms and return the value like 'IQVIA StudyOptimizer'
     * _commonTerms.term - Terms data.
     *
     * @param {?} str
     * @return {?}
     */
    function (str) {
        if (!str) {
            return;
        }
        /** @type {?} */
        var terms = this._commonTerms.term;
        str = str.toString().replace(/!(.*?)!/g, (/**
         * @param {?} match
         * @param {?} token
         * @return {?}
         */
        function (match, token) {
            /** @type {?} */
            var term = terms.find((/**
             * @param {?} x
             * @return {?}
             */
            function (x) {
                return x.name === token;
            }));
            return term ? term.value : match;
        }));
        return str;
    };
    /**
     * Gets term
     * @param termParam
     * @param [actionParam]
     * @returns term
     * get the term information.
     */
    /**
     * Gets term
     * @param {?} termParam
     * @param {?=} actionParam
     * @return {?} term
     * get the term information.
     */
    BaseTermsService.prototype.getTerm = /**
     * Gets term
     * @param {?} termParam
     * @param {?=} actionParam
     * @return {?} term
     * get the term information.
     */
    function (termParam, actionParam) {
        if (!termParam) {
            throw Error("term param can not be empty or undefined in base term servie");
        }
        if (!this.typeCheck(termParam)) {
            throw Error("Invalid params object");
        }
        /** @type {?} */
        var that = this;
        actionParam = !actionParam ? (/** @type {?} */ ({})) : actionParam;
        actionParam.storeType = StoreType.Session;
        actionParam.cacheType = CacheType.sticky;
        actionParam.encryption = EncryptionAction.encrypt;
        actionParam.cmdName = ''; // reset cmd name
        actionParam.xmlRequest = '';
        actionParam.cacheKey = CacheKey.TermKey;
        if (actionParam.endPoint) {
            actionParam.url = APIEndPoints.BASE_TERMS;
        }
        /** @type {?} */
        var termsPayload;
        if (actionParam.endPoint) {
            termsPayload = this.payloadCommandService.getApiRequest(termParam.commandName, termParam.category);
            return that.baseConnectionService.send(termsPayload, actionParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                /** @type {?} */
                var result = null;
                if (data.terminologies && data.terminologies.term) {
                    that._commonTerms = [];
                    Object.assign(that._commonTerms, data.terminologies);
                    result = data.terminologies;
                }
                return result;
            })));
        }
        else {
            termsPayload = this.payloadCommandService.getCommandDetails(termParam.commandName, termParam.category);
            return that.baseConnectionService.sendRequest(termsPayload, actionParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                /** @type {?} */
                var result = null;
                if (data.terminologies && data.terminologies.term) {
                    that._commonTerms = [];
                    Object.assign(that._commonTerms, data.terminologies);
                    result = data.terminologies;
                }
                return result;
            })));
        }
    };
    /**
     * Sets property base list
     * Creating appPropertyList map for application properties to avoid loop
     */
    /**
     * Sets property base list
     * Creating appPropertyList map for application properties to avoid loop
     * @return {?}
     */
    BaseTermsService.prototype.setPropertyBaseList = /**
     * Sets property base list
     * Creating appPropertyList map for application properties to avoid loop
     * @return {?}
     */
    function () {
        if (!this.appResources) {
            return;
        }
        /** @type {?} */
        var iLen = this.appResources.term.length;
        for (var i = 0; i < iLen; i++) {
            this.appPropertyList[this.appResources.term[i].name] = this.appResources.term[i].value;
        }
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    BaseTermsService.prototype.typeCheck = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return (obj.category !== undefined && obj.commandName !== undefined);
    };
    BaseTermsService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    BaseTermsService.ctorParameters = function () { return [
        { type: BaseConnectionService },
        { type: PayloadCommandService }
    ]; };
    /** @nocollapse */ BaseTermsService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function BaseTermsService_Factory() { return new BaseTermsService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BaseConnectionService), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(PayloadCommandService)); }, token: BaseTermsService, providedIn: "root" });
    return BaseTermsService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/locale-app-resources.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LocaleAppResourcesService = /** @class */ (function () {
    /**
     * Creates an instance of locale app resources service.
     * @param baseTermsService
     */
    function LocaleAppResourcesService(baseTermsService) {
        this.baseTermsService = baseTermsService;
        this.appResources = null;
        this.appPropertyList = {};
    }
    /**
     * Gets app resources
     *
     * Get the application resource information
     *
     * @param [cacheType]
     * @returns
     */
    /**
     * Gets app resources
     *
     * Get the application resource information
     *
     * @param {?} params
     * @param {?=} actionParam
     * @return {?}
     */
    LocaleAppResourcesService.prototype.getAppResources = /**
     * Gets app resources
     *
     * Get the application resource information
     *
     * @param {?} params
     * @param {?=} actionParam
     * @return {?}
     */
    function (params, actionParam) {
        actionParam = !actionParam ? (/** @type {?} */ ({})) : actionParam;
        actionParam.cacheKey = CacheKey.TermApplicationKey;
        actionParam.storeType = StoreType.Session;
        actionParam.cacheType = CacheType.sticky;
        actionParam.encryption = EncryptionAction.encrypt;
        actionParam.cmdName = ''; // reset cmd name
        actionParam.xmlRequest = '';
        if (actionParam.endPoint) {
            actionParam.url = APIEndPoints.BASE_TERMS;
        }
        /** @type {?} */
        var that = this;
        if (that.appResources === null) {
            return this.baseTermsService.load(params, actionParam)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                that.appResources = response;
                that.setPropertyBaseList();
                return response;
            })));
        }
        else {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])(that.appResources);
        }
    };
    /**
     * Sets property base list
     * Creating appPropertyList map for application properties to avoid loop
     */
    /**
     * Sets property base list
     * Creating appPropertyList map for application properties to avoid loop
     * @return {?}
     */
    LocaleAppResourcesService.prototype.setPropertyBaseList = /**
     * Sets property base list
     * Creating appPropertyList map for application properties to avoid loop
     * @return {?}
     */
    function () {
        if (!this.appResources) {
            return;
        }
        /** @type {?} */
        var iLen = this.appResources.term.length;
        for (var i = 0; i < iLen; i++) {
            this.appPropertyList[this.appResources.term[i].name] = this.appResources.term[i].value;
        }
    };
    /**
     * Gets resource
     * To get application property value by passing name
     *
     * @param name
     * @returns
     */
    /**
     * Gets resource
     * To get application property value by passing name
     *
     * @param {?} name
     * @return {?}
     */
    LocaleAppResourcesService.prototype.getResource = /**
     * Gets resource
     * To get application property value by passing name
     *
     * @param {?} name
     * @return {?}
     */
    function (name) {
        /** @type {?} */
        var resourcesValue = '';
        if (this.appPropertyList) {
            resourcesValue = this.baseTermsService.resolveValue(this.appPropertyList[name]);
        }
        return resourcesValue;
    };
    /**
     * Gets res
     * @param arrRes
     * @returns res
     */
    /**
     * Gets res
     * @param {?} arrRes
     * @return {?} res
     */
    LocaleAppResourcesService.prototype.getRes = /**
     * Gets res
     * @param {?} arrRes
     * @return {?} res
     */
    function (arrRes) {
        /** @type {?} */
        var obj = {};
        if (this.appResources) {
            for (var i = 0, total = this.appResources.term.length; i < total; i++) {
                for (var j = 0; j < arrRes.length; j++) {
                    if (this.appResources.term[i].name === arrRes[j]) {
                        obj['' + this.appResources.term[i].name + ''] = this.baseTermsService.resolveValue(this.appResources.term[i].value);
                    }
                }
            }
        }
        return obj;
    };
    LocaleAppResourcesService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LocaleAppResourcesService.ctorParameters = function () { return [
        { type: BaseTermsService }
    ]; };
    /** @nocollapse */ LocaleAppResourcesService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function LocaleAppResourcesService_Factory() { return new LocaleAppResourcesService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BaseTermsService)); }, token: LocaleAppResourcesService, providedIn: "root" });
    return LocaleAppResourcesService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/index.enum.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {number} */
var Index = {
    FIRST: 0,
    SECOND: 1,
    THIRD: 2,
    FOURTH: 3,
};
Index[Index.FIRST] = 'FIRST';
Index[Index.SECOND] = 'SECOND';
Index[Index.THIRD] = 'THIRD';
Index[Index.FOURTH] = 'FOURTH';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/pce.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PCEService = /** @class */ (function () {
    function PCEService(datePipe, localAppResource) {
        this.datePipe = datePipe;
        this.localAppResource = localAppResource;
        this.exportObj = {};
    }
    // copy
    // copy
    /**
     * @param {?} dataArray
     * @return {?}
     */
    PCEService.prototype.setDataForCopy = 
    // copy
    /**
     * @param {?} dataArray
     * @return {?}
     */
    function (dataArray) {
        /** @type {?} */
        var headerData = this.jsonfyPlanCardHeaderData(this.header);
        /** @type {?} */
        var copyString = this.convertArrayToString(headerData, true);
        copyString += this.convertArrayToString(dataArray);
        copyString += this.appendFooter(copyString);
        this.setTextToCopy(copyString);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PCEService.prototype.jsonfyPlanCardHeaderData = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var result = [];
        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                result.push({
                    A: key,
                    B: data[key]
                });
            }
        }
        return result;
    };
    /**
     * @param {?=} header
     * @return {?}
     */
    PCEService.prototype.planCardHeaderData = /**
     * @param {?=} header
     * @return {?}
     */
    function (header) {
        if (header) {
            this.header = header;
        }
    };
    /**
     * @param {?} data
     * @param {?=} hideTopRow
     * @return {?}
     */
    PCEService.prototype.convertArrayToString = /**
     * @param {?} data
     * @param {?=} hideTopRow
     * @return {?}
     */
    function (data, hideTopRow) {
        if (hideTopRow === void 0) { hideTopRow = false; }
        /** @type {?} */
        var copystring = '';
        if (!hideTopRow) {
            copystring += this.setRowHeader(data[0]);
        }
        for (var j = 0; j < data.length; j++) {
            for (var key in data[j]) {
                if (data[j].hasOwnProperty(key)) {
                    copystring += '"' + data[j][key] + '"\t';
                }
            }
            copystring += '\r\n';
        }
        copystring += '\r\n';
        return copystring;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PCEService.prototype.setRowHeader = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var str = '';
        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                str += '"' + key + '"\t';
            }
        }
        str += '\n';
        return str;
    };
    /**
     * @param {?} copystring
     * @return {?}
     */
    PCEService.prototype.appendFooter = /**
     * @param {?} copystring
     * @return {?}
     */
    function (copystring) {
        return '\r\n' + this.getFooter();
    };
    /**
     * @return {?}
     */
    PCEService.prototype.getFooter = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var FOOTER = this.localAppResource.getResource('FooterForReports');
        return FOOTER;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PCEService.prototype.setTextToCopy = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var success = false;
        /** @type {?} */
        var tmpElem = document.createElement('textarea');
        tmpElem.style.position = 'fixed';
        tmpElem.style.top = '0px';
        tmpElem.style.left = '-99999px';
        tmpElem.setAttribute('readonly', '');
        tmpElem.value = data;
        document.body.appendChild(tmpElem);
        tmpElem.select();
        tmpElem.focus();
        tmpElem.setSelectionRange(0, tmpElem.value.length);
        /** @type {?} */
        var succeeded;
        try {
            succeeded = window.document.execCommand('copy');
            success = true;
            console.warn('copy success status:', succeeded);
            if (!succeeded) {
                throw succeeded;
            }
        }
        catch (err) {
            success = false;
        }
        document.body.removeChild(tmpElem);
        tmpElem = null;
        return success;
    };
    // export
    // export
    /**
     * @param {?=} components
     * @return {?}
     */
    PCEService.prototype.exportData = 
    // export
    /**
     * @param {?=} components
     * @return {?}
     */
    function (components) {
        if (components.length > 0) {
            Promise.all([
                components[Index.FIRST].workbookOptions(),
                components[Index.SECOND].workbookOptions(),
                components[Index.THIRD].workbookOptions()
            ]).then((/**
             * @param {?} workbooks
             * @return {?}
             */
            function (workbooks) {
                workbooks[Index.FIRST].sheets[Index.FIRST].rows = workbooks[Index.FIRST].sheets[Index.FIRST].rows.concat([{}], workbooks[Index.SECOND].sheets[Index.FIRST].rows, workbooks[Index.THIRD].sheets[Index.FIRST].rows);
                components[Index.FIRST].save(workbooks[Index.FIRST]);
            }));
        }
    };
    /**
     * @param {?=} data
     * @param {?=} fileName
     * @return {?}
     */
    PCEService.prototype.exportExcelData = /**
     * @param {?=} data
     * @param {?=} fileName
     * @return {?}
     */
    function (data, fileName) {
        /** @type {?} */
        var header = this.header;
        /** @type {?} */
        var tempHeader = this.jsonfyPlanCardHeaderData(header);
        /** @type {?} */
        var tempFooterArray = [];
        /** @type {?} */
        var footerData = this.getFooter();
        tempFooterArray.push({ ' ': footerData });
        /** @type {?} */
        var worksheet = xlsx__WEBPACK_IMPORTED_MODULE_20__["utils"].json_to_sheet(tempHeader, {
            skipHeader: true
        });
        /** @type {?} */
        var wb = xlsx__WEBPACK_IMPORTED_MODULE_20__["utils"].book_new();
        /** @type {?} */
        var headerCount = Object.keys(header).length + 2;
        xlsx__WEBPACK_IMPORTED_MODULE_20__["utils"].sheet_add_json(worksheet, data, { origin: 'A' + headerCount });
        xlsx__WEBPACK_IMPORTED_MODULE_20__["utils"].sheet_add_json(worksheet, tempFooterArray, {
            skipHeader: true,
            origin: -1
        });
        xlsx__WEBPACK_IMPORTED_MODULE_20__["utils"].book_append_sheet(wb, worksheet, 'Sheet1');
        Object(xlsx__WEBPACK_IMPORTED_MODULE_20__["writeFile"])(wb, fileName);
    };
    // print
    // print
    /**
     * @param {?} dataArray
     * @return {?}
     */
    PCEService.prototype.setDataForPrint = 
    // print
    /**
     * @param {?} dataArray
     * @return {?}
     */
    function (dataArray) {
        /** @type {?} */
        var dataHtml = this.createDataTableForPrint(dataArray);
        /** @type {?} */
        var fntz = '10px';
        /** @type {?} */
        var htmlstr = this.getPlanCardHeaderForPrint(fntz) +
            dataHtml +
            this.getPlanCardFooterForPrint(fntz);
        this.doPrintFrame(htmlstr);
    };
    /**
     * @param {?} command
     * @param {?} eleW
     * @param {?} name
     * @return {?}
     */
    PCEService.prototype.execPCECommand = /**
     * @param {?} command
     * @param {?} eleW
     * @param {?} name
     * @return {?}
     */
    function (command, eleW, name) {
        switch (command.action) {
            case 'ExportGraph':
                return this.exportGraph(command, eleW, name);
            case 'PrintGraph':
                return this.printGraph(command);
            case 'CopyGraph':
                return this.copyGraph(command, name);
            case 'copyCohortData':
                return this.copyCohort(command);
        }
        return rxjs__WEBPACK_IMPORTED_MODULE_19__["EMPTY"];
    };
    /**
     * @param {?} cmd
     * @param {?} name
     * @return {?}
     */
    PCEService.prototype.copyGraph = /**
     * @param {?} cmd
     * @param {?} name
     * @return {?}
     */
    function (cmd, name) {
        var _this = this;
        return new rxjs__WEBPACK_IMPORTED_MODULE_19__["Observable"]((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            if (name === 'copy') {
                /** @type {?} */
                var headerData = _this.jsonfyPlanCardHeaderData(cmd.header);
                /** @type {?} */
                var copyString = _this.convertArrayToString(headerData, true);
                copyString += 'Milestones\t\r\n\r\n';
                headerData = _this.jsonfyPlanCardHeaderData(cmd.metaData.milestone);
                copyString += _this.convertArrayToString(headerData, true);
                copyString += 'Chart Data:\t\r\n\r\n';
                copyString += _this.convertArrayToString(cmd.metaData.curve);
                copyString += _this.appendFooter(copyString);
                _this.setTextToCopy(copyString);
                cmd.copyString = copyString;
                observer.next(cmd);
            }
        }));
    };
    /**
     * @param {?} cmd
     * @return {?}
     */
    PCEService.prototype.copyCohort = /**
     * @param {?} cmd
     * @return {?}
     */
    function (cmd) {
        var _this = this;
        return new rxjs__WEBPACK_IMPORTED_MODULE_19__["Observable"]((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var headerData = _this.jsonfyPlanCardHeaderData(cmd.header);
            /** @type {?} */
            var copyString = _this.convertArrayToString(headerData, true);
            if (cmd.metaData.cohortData.length > 0) {
                copyString += 'Cohort\t\r\n\r\n';
                copyString += _this.convertArrayToString(cmd.metaData.cohortData);
            }
            if (cmd.metaData.dependencyData.length > 0) {
                copyString += 'Dependency\t\r\n\r\n';
                copyString += _this.convertArrayToString(cmd.metaData.dependencyData);
            }
            copyString += _this.appendFooter(copyString);
            _this.setTextToCopy(copyString);
            observer.next(cmd);
        }));
    };
    /**
     * @param {?} cmd
     * @return {?}
     */
    PCEService.prototype.printGraph = /**
     * @param {?} cmd
     * @return {?}
     */
    function (cmd) {
        var _this = this;
        return new rxjs__WEBPACK_IMPORTED_MODULE_19__["Observable"]((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            html2canvas(cmd.domElement).then((/**
             * @param {?} canvas
             * @return {?}
             */
            function (canvas) {
                /** @type {?} */
                var dataHtml = '<img src="' + canvas.toDataURL() + '">';
                /** @type {?} */
                var headerStr = _this.getHeaderAsHtmlStr(cmd.header);
                /** @type {?} */
                var fntz = '10px';
                /** @type {?} */
                var htmlstr = headerStr + dataHtml + _this.getPlanCardFooterForPrint(fntz);
                _this.doPrintFrame(htmlstr);
                observer.next(cmd);
            }));
        }));
    };
    /**
     * @param {?} cmd
     * @param {?} eleW
     * @param {?} name
     * @return {?}
     */
    PCEService.prototype.exportGraph = /**
     * @param {?} cmd
     * @param {?} eleW
     * @param {?} name
     * @return {?}
     */
    function (cmd, eleW, name) {
        var _this = this;
        return new rxjs__WEBPACK_IMPORTED_MODULE_19__["Observable"]((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            html2canvas(cmd.domElement).then((/**
             * @param {?} canvas
             * @return {?}
             */
            function (canvas) {
                /** @type {?} */
                var fntz = '10px';
                /** @type {?} */
                var imgsrc = _this.getHeaderAsHtmlStr(cmd.header);
                /** @type {?} */
                var windowContent = '<div >';
                windowContent += imgsrc;
                windowContent += '<div><img src="' + canvas.toDataURL() + '"></div>';
                windowContent += _this.getPlanCardFooterForPrint(fntz);
                windowContent += '</div>';
                /** @type {?} */
                var tmpDiv = document.createElement('div');
                tmpDiv.setAttribute('id', 'dummyexportDiv');
                tmpDiv.innerHTML = windowContent;
                // style the div so that html2canvas can find it...
                console.log('html2canvas', windowContent);
                tmpDiv.style.position = 'absolute';
                tmpDiv.style.left = '0px';
                tmpDiv.style.top = '0px';
                tmpDiv.style.zIndex = '-1';
                tmpDiv.style.backgroundColor = 'white';
                tmpDiv.style.padding = '45px';
                document.body.appendChild(tmpDiv);
                html2canvas(tmpDiv).then((/**
                 * @param {?} cnvs
                 * @return {?}
                 */
                function (cnvs) {
                    console.log(canvas.toDataURL());
                    _this.downloadCanvas(cnvs, 'png', name, _this.save);
                    observer.next(cmd);
                }));
            }));
        }));
    };
    /**
     * @param {?} canvas
     * @param {?} format
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    PCEService.prototype.downloadCanvas = /**
     * @param {?} canvas
     * @param {?} format
     * @param {?} name
     * @param {?} callback
     * @return {?}
     */
    function (canvas, format, name, callback) {
        canvas.toBlob((/**
         * @param {?} blob
         * @return {?}
         */
        function (blob) {
            /** @type {?} */
            var filesize = Math.round(blob[length] / 1024) + ' KB';
            if (callback) {
                callback(blob, filesize, name);
            }
        }));
    };
    /**
     * @param {?} dataBlob
     * @param {?} filesize
     * @param {?} name
     * @return {?}
     */
    PCEService.prototype.save = /**
     * @param {?} dataBlob
     * @param {?} filesize
     * @param {?} name
     * @return {?}
     */
    function (dataBlob, filesize, name) {
        Object(file_saver__WEBPACK_IMPORTED_MODULE_23__["saveAs"])(dataBlob, name + '.png'); // FileSaver.js function
        // FileSaver.js function
        /** @type {?} */
        var ref = document.getElementById('dummyexportDiv');
        ref.parentNode.removeChild(ref);
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PCEService.prototype.createDataTableForPrint = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var tempstring = '<div style="margin-top:20px;"><table>';
        tempstring += this.createHeaderForPrint(data[0]);
        tempstring += '<tbody>';
        for (var j = 0; j < data.length; j++) {
            tempstring += '<tr>';
            for (var key in data[j]) {
                if (data[j].hasOwnProperty(key)) {
                    tempstring += '<td>' + data[j][key] + '</td>';
                }
            }
            tempstring += '</tr>';
        }
        tempstring += '</tbody></table></div>';
        return tempstring;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PCEService.prototype.createHeaderForPrint = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var str = '<thead><tr>';
        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                str += '<th>' + key + '</th>';
            }
        }
        str += '</tr></thead>';
        return str;
    };
    /**
     * @param {?} data
     * @return {?}
     */
    PCEService.prototype.getHeaderAsHtmlStr = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var str = '<div class="header" style="font: 11pt sans-serif;color:"#000" font-size:${fntz}">' +
            '<table>';
        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                str +=
                    '<tr>' +
                        '  <td> ' +
                        key +
                        '</td>' +
                        '<td>' +
                        data[key] +
                        '</td>' +
                        '</tr>';
            }
        }
        str += '</table></div>';
        return str;
    };
    /**
     * @param {?} fntz
     * @return {?}
     */
    PCEService.prototype.getPlanCardHeaderForPrint = /**
     * @param {?} fntz
     * @return {?}
     */
    function (fntz) {
        /** @type {?} */
        var headerData = this.header;
        console.log(headerData);
        /** @type {?} */
        var headerStr = '';
        for (var key in headerData) {
            if (headerData.hasOwnProperty(key)) {
                headerStr +=
                    '<tr>' + ("<td>" + key + "</td>") + (" <td>" + headerData[key] + "</td>") + '</tr>';
            }
        }
        return ('<div class="header" style="font: 11pt sans-serif; font-size:${fntz}">' +
            '<table>' +
            headerStr +
            '</table>' +
            '</div>');
    };
    /**
     * @param {?} fntz
     * @return {?}
     */
    PCEService.prototype.getPlanCardFooterForPrint = /**
     * @param {?} fntz
     * @return {?}
     */
    function (fntz) {
        /** @type {?} */
        var footerData = this.getFooter();
        footerData = footerData.replace('<Organization Name>', '&lt;Organization Name&gt;');
        return "<div style=\"text-align:center; font-size: 14px\"><p><strong> " + footerData + " </strong></p></div>";
    };
    // doPrintFrame(htmlstr) {
    //    htmlstr = htmlstr + this.appendStyleForTable();
    //   const frame1 = document.createElement('iframe');
    //   frame1.name = 'frame1';
    //   frame1.style.position = 'absolute';
    //   frame1.style.top = '-1000000px';
    //   document.body.appendChild(frame1);
    //   const frameDoc = frame1.contentWindow ? frame1.contentWindow :
    //     frame1.contentDocument['document'] ? frame1.contentDocument['document'] : frame1.contentDocument;
    //   frameDoc.document.open();
    //   frameDoc.document.write(htmlstr);
    //   frameDoc.document.close();
    //   if (frameDoc.queryCommandSupported && frameDoc.queryCommandSupported('print')) {
    //     frameDoc.execCommand('print', false, null);
    //   } else {
    //     // window.frames['frame1'].focus();
    //     // window.frames['frame1'].print();
    //     frame1.contentWindow.document.write(htmlstr);
    //     frame1.contentWindow.print();
    //   }
    // }
    // doPrintFrame(htmlstr) {
    //    htmlstr = htmlstr + this.appendStyleForTable();
    //   const frame1 = document.createElement('iframe');
    //   frame1.name = 'frame1';
    //   frame1.style.position = 'absolute';
    //   frame1.style.top = '-1000000px';
    //   document.body.appendChild(frame1);
    //   const frameDoc = frame1.contentWindow ? frame1.contentWindow :
    //     frame1.contentDocument['document'] ? frame1.contentDocument['document'] : frame1.contentDocument;
    //   frameDoc.document.open();
    //   frameDoc.document.write(htmlstr);
    //   frameDoc.document.close();
    //   if (frameDoc.queryCommandSupported && frameDoc.queryCommandSupported('print')) {
    //     frameDoc.execCommand('print', false, null);
    //   } else {
    //     // window.frames['frame1'].focus();
    //     // window.frames['frame1'].print();
    //     frame1.contentWindow.document.write(htmlstr);
    //     frame1.contentWindow.print();
    //   }
    // }
    /**
     * @param {?} htmlstr
     * @return {?}
     */
    PCEService.prototype.doPrintFrame = 
    // doPrintFrame(htmlstr) {
    //    htmlstr = htmlstr + this.appendStyleForTable();
    //   const frame1 = document.createElement('iframe');
    //   frame1.name = 'frame1';
    //   frame1.style.position = 'absolute';
    //   frame1.style.top = '-1000000px';
    //   document.body.appendChild(frame1);
    //   const frameDoc = frame1.contentWindow ? frame1.contentWindow :
    //     frame1.contentDocument['document'] ? frame1.contentDocument['document'] : frame1.contentDocument;
    //   frameDoc.document.open();
    //   frameDoc.document.write(htmlstr);
    //   frameDoc.document.close();
    //   if (frameDoc.queryCommandSupported && frameDoc.queryCommandSupported('print')) {
    //     frameDoc.execCommand('print', false, null);
    //   } else {
    //     // window.frames['frame1'].focus();
    //     // window.frames['frame1'].print();
    //     frame1.contentWindow.document.write(htmlstr);
    //     frame1.contentWindow.print();
    //   }
    // }
    /**
     * @param {?} htmlstr
     * @return {?}
     */
    function (htmlstr) {
        /** @type {?} */
        var ua = window.navigator.userAgent;
        /** @type {?} */
        var msie = ua.indexOf('MSIE');
        if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
            htmlstr = htmlstr + this.appendStyleForTable(true);
        }
        else {
            htmlstr = htmlstr + this.appendStyleForTable(false);
        }
        htmlstr = htmlstr + this.appendStyleForTable();
        /** @type {?} */
        var frame1 = document.createElement('iframe');
        frame1.name = 'frame1';
        frame1.style.position = 'absolute';
        frame1.style.top = '-1000000px';
        document.body.appendChild(frame1);
        /** @type {?} */
        var frameDoc = frame1.contentWindow
            ? frame1.contentWindow
            : frame1.contentDocument['document']
                ? frame1.contentDocument['document']
                : frame1.contentDocument;
        frameDoc.document.open();
        frameDoc.document.write(htmlstr);
        frameDoc.document.close();
        window.setTimeout((/**
         * @return {?}
         */
        function () {
            if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
                /** @type {?} */
                var result = frame1.contentWindow.document.execCommand('print', false, null);
                if (!result) {
                    window.frames['frame1'].contentWindow.print();
                }
            }
            else {
                frame1.contentWindow.print();
            }
        }), 1000);
    };
    /**
     * @param {?=} type
     * @return {?}
     */
    PCEService.prototype.appendStyleForTable = /**
     * @param {?=} type
     * @return {?}
     */
    function (type) {
        // tslint:disable-next-line:max-line-length
        // return '<style> @media all { table,th,td{ border: 1px solid black; border-collapse: collapse  }  table{ page-break-after: auto; width:100%; margin-top:10px;font-size:0.3vw;counter-reset: page 1;}tr {page-break-inside: avoid;page-break-after: always}td:not(:first-child){padding:1px; white-space: nowrap; }table { page-break-inside: auto}tr { page-break-inside: auto;page-break-after: auto}thead {display: table-header-group}tfoot {display: table-footer-group}@media all and (-webkit-min-device-pixel-ratio:0) {<style> table,th,td{ border: 1px solid black; border-collapse: collapse  }  table{ page-break-after: auto; width:100%; margin-top:10px;font-size:0.8vw;} tr{page-break-inside: avoid;page-break-after: auto} td:not(:first-child){padding:1px; white-space: nowrap; } table{ page-break-inside: auto} tr{ page-break-inside: auto;page-break-after: auto} thead{display: table-header-group} tfoot{display: table-footer-group </style>';
        if (type) {
            // tslint:disable-next-line:max-line-length
            return '<style> @page {margin:1.5cm 0.4cm;} @media all { table,th,td{ border: 1px solid black; border-collapse: collapse  } .header td{width:50%;}table{ page-break-after: auto; width:100%; margin-top:10px;font-size:0.386vw;counter-reset: page 1;}tr {page-break-inside: avoid;page-break-after: always}td {padding:1px; white-space:wrap; max-width:10px; width:10px;word-wrap:break-word; }td:first-child{max-width:30px; width:30px;} th{ width:10px; word-wrap: break-word;} table { page-break-inside: auto}tr { page-break-inside: auto;page-break-after: auto}thead {display: table-header-group}tfoot {display: table-footer-group} } </style>';
        }
        else {
            // tslint:disable-next-line:max-line-length
            return '<style>@media all and (-webkit-min-device-pixel-ratio:0) { table,th,td{ border: 1px solid black; border-collapse: collapse  } .header td{width:50%;} table{ page-break-after: auto; width:100%; margin-top:10px;font-size:0.8vw;} tr{page-break-inside: avoid;page-break-after: auto} td:not(:first-child){padding:1px; white-space: nowrap; } table{ page-break-inside: auto} tr{ page-break-inside: auto;page-break-after: auto} thead{display: table-header-group} tfoot{display: table-footer-group} </style>';
        }
    };
    PCEService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PCEService.ctorParameters = function () { return [
        { type: _angular_common__WEBPACK_IMPORTED_MODULE_1__["DatePipe"] },
        { type: LocaleAppResourcesService }
    ]; };
    /** @nocollapse */ PCEService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function PCEService_Factory() { return new PCEService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_common__WEBPACK_IMPORTED_MODULE_1__["DatePipe"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(LocaleAppResourcesService)); }, token: PCEService, providedIn: "root" });
    return PCEService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/export/export.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExportComponent = /** @class */ (function () {
    function ExportComponent(pceService) {
        this.pceService = pceService;
        this.headerCells = {
            background: '#ffffff',
            color: '#ffffff'
        };
        this.cellAlignment = {
            textAlign: 'left'
        };
        this.count = 0;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ExportComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.count = this.count + 1;
        if (this.startExport && this.count > 1) {
            if (changes.exportToExcelObj.currentValue.data) {
                this.excelexportdata.data = changes.exportToExcelObj.currentValue.data;
            }
            this.pceService.exportData([this.excelexportheader, this.excelexportdata, this.excelexportfooter]);
        }
    };
    /**
     * @return {?}
     */
    ExportComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.startExport) {
            this.pceService.exportData([this.excelexportheader, this.excelexportdata, this.excelexportfooter]);
        }
    };
    ExportComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    // tslint:disable-next-line:component-selector
                    selector: 'ctos-export',
                    template: ""
                }] }
    ];
    /** @nocollapse */
    ExportComponent.ctorParameters = function () { return [
        { type: PCEService }
    ]; };
    ExportComponent.propDecorators = {
        startExport: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        exportToExcelObj: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        excelexportdata: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['excelexportdata', { static: true },] }],
        excelexportheader: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['excelexportheader', { static: true },] }],
        excelexportfooter: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['excelexportfooter', { static: true },] }]
    };
    return ExportComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/info/info.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var InfoComponent = /** @class */ (function () {
    function InfoComponent(route) {
        this.route = route;
    }
    /**
     * @return {?}
     */
    InfoComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.message = this.route.snapshot.data['info-message'];
    };
    /**
     * @return {?}
     */
    InfoComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.message = null;
    };
    InfoComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'ctos-info',
                    template: "<h5>{{message}}</h5>",
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
                }] }
    ];
    /** @nocollapse */
    InfoComponent.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_8__["ActivatedRoute"] }
    ]; };
    return InfoComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/appWindow.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AppWindow = /** @class */ (function () {
    function AppWindow() {
    }
    /**
     * @return {?}
     */
    AppWindow.getWindow = /**
     * @return {?}
     */
    function () {
        return window;
    };
    return AppWindow;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/help-constants.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
    HELP_MAP maps the helpId to its corresponding view path in online-help.
    You need to connect with tech pubs team for getting the helpId and its path.
 */
/** @type {?} */
var HELP_MAP = {
    8007: 'New_Plans_Tab/Components_of_the_New_Plans_Tab.htm',
    8008: 'New_Plans_Tab/About_the_Plan_Properties_View.htm',
    8009: 'New_Plans_Tab/About_the_Plan_Design_View.htm',
    8010: 'New_Plans_Tab/About_the_Countries_View.htm',
    8011: 'New_Plans_Tab/About_the_Rate_Adjustments_View.htm',
    8012: 'New_Plans_Tab/About_the_Reports_View.htm',
    8014: 'New_Plans_Tab/Defining_Percent_Site_Initiation_Schedule.htm',
    8015: 'New_Plans_Tab/Defining_Custom_Site_Initiation_Schedule.htm'
};
/*
    HELP_ID_CONSTANTS maps the helpId constant to its corresponding helpId
 */
/** @type {?} */
var HELP_ID_CONSTANTS = {
    NEW_PLANS_TAB_VIEW: 8007,
    PLAN_PROPERTIES_VIEW: 8008,
    PLAN_DESIGN_VIEW: 8009,
    COUNTRIES_VIEW: 8010,
    RATE_ADJUSTMENTS_VIEW: 8011,
    REPORTS_VIEW: 8012,
    PERCENT_SI_VIEW: 8014,
    CUSTOM_SI_VIEW: 8015,
    STUDY_ENROLLMENT_OVERVIEW_VIEW: 8016,
    STUDY_MILESTONES_VIEW: 8017,
    STUDY_REPORTS_VIEW: 8018,
    SITE_ENROLLMENT_DETAILS: 7000,
    SITE_SCORECARD: 7002,
    SITE_DATA_MANAGMENT: 7003,
    // TODO : Country team will change the later after discussing with Tejas
    COUNTRY_PERFORMANCE_VIEW: 6000,
    COHORT_PERFORMANCE_VIEW: 6000,
    COHORT_PERFORMANCE_CHART: 6000
};
/** @type {?} */
var DEFAULT_HELP_ID = 8007;
/** @type {?} */
var HELP_INDEX_PAGE_PATH = 'online-help/index.htm#t=';
/** @type {?} */
var HOSTED_HELP_COMMAND = 'HostedHelp';
/** @type {?} */
var HOSTED_HELP_URL = window.location.origin + "/dv/StudyOptimizer/hostedhelp";

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/help.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HelpService = /** @class */ (function () {
    function HelpService(route, payloadCommandService, baseConnectionService) {
        this.route = route;
        this.payloadCommandService = payloadCommandService;
        this.baseConnectionService = baseConnectionService;
    }
    /**
     * @return {?}
     */
    HelpService.prototype.openHelp = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var windowObj = AppWindow.getWindow();
        // let url =
        //     windowObj.location.protocol +
        //     '//' +
        //     windowObj.location.hostname +
        //     ':' +
        //     windowObj.location.port +
        //     '/';
        // if (BASE_HREF) {
        //     url += BASE_HREF + '/';
        // }
        // url += HELP_INDEX_PAGE_PATH;
        /** @type {?} */
        var activeRoute = this.route;
        if (activeRoute) {
            while (activeRoute.firstChild) {
                activeRoute = activeRoute.firstChild;
            }
            /** @type {?} */
            var activeRouteHelpId = ((/** @type {?} */ (activeRoute.snapshot)) && (/** @type {?} */ (activeRoute.snapshot.data))
                && ((/** @type {?} */ (activeRoute.snapshot.data))).helpId) ? ((/** @type {?} */ (activeRoute.snapshot.data))).helpId : DEFAULT_HELP_ID;
            // url += HELP_MAP[activeRouteHelpId];
            // windowObj.open(url, '_blank', 'width=1100,height=500');
            /** @type {?} */
            var params = {
                pagecontext: activeRouteHelpId
            };
            /** @type {?} */
            var moduleInfo = {
                moduleName: 'NEWPLANTAB'
            };
            /** @type {?} */
            var hostedHelpPayload = this.payloadCommandService.getCommandDetails(HOSTED_HELP_COMMAND, params, null, null, moduleInfo);
            this.baseConnectionService.sendRequest(hostedHelpPayload, { url: HOSTED_HELP_URL }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
             * @param {?} resp
             * @return {?}
             */
            function (resp) {
                if (resp.result === COMMON.RESULT_OK) {
                    return resp.helpUrl;
                }
                else {
                    return null;
                }
            }))).subscribe((/**
             * @param {?} helpUrl
             * @return {?}
             */
            function (helpUrl) {
                if (helpUrl) {
                    windowObj.open(helpUrl, '_blank', 'width=1100,height=500');
                }
            }));
        }
    };
    HelpService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    HelpService.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_8__["ActivatedRoute"] },
        { type: PayloadCommandService },
        { type: BaseConnectionService }
    ]; };
    /** @nocollapse */ HelpService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function HelpService_Factory() { return new HelpService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_router__WEBPACK_IMPORTED_MODULE_8__["ActivatedRoute"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(PayloadCommandService), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BaseConnectionService)); }, token: HelpService, providedIn: "root" });
    return HelpService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/user-profile.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UserProfile = /** @class */ (function () {
    function UserProfile($name, $items, $nameSeparator) {
        this.name = $name;
        this.items = $items;
        this.nameSeparator = $nameSeparator;
    }
    Object.defineProperty(UserProfile.prototype, "$name", {
        /**
         * Getter $name
         * @return string
         */
        get: /**
         * Getter $name
         * @return {?} string
         */
        function () {
            return this.name;
        },
        /**
         * Setter $name
         * @param string value
         */
        set: /**
         * Setter $name
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.name = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserProfile.prototype, "$items", {
        /**
         * Getter $items
         * @return ListItem[]
         */
        get: /**
         * Getter $items
         * @return {?} ListItem[]
         */
        function () {
            return this.items;
        },
        /**
         * Setter $items
         * @param ListItem[] value
         */
        set: /**
         * Setter $items
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.items = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserProfile.prototype, "$nameSeparator", {
        /**
         * Getter $nameSeparator
         * @return string
         */
        get: /**
         * Getter $nameSeparator
         * @return {?} string
         */
        function () {
            return this.nameSeparator;
        },
        /**
         * Setter $nameSeparator
         * @param string value
         */
        set: /**
         * Setter $nameSeparator
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.nameSeparator = value;
        },
        enumerable: true,
        configurable: true
    });
    return UserProfile;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/error-terms-store.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ErrorTermsStoreService = /** @class */ (function () {
    /**
     * Creates an instance of error terms store service.
     */
    function ErrorTermsStoreService() {
        this.errorTerminologies = null;
        this.errorCodeBase = {};
    }
    /**
     * Creates error code base
     * @param errorTerminologies
     */
    /**
     * Creates error code base
     * @param {?} errorTerminologies
     * @return {?}
     */
    ErrorTermsStoreService.prototype.createErrorCodeBase = /**
     * Creates error code base
     * @param {?} errorTerminologies
     * @return {?}
     */
    function (errorTerminologies) {
        /** @type {?} */
        var that = this;
        that.errorTerminologies = errorTerminologies;
        /** @type {?} */
        var iLen = that.errorTerminologies.term.length;
        for (var i = 0; i < iLen; i++) {
            that.errorCodeBase[that.errorTerminologies.term[i].name] = that.errorTerminologies.term[i].value;
        }
    };
    /**
     * Gets error message
     * @param name
     * @returns
     */
    /**
     * Gets error message
     * @param {?} name
     * @return {?}
     */
    ErrorTermsStoreService.prototype.getErrorMessage = /**
     * Gets error message
     * @param {?} name
     * @return {?}
     */
    function (name) {
        /** @type {?} */
        var that = this;
        if (!isNaN(name)) {
            return that.errorCodeBase['E' + name];
        }
        else {
            return that.errorCodeBase[name];
        }
    };
    /**
   * Method to extract the error messages from error store and concat all messages into one
   * @param errors
   * @returns consolidated error message
   * @memberof ErrorTermsStoreService
   */
    /**
     * Method to extract the error messages from error store and concat all messages into one
     * \@memberof ErrorTermsStoreService
     * @param {?} errors
     * @param {?=} fsiDate
     * @param {?=} fssDate
     * @return {?} consolidated error message
     */
    ErrorTermsStoreService.prototype.consolidateValidationErrors = /**
     * Method to extract the error messages from error store and concat all messages into one
     * \@memberof ErrorTermsStoreService
     * @param {?} errors
     * @param {?=} fsiDate
     * @param {?=} fssDate
     * @return {?} consolidated error message
     */
    function (errors, fsiDate, fssDate) {
        var _this = this;
        /** @type {?} */
        var errorMessage = '';
        if (errors) {
            // tslint:disable-next-line:prefer-const
            /** @type {?} */
            var errorMessages_1 = [];
            Object.keys(errors).forEach((/**
             * @param {?} errorCode
             * @return {?}
             */
            function (errorCode) {
                // tslint:disable-next-line:no-shadowed-variable
                /** @type {?} */
                var errorMessage = _this.getErrorMessage(errorCode);
                if (!errorMessage) {
                    if (errorCode === CUSTOM_ERROR_CODES.MAX.error) {
                        errorMessage =
                            _this.getErrorMessage(CUSTOM_ERROR_CODES.MAX.message) +
                                ' ' +
                                errors.max.max + '.';
                    }
                    else if (errorCode === CUSTOM_ERROR_CODES.MIN.error) {
                        errorMessage =
                            _this.getErrorMessage(CUSTOM_ERROR_CODES.MIN.message) +
                                ' ' +
                                errors.min.min + '.';
                    }
                    else if (errorCode === CUSTOM_ERROR_CODES.MAT_DATEPICKER_PARSE.error) {
                        errorMessage = _this.getErrorMessage(CUSTOM_ERROR_CODES.MAT_DATEPICKER_PARSE.message);
                    }
                    else if (errorCode === CUSTOM_ERROR_CODES.DAYS_TO_SI_AFTER_ARTB.error) {
                        errorMessage = _this.getErrorMessage(CUSTOM_ERROR_CODES.DAYS_TO_SI_AFTER_ARTB.message);
                    }
                    else if (errorCode === CUSTOM_ERROR_CODES.FSI_REQUIRED_FOR_FSS.error) {
                        errorMessage = _this.getErrorMessage(CUSTOM_ERROR_CODES.FSI_REQUIRED_FOR_FSS.message);
                    }
                    else if (errorCode === CUSTOM_ERROR_CODES.REQUIRED.error) {
                        errorMessage = _this.getErrorMessage(CUSTOM_ERROR_CODES.REQUIRED.message);
                    }
                    else if (errorCode === CUSTOM_ERROR_CODES.ARTB_LT_EQ_FSI.error) {
                        errorMessage = StringUtil.interpolate(_this.getErrorMessage(CUSTOM_ERROR_CODES.ARTB_LT_EQ_FSI.message), [AppUtil.formatDateStrict(errors.ARTB_LT_EQ_FSI.ARTB_LT_EQ_FSI)]);
                    }
                    else if (errorCode === CUSTOM_ERROR_CODES.ARTB__LT_EQ_FSS.error) {
                        errorMessage = StringUtil.interpolate(_this.getErrorMessage(CUSTOM_ERROR_CODES.ARTB__LT_EQ_FSS.message), [AppUtil.formatDateStrict(errors.ARTB__LT_EQ_FSS.ARTB__LT_EQ_FSS)]);
                    }
                    else if (errorCode === CUSTOM_ERROR_CODES.FSI_GT_TLSS.error) {
                        errorMessage = StringUtil.interpolate(_this.getErrorMessage(CUSTOM_ERROR_CODES.FSI_GT_TLSS.message), [AppUtil.formatDateStrict(errors.FSI_GT_TLSS.FSI_GT_TLSS)]);
                    }
                    else if (errorCode === CUSTOM_ERROR_CODES.FSILT_ERROR.error) {
                        errorMessage = StringUtil.interpolate(_this.getErrorMessage(CUSTOM_ERROR_CODES.FSILT_ERROR.message), [AppUtil.formatDateStrict(errors.FSILT_ERROR.FSILT_ERROR)]);
                    }
                    else if (errorCode === CUSTOM_ERROR_CODES.DEPENDENCY_ERROR.error) {
                        errorMessage = StringUtil.interpolate(_this.getErrorMessage(CUSTOM_ERROR_CODES.DEPENDENCY_ERROR.message), [AppUtil.formatDateStrict(errors.DEPENDENCY_ERROR.DEPENDENCY_ERROR)]);
                    }
                }
                errorMessages_1.push(errorMessage);
            }));
            errorMessage = errorMessages_1.join('\n');
        }
        return errorMessage;
    };
    ErrorTermsStoreService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ErrorTermsStoreService.ctorParameters = function () { return []; };
    /** @nocollapse */ ErrorTermsStoreService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function ErrorTermsStoreService_Factory() { return new ErrorTermsStoreService(); }, token: ErrorTermsStoreService, providedIn: "root" });
    return ErrorTermsStoreService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/logout.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LogoutService = /** @class */ (function () {
    function LogoutService(payloadCommandService, baseConnectionService) {
        this.payloadCommandService = payloadCommandService;
        this.baseConnectionService = baseConnectionService;
    }
    /**
     * @return {?}
     */
    LogoutService.prototype.logout = /**
     * @return {?}
     */
    function () {
        // const that = this;
        // const moduleInfo = {
        //     moduleName: 'NEWPLANTAB'
        // };
        // const logoutPayload = that.payloadCommandService.getCommandDetails(LOGOUT_PARAMS.commandName, null, null, null, moduleInfo);
        // return that.baseConnectionService.sendRequest(logoutPayload).pipe(map((resp) => {
        //     if (resp.result === COMMON.RESULT_OK) {
        //         sessionStorage.clear();
        //     }
        //     return resp;
        // }));
        /** @type {?} */
        var payload = this.payloadCommandService.getApiRequest(LOGOUT_PARAMS.commandName, null, null, null);
        /** @type {?} */
        var actionParam = {};
        actionParam.url = APIEndPoints.LOGOUT; // compulsory
        actionParam.isSSOEndPoint = true;
        actionParam.httpMethod = HttpVerbs.get;
        actionParam.prelogin = false; // passing withCredential true
        return this.baseConnectionService.send(payload, actionParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
         * @param {?} resp
         * @return {?}
         */
        function (resp) {
            if (resp.result === COMMON.RESULT_OK) {
                sessionStorage.clear();
            }
            return resp;
        })));
    };
    LogoutService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LogoutService.ctorParameters = function () { return [
        { type: PayloadCommandService },
        { type: BaseConnectionService }
    ]; };
    /** @nocollapse */ LogoutService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function LogoutService_Factory() { return new LogoutService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(PayloadCommandService), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BaseConnectionService)); }, token: LogoutService, providedIn: "root" });
    return LogoutService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/reset-password.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ResetPasswordService = /** @class */ (function () {
    function ResetPasswordService(payloadCommandService, baseConnectionService) {
        this.payloadCommandService = payloadCommandService;
        this.baseConnectionService = baseConnectionService;
    }
    /**
     * @param {?=} params
     * @param {?=} actionParam
     * @return {?}
     */
    ResetPasswordService.prototype.changeCurrUserPassword = /**
     * @param {?=} params
     * @param {?=} actionParam
     * @return {?}
     */
    function (params, actionParam) {
        /** @type {?} */
        var moduleInfo = {
            moduleName: 'NEWPLANTAB'
        };
        /** @type {?} */
        var passwordPayLoad = this.payloadCommandService.getCommandDetails('changeCurrUserPassword', params, null, null, moduleInfo);
        return this.baseConnectionService.sendRequest(passwordPayLoad).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
         * @param {?} data
         * @return {?}
         */
        function (data) { return data; })));
        // return of([]);
    };
    ResetPasswordService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ResetPasswordService.ctorParameters = function () { return [
        { type: PayloadCommandService },
        { type: BaseConnectionService }
    ]; };
    /** @nocollapse */ ResetPasswordService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function ResetPasswordService_Factory() { return new ResetPasswordService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(PayloadCommandService), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BaseConnectionService)); }, token: ResetPasswordService, providedIn: "root" });
    return ResetPasswordService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/password/password.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PasswordComponent = /** @class */ (function () {
    /**
     * Creates an instance of password component.
     * @param dialogRef
     * @param data
     * @param resetPasswordService
     * @param errorTermsStoreService
     */
    function PasswordComponent(dialogRef, data, resetPasswordService, errorTermsStoreService) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.resetPasswordService = resetPasswordService;
        this.errorTermsStoreService = errorTermsStoreService;
        // passWordPolicyList: Array<string> = ['LENGHTHRULE', 'MIXCHARRULE'];
        // nonEmptyField: string;
        // passwordMisMatchMessage: string;
        this.validationMessage = '';
        // rules: string[];
        this.showSuccessMessage = false;
        this.showError = false;
        if (!data.okLabel) {
            data.okLabel = 'Ok';
        }
        if (!data.cancelLabel) {
            data.cancelLabel = 'Cancel';
        }
    }
    /**
     * @return {?}
     */
    PasswordComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.getPasswordRulesList();
    };
    /**
     * Cancels password component
     * @param btnLabel
     */
    /**
     * Cancels password component
     * @param {?} btnLabel
     * @return {?}
     */
    PasswordComponent.prototype.cancel = /**
     * Cancels password component
     * @param {?} btnLabel
     * @return {?}
     */
    function (btnLabel) {
        this.dialogRef.close();
    };
    /**
     * password component
     * @param btnLabel
     * @param form
     */
    /**
     * password component
     * @param {?} btnLabel
     * @param {?} form
     * @return {?}
     */
    PasswordComponent.prototype.ok = /**
     * password component
     * @param {?} btnLabel
     * @param {?} form
     * @return {?}
     */
    function (btnLabel, form) {
        if (form.valid) {
            /** @type {?} */
            var passowordInfo = {
                currentPassword: form.value.currentPassword,
                newPassword: form.value.newPassword
            };
            this.changePassword(passowordInfo);
        }
    };
    /**
     * Changes password
     * @param payload
     */
    /**
     * Changes password
     * @param {?} payload
     * @return {?}
     */
    PasswordComponent.prototype.changePassword = /**
     * Changes password
     * @param {?} payload
     * @return {?}
     */
    function (payload) {
        var _this = this;
        this.resetPasswordService
            .changeCurrUserPassword(payload)
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data.result !== 'OK') {
                _this.validationMessage = _this.errorTermsStoreService.getErrorMessage(data.error.errorCode);
                // this.showBanner(
                //   'positive',
                //   'positive-snackbar',
                //   'assets/images/manageplans/icon-positive.png',
                //   'PasswordResetSuccessful'
                // );
            }
            else {
                _this.dialogRef.close({ data: data });
            }
        }));
    };
    /**
     * Hides success message
     */
    /**
     * Hides success message
     * @return {?}
     */
    PasswordComponent.prototype.hideSuccessMessage = /**
     * Hides success message
     * @return {?}
     */
    function () {
        this.showSuccessMessage = false;
        this.validationMessage = '';
    };
    /**
     * Gets password rules list
     */
    /**
     * Gets password rules list
     * @return {?}
     */
    PasswordComponent.prototype.getPasswordRulesList = /**
     * Gets password rules list
     * @return {?}
     */
    function () {
        this.data.lengthRule = this.data.lengthRule;
        /** @type {?} */
        var mixruleSplit = this.data.mixCharRule.split('\n');
        this.mixruleSplitHeader = mixruleSplit[0];
        this.mixruleSplit = mixruleSplit.splice(1, (mixruleSplit.length - 1));
    };
    PasswordComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'ctos-password',
                    template: "<h1 mat-dialog-title>{{ data?.heading }}</h1>\r\n<div mat-dialog-content class=\"row password-dialog-container\">\r\n  <div class=\"col-6 left-side\">\r\n    <form class=\"form-horizontal\" #changePasswordForm=\"ngForm\">\r\n      <div class=\"form-group row\">\r\n        <label class=\"control-label col-4 no-padding\" for=\"currentPassword\">{{\r\n          data?.currentPassword\r\n        }}</label>\r\n        <div class=\"backGround col-8\">\r\n          <input type=\"password\" class=\"form-control\" id=\"currentPassword\" [(ngModel)]=\"currentPassword\"\r\n            #currentPasswordText=\"ngModel\" name=\"currentPassword\" (click)=\"hideSuccessMessage()\" required\r\n            [matTooltipClass]=\"'warn ctos-tooltip'\" [matTooltip]=\"data?.nonEmptyField\" matTooltipPosition=\"right\"\r\n            [matTooltipDisabled]=\"\r\n              !(currentPasswordText.touched && currentPasswordText.invalid)\r\n            \" [class.is-invalid]=\"\r\n              currentPasswordText.touched && currentPasswordText.invalid\r\n            \" />\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group row\">\r\n        <label class=\"control-label col-4 no-padding\" for=\"newPassword\">{{\r\n          data?.newPassword\r\n        }}</label>\r\n        <div class=\"backGround col-8\">\r\n          <input type=\"password\" class=\"form-control\" id=\"newPassword\" [(ngModel)]=\"newPassword\"\r\n            #newPasswordText=\"ngModel\" name=\"newPassword\" (input)=\"confirmPasswordText.control.updateValueAndValidity()\"\r\n            (click)=\"hideSuccessMessage()\" required [matTooltipClass]=\"'warn ctos-tooltip'\"\r\n            [matTooltip]=\"data?.nonEmptyField\" matTooltipPosition=\"right\" [matTooltipDisabled]=\"\r\n              !(newPasswordText.touched && newPasswordText.invalid)\r\n            \" [class.is-invalid]=\"\r\n              newPasswordText.touched && newPasswordText.invalid\r\n            \" />\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group row\">\r\n        <label class=\"control-label col-4 no-padding\" for=\"confirmPassword\">{{\r\n          data?.confirmPassword\r\n        }}</label>\r\n        <div class=\"backGround col-8\">\r\n          <input type=\"password\" class=\"form-control\" id=\"confirmPassword\" [(ngModel)]=\"confirmPassword\"\r\n            #confirmPasswordText=\"ngModel\" name=\"confirmPassword\" ctosConfirmEqualValidator=\"newPassword\"\r\n            (click)=\"hideSuccessMessage()\" required [matTooltipClass]=\"'warn ctos-tooltip'\" [matTooltip]=\"\r\n              (confirmPasswordText.touched || confirmPasswordText.dirty) &&\r\n              !confirmPasswordText.value\r\n                ? data?.nonEmptyField\r\n                : confirmPasswordText.errors?.notEqual &&\r\n                  confirmPasswordText.dirty\r\n                ? data?.passwordMisMatchMessage\r\n                : ''\r\n            \" matTooltipPosition=\"right\" [matTooltipDisabled]=\"\r\n              !(confirmPasswordText.touched && confirmPasswordText.invalid)\r\n            \" [class.is-invalid]=\"\r\n              confirmPasswordText.touched && confirmPasswordText.invalid\r\n            \" />\r\n        </div>\r\n      </div>\r\n    </form>\r\n    <mat-error *ngIf=\"validationMessage\">{{ validationMessage }}</mat-error>\r\n  </div>\r\n  <div class=\"col-6\">\r\n    <div class=\"para\">\r\n      <span>The password must meet the following criteria:</span>\r\n      <ol>\r\n        <li>{{ data.lengthRule }}</li>\r\n        <li>{{ mixruleSplitHeader }}\r\n          <ul>\r\n            <li *ngFor=\"let point of this.mixruleSplit\">{{point}}</li>\r\n          </ul>\r\n        </li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <button mat-button class=\"cancel-btn\" (click)=\"cancel(data.cancelLabel)\">\r\n    {{ data?.cancelLabel }}\r\n  </button>\r\n  <button mat-button class=\"ok-btn\" [ngClass]=\"{'disabled-button': !changePasswordForm.valid}\" [disabled]=\"!changePasswordForm.valid\"\r\n    (click)=\"ok(data.okLabel, changePasswordForm)\" cdkFocusInitial>\r\n    {{ data?.okLabel }}\r\n  </button>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    PasswordComponent.ctorParameters = function () { return [
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialogRef"] },
        { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_DIALOG_DATA"],] }] },
        { type: ResetPasswordService },
        { type: ErrorTermsStoreService }
    ]; };
    return PasswordComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/dialog.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function DialogsProp() { }
if (false) {}
var DialogService = /** @class */ (function () {
    function DialogService(localeAppResourcesService, dialog) {
        this.localeAppResourcesService = localeAppResourcesService;
        this.dialog = dialog;
    }
    Object.defineProperty(DialogService.prototype, "isStatusChanged", {
        get: /**
         * @return {?}
         */
        function () {
            return (this._isStatusChanged === undefined ? false : this._isStatusChanged);
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._isStatusChanged = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DialogService.prototype, "selectedStudyKey", {
        get: /**
         * @return {?}
         */
        function () {
            return this._selectedStudyKey;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._selectedStudyKey = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DialogService.prototype, "isProceed", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isProceed;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._isProceed = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    DialogService.prototype.confirm = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var confirmation = false;
        /** @type {?} */
        var dialogRef = this.showUnsavedDataConfirmation();
        return dialogRef.afterClosed().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            /** @type {?} */
            var eventObject = res;
            if (eventObject && eventObject.action === _this.getConfirmProp().okLabel) {
                confirmation = true;
            }
            else if (eventObject && eventObject.action === _this.getConfirmProp().cancelLabel) {
                confirmation = false;
            }
            return confirmation;
        })));
    };
    /**
     * @private
     * @param {?=} data
     * @return {?}
     */
    DialogService.prototype.showUnsavedDataConfirmation = /**
     * @private
     * @param {?=} data
     * @return {?}
     */
    function (data) {
        data = data || this.getConfirmProp();
        /** @type {?} */
        var dialogRef = this.dialog.open(ConfirmationDialogComponent, {
            width: DIALOG_CONFIG.CONFIRM_UNSAVED_DATA.WIDTH,
            data: data,
            panelClass: DIALOG_CONFIG.DELETE_PLAN.PANEL_CLASS,
            id: 'warnDataLossOnNavDialog'
        });
        return dialogRef;
    };
    /**
     * @private
     * @return {?}
     */
    DialogService.prototype.getConfirmProp = /**
     * @private
     * @return {?}
     */
    function () {
        return {
            heading: this.localeAppResourcesService.getResource('unsavedTitle'),
            message: this.localeAppResourcesService.getResource('unsavedMessage'),
            okLabel: this.localeAppResourcesService.getResource(ALERT_TYPE.OkLabel),
            cancelLabel: this.localeAppResourcesService.getResource(ALERT_TYPE.CancelLabel)
        };
    };
    DialogService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    DialogService.ctorParameters = function () { return [
        { type: LocaleAppResourcesService },
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialog"] }
    ]; };
    /** @nocollapse */ DialogService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function DialogService_Factory() { return new DialogService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(LocaleAppResourcesService), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_material_dialog__WEBPACK_IMPORTED_MODULE_5__["MatDialog"])); }, token: DialogService, providedIn: "root" });
    return DialogService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/server-status.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ServerStatusService = /** @class */ (function () {
    /**
     * Creates an instance of server status service.
     * @param payloadCommandService
     * @param baseConnectionService
     */
    function ServerStatusService(payloadCommandService, baseConnectionService) {
        this.payloadCommandService = payloadCommandService;
        this.baseConnectionService = baseConnectionService;
        this.serverStatus = null;
    }
    /**
     * Gets server status
     * @param serverInfo
     * @param [cacheType]
     * @returns
     */
    /**
     * Gets server status
     * @param {?} serverInfo
     * @param {?=} actionParam
     * @return {?}
     */
    ServerStatusService.prototype.getServerStatus = /**
     * Gets server status
     * @param {?} serverInfo
     * @param {?=} actionParam
     * @return {?}
     */
    function (serverInfo, actionParam) {
        if (!serverInfo) {
            throw new Error("server Info can not be empty or undefined");
        }
        if (!this.typeCheck(serverInfo)) {
            throw new Error("Invalid server Info object");
        }
        actionParam = !actionParam ? (/** @type {?} */ ({})) : actionParam;
        actionParam.cacheType = CacheType.sticky;
        actionParam.storeType = StoreType.Session;
        actionParam.cacheKey = CacheKey.ServerKey;
        actionParam.reportError = false;
        actionParam.encryption = EncryptionAction.encrypt;
        actionParam.cmdName = ''; // reset cmd name
        actionParam.xmlRequest = '';
        /** @type {?} */
        var moduleInfo = {
            moduleName: 'NEWPLANTAB'
        };
        /** @type {?} */
        var headers = {
            'jsonRequest': 'true'
        };
        if (actionParam.endPoint) {
            actionParam.url = APIEndPoints.SERVER_STATUS;
        }
        /** @type {?} */
        var that = this;
        // TODO Removed hard coded values
        /** @type {?} */
        var serverStatusPayload;
        if (actionParam.endPoint) {
            serverStatusPayload = that.payloadCommandService.getApiRequest('getServerStatus', serverInfo, headers, moduleInfo);
            return that.baseConnectionService.send(serverStatusPayload, actionParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
             * @param {?} resp
             * @return {?}
             */
            function (resp) {
                that.serverStatus = resp;
                return that.serverStatus;
            })));
        }
        else {
            serverStatusPayload = that.payloadCommandService.getCommandDetails('getServerStatus', serverInfo, null, null, moduleInfo);
            return that.baseConnectionService.sendRequest(serverStatusPayload, actionParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
             * @param {?} resp
             * @return {?}
             */
            function (resp) {
                that.serverStatus = resp;
                return that.serverStatus;
            })));
        }
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    ServerStatusService.prototype.typeCheck = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return (obj.clientVersion !== undefined && obj.clientBuildID !== undefined && obj.clientBuildDate !== undefined);
    };
    ServerStatusService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ServerStatusService.ctorParameters = function () { return [
        { type: PayloadCommandService },
        { type: BaseConnectionService }
    ]; };
    /** @nocollapse */ ServerStatusService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function ServerStatusService_Factory() { return new ServerStatusService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(PayloadCommandService), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BaseConnectionService)); }, token: ServerStatusService, providedIn: "root" });
    return ServerStatusService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/main-header/main-header.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MainHeaderComponent = /** @class */ (function () {
    /**
     * Creates an instance of main header component.
     * @param configurationService
     * @param router
     * @param errorTermsStoreService
     * @param localeAppResourcesService
     * @param dialog
     * @param snackBar
     * @param helpService
     * @param logoutService
     * @param dialogService
     * @param serverStatusService
     */
    function MainHeaderComponent(logoutService, configurationService, router, errorTermsStoreService, localeAppResourcesService, dialog, snackBar, helpService, dialogService, serverStatusService) {
        this.logoutService = logoutService;
        this.configurationService = configurationService;
        this.router = router;
        this.errorTermsStoreService = errorTermsStoreService;
        this.localeAppResourcesService = localeAppResourcesService;
        this.dialog = dialog;
        this.snackBar = snackBar;
        this.helpService = helpService;
        this.dialogService = dialogService;
        this.serverStatusService = serverStatusService;
        this.contextMenuClass = 'main-header-context-menu';
        this.toShowOverlay = false;
        this.hideCustomerLogo = false;
        this.headerTabClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    MainHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.subscriptions = [];
        this.setUserProfile();
        this.show = false;
        this.toConfirmLogout = false;
        this.toAbout = false;
        this.successPasswordmessage = false;
        this.LogoutMessage1 = this.errorTermsStoreService.getErrorMessage('LogoutMessage1');
        this.LogoutMessage2 = this.errorTermsStoreService.getErrorMessage('LogoutMessage2');
        this.passwordResetSuccessful = this.errorTermsStoreService.getErrorMessage('PasswordResetSuccessful');
        this.OkLabel = this.localeAppResourcesService.getResource('OkLabel');
        this.CancelLabel = this.localeAppResourcesService.getResource('CancelLabel');
    };
    /**
     * @return {?}
     */
    MainHeaderComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var widget = ((/** @type {?} */ (window))).AppcuesWidget(((/** @type {?} */ (window))).Appcues.user());
        widget.init('#my-widget', {
            position: 'left'
            // Optionally add a header and/or footer.
            // header: '<h2>Study Optimizer</h2>',
            // footer: '<p>Sample Footer</p>'
        });
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    MainHeaderComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.userProfile) {
            this.setUserProfile();
        }
    };
    /**
     * Sets user profile
     */
    /**
     * Sets user profile
     * @private
     * @return {?}
     */
    MainHeaderComponent.prototype.setUserProfile = /**
     * Sets user profile
     * @private
     * @return {?}
     */
    function () {
        if (this.userProfile !== undefined) {
            this.userInitials = AppUtil.getNameInitials(this.userProfile.$name, this.userProfile.$nameSeparator);
            /**
             * Add below code to implement requirement of SO-19533 *
             * @type {?}
             */
            var UserArr = this.userProfile.$name.split(' ');
            this.UserNameToolTip = UserArr.join('\n');
            if (UserArr.length > 1) {
                this.firstName = UserArr[0];
                delete UserArr[0];
                this.lastName = UserArr.join(' ');
            }
            else {
                this.firstName = UserArr.join(' ');
            }
            this.profileItems = this.userProfile.$items;
        }
        else {
            this.userInitials = '';
            this.UserNameToolTip = '';
            this.profileItems = [];
        }
    };
    // toggleProfile(value?: boolean) {
    //   if (value !== undefined) {
    //     this.show = value;
    //   } else {
    //     this.show = !this.show;
    //   }
    // }
    /**
     * Determines whether tab click on
     * @param moduleName
     */
    // toggleProfile(value?: boolean) {
    //   if (value !== undefined) {
    //     this.show = value;
    //   } else {
    //     this.show = !this.show;
    //   }
    // }
    /**
     * Determines whether tab click on
     * @param {?} moduleName
     * @return {?}
     */
    MainHeaderComponent.prototype.onTabClick = 
    // toggleProfile(value?: boolean) {
    //   if (value !== undefined) {
    //     this.show = value;
    //   } else {
    //     this.show = !this.show;
    //   }
    // }
    /**
     * Determines whether tab click on
     * @param {?} moduleName
     * @return {?}
     */
    function (moduleName) {
        var _this = this;
        this.canDeactivate().subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res === true) {
                _this.headerTabClicked.emit(moduleName);
            }
        }));
    };
    /**
     * Determines whether deactivate can
     * @param [isReset]
     * @returns deactivate
     */
    /**
     * Determines whether deactivate can
     * @param {?=} isReset
     * @return {?} deactivate
     */
    MainHeaderComponent.prototype.canDeactivate = /**
     * Determines whether deactivate can
     * @param {?=} isReset
     * @return {?} deactivate
     */
    function (isReset) {
        if (isReset === true) {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])(true);
        }
        if (this.dialogService.isStatusChanged === true) {
            return this.dialogService.confirm();
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])(true);
    };
    /**
     * Gets resource
     * @param key
     * @returns resource
     */
    /**
     * Gets resource
     * @private
     * @param {?} key
     * @return {?} resource
     */
    MainHeaderComponent.prototype.getResource = /**
     * Gets resource
     * @private
     * @param {?} key
     * @return {?} resource
     */
    function (key) {
        return this.localeAppResourcesService.getResource(key);
    };
    /**
     * Gets action app resource
     * @returns action app resource
     */
    /**
     * Gets action app resource
     * @private
     * @return {?} action app resource
     */
    MainHeaderComponent.prototype.getActionAppResource = /**
     * Gets action app resource
     * @private
     * @return {?} action app resource
     */
    function () {
        return {
            about: this.getResource('HeaderAboutStudyOptimizer'),
            logout: this.getResource('HeaderLogout'),
            help: this.getResource('HeaderProfileHelp'),
            password: this.getResource('HeaderChangePassword')
        };
    };
    /**
     * Determines whether click action on
     * @param item
     */
    /**
     * Determines whether click action on
     * @param {?} item
     * @return {?}
     */
    MainHeaderComponent.prototype.onClickAction = /**
     * Determines whether click action on
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (item) {
            // this.toggleProfile();
            if (this.getActionAppResource().logout === item) {
                this.openConfirmLogoutDialog();
            }
            else if (this.getActionAppResource().about === item) {
                this.openAboutDialog();
            }
            else if (this.getActionAppResource().password === item) {
                this.openPasswordDialog();
            }
            else if (this.getActionAppResource().help === item) {
                this.helpService.openHelp();
            }
            else {
                this.router.navigate([item.toLowerCase()]);
            }
        }
    };
    /**
     * Opens confirm logout dialog
     */
    /**
     * Opens confirm logout dialog
     * @return {?}
     */
    MainHeaderComponent.prototype.openConfirmLogoutDialog = /**
     * Opens confirm logout dialog
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var logoutDialogRef = this.dialog.open(ConfirmationDialogComponent, {
            width: DIALOG_CONFIG.LOGOUT.WIDTH,
            data: this.getLogoutDialogProp(),
            panelClass: DIALOG_CONFIG.LOGOUT.PANEL_CLASS,
            id: DIALOG_CONFIG.LOGOUT.ID
        });
        this.subscriptions.push(logoutDialogRef.afterClosed().subscribe((/**
         * @param {?} eventObject
         * @return {?}
         */
        function (eventObject) {
            if (eventObject && eventObject.action === _this.getLogoutDialogProp().okLabel) {
                _this.logout();
            }
        })));
    };
    /**
     * Gets logout dialog prop
     * @returns
     */
    /**
     * Gets logout dialog prop
     * @return {?}
     */
    MainHeaderComponent.prototype.getLogoutDialogProp = /**
     * Gets logout dialog prop
     * @return {?}
     */
    function () {
        /** @type {?} */
        var logoutMsg = this.errorTermsStoreService.getErrorMessage('LogoutMessage1') +
            '<br>' +
            this.errorTermsStoreService.getErrorMessage('LogoutMessage2') +
            '<br>';
        return {
            heading: '',
            message: logoutMsg,
            prefixMaterialIcon: {
                name: 'help',
                color: '#0e6ca9',
                size: '65px'
            },
            okLabel: this.localeAppResourcesService.getResource('OkLabel'),
            cancelLabel: this.localeAppResourcesService.getResource('CancelLabel')
        };
    };
    /**
     * Logouts main header component
     */
    /**
     * Logouts main header component
     * @return {?}
     */
    MainHeaderComponent.prototype.logout = /**
     * Logouts main header component
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var actionParam = {};
        // TODO
        /** @type {?} */
        var subscription = this.logoutService.logout().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data.result === COMMON.RESULT_OK) {
                if (_this.serverStatusService.serverStatus) {
                    if (_this.serverStatusService.serverStatus.loginRequired) {
                        /** @type {?} */
                        var loginUrl = _this.configurationService.$loginUrl;
                        if (loginUrl) {
                            AppWindow.getWindow().location.href = loginUrl;
                        }
                    }
                    else {
                        AppWindow.getWindow().location.href = _this.serverStatusService.serverStatus.ssoRedirectURL;
                    }
                }
            }
            else if (data.result === COMMON.RESULT_ERROR) {
                console.log(data.error.message);
                throw new Error(data.error.message);
            }
        }));
        this.subscriptions.push(subscription);
    };
    /**
     * Opens about dialog
     */
    /**
     * Opens about dialog
     * @return {?}
     */
    MainHeaderComponent.prototype.openAboutDialog = /**
     * Opens about dialog
     * @return {?}
     */
    function () {
        /** @type {?} */
        var logoutDialogRef = this.dialog.open(ConfirmationDialogComponent, {
            width: DIALOG_CONFIG.ABOUT.WIDTH,
            data: this.getAboutDialogProp(),
            panelClass: DIALOG_CONFIG.ABOUT.PANEL_CLASS,
            id: DIALOG_CONFIG.ABOUT.ID
        });
    };
    /**
     * @return {?}
     */
    MainHeaderComponent.prototype.getAboutDialogProp = /**
     * @return {?}
     */
    function () {
        return {
            heading: this.aboutResource.aboutBoxTitle,
            message: this.aboutResource.aboutBoxVersion +
                '<br><br>' +
                this.aboutResource.aboutBoxDisclaimer,
            postfixImageUrl: this.aboutResource.logoUrl,
            okLabel: this.localeAppResourcesService.getResource('OkLabel'),
            showCancel: false
        };
    };
    /**
     * @return {?}
     */
    MainHeaderComponent.prototype.openPasswordDialog = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var passwordDialogRef = this.dialog.open(PasswordComponent, {
            width: DIALOG_CONFIG.PASSWORD.WIDTH,
            data: this.getPasswordDialogProp(),
            panelClass: DIALOG_CONFIG.PASSWORD.PANEL_CLASS,
            id: DIALOG_CONFIG.PASSWORD.ID
        });
        this.subscriptions.push(passwordDialogRef.afterClosed().subscribe((/**
         * @param {?} eventObject
         * @return {?}
         */
        function (eventObject) {
            if (eventObject) {
                console.log(eventObject.data);
                _this.showBanner('positive', 'positive-snackbar', 'assets/images/manageplans/icon-positive.png', 'PasswordResetSuccessful');
            }
        })));
    };
    /**
     * Gets password dialog prop
     * @returns
     */
    /**
     * Gets password dialog prop
     * @return {?}
     */
    MainHeaderComponent.prototype.getPasswordDialogProp = /**
     * Gets password dialog prop
     * @return {?}
     */
    function () {
        return {
            heading: this.passwordResource.changePassword,
            currentPassword: this.passwordResource.currentPassword,
            nonEmptyField: this.passwordResource.nonEmptyField,
            newPassword: this.passwordResource.newPassword,
            confirmPassword: this.passwordResource.confirmPassword,
            passwordMisMatchMessage: this.passwordResource.passwordMisMatchMessage,
            lengthRule: this.passwordResource.lengthRule,
            mixCharRule: this.passwordResource.mixCharRule,
            okLabel: this.localeAppResourcesService.getResource('OkLabel'),
            cancelLabel: this.localeAppResourcesService.getResource('CancelLabel')
        };
    };
    /**
     * Shows banner
     * @param messageType
     * @param panelClass
     * @param iconPath
     * @param messageCode
     */
    /**
     * Shows banner
     * @param {?} messageType
     * @param {?} panelClass
     * @param {?} iconPath
     * @param {?} messageCode
     * @return {?}
     */
    MainHeaderComponent.prototype.showBanner = /**
     * Shows banner
     * @param {?} messageType
     * @param {?} panelClass
     * @param {?} iconPath
     * @param {?} messageCode
     * @return {?}
     */
    function (messageType, panelClass, iconPath, messageCode) {
        this.snackBar.openFromComponent(DisplayBannerComponent, {
            data: {
                message: this.errorTermsStoreService.getErrorMessage(messageCode),
                icon: iconPath,
                messageType: messageType
            },
            panelClass: [panelClass]
        });
    };
    /**
     * Onclicks window
     */
    /**
     * Onclicks window
     * @return {?}
     */
    MainHeaderComponent.prototype.onclickWindow = /**
     * Onclicks window
     * @return {?}
     */
    function () {
        console.log('clicked');
    };
    /**
     * Hides image
     * @param event
     */
    /**
     * Hides image
     * @param {?} event
     * @return {?}
     */
    MainHeaderComponent.prototype.hideImage = /**
     * Hides image
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.hideCustomerLogo = true;
    };
    // @HostListener('keydown', ['$event'])
    // public keydown(event: any): void {
    //   if (event.keyCode === 27) {
    //     this.toggleProfile(false);
    //   }
    // }
    // @HostListener('document:click', ['$event'])
    // public documentClick(event: any): void {
    //   if (!this.contains(event.target)) {
    //     this.toggleProfile(false);
    //   }
    // }
    /**
     * Contains main header component
     * @param target
     * @returns true if contains
     */
    // @HostListener('keydown', ['$event'])
    // public keydown(event: any): void {
    //   if (event.keyCode === 27) {
    //     this.toggleProfile(false);
    //   }
    // }
    // @HostListener('document:click', ['$event'])
    // public documentClick(event: any): void {
    //   if (!this.contains(event.target)) {
    //     this.toggleProfile(false);
    //   }
    // }
    /**
     * Contains main header component
     * @private
     * @param {?} target
     * @return {?} true if contains
     */
    MainHeaderComponent.prototype.contains = 
    // @HostListener('keydown', ['$event'])
    // public keydown(event: any): void {
    //   if (event.keyCode === 27) {
    //     this.toggleProfile(false);
    //   }
    // }
    // @HostListener('document:click', ['$event'])
    // public documentClick(event: any): void {
    //   if (!this.contains(event.target)) {
    //     this.toggleProfile(false);
    //   }
    // }
    /**
     * Contains main header component
     * @private
     * @param {?} target
     * @return {?} true if contains
     */
    function (target) {
        return (this.profileAnchor.nativeElement.contains(target) ||
            (this.profilePopup
                ? this.profilePopup.nativeElement.contains(target)
                : false));
    };
    /**
     * @return {?}
     */
    MainHeaderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.items = null;
        this.userProfile = null;
        this.passwordComponent = null;
        this.profileItems = null;
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) {
            subscription.unsubscribe();
        }));
        this.subscriptions = null;
    };
    MainHeaderComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'ctos-main-header',
                    template: "<nav class=\"navbar navbar-expand navbar-light bg-light\">\r\n  <div class=\"navbar-brand d-flex align-items-center\">\r\n    <label class=\"study-o-text\">IQVIA <sup>TM</sup> StudyOptimizer</label>\r\n    <div class=\"v-divider\"></div>\r\n    <img class=\"logo\" [src]=\"logoUrl\" alt=\"\" (error)=\"hideImage($event)\" [ngClass]=\"{ hideImage: hideCustomerLogo }\" />\r\n  </div>\r\n  <div class=\"collapse navbar-collapse d-flex justify-content-end full-height\" id=\"navbarSupportedContent\">\r\n\r\n    <ul class=\"navbar-nav full-height\">\r\n      <li class=\"nav-item text-truncate\" *ngFor=\"let item of items\" (click)=\"onTabClick(item.$moduleName)\">\r\n        <a class=\"nav-link text-truncate\" [innerHTML]=\"item.$name\"> </a>\r\n      </li>\r\n\r\n      <div id=\"my-widget\" class=\"nav-item\">\r\n        <div class=\"appcues-widget-icon\">\r\n          <img [src]=\"appInfoUrl\" width=\"30px\" height=\"30px\" />\r\n        </div>\r\n      </div>\r\n\r\n      <li class=\"nav-item divider-menu-item\">\r\n        <div class=\"v-divider\"></div>\r\n      </li>\r\n\r\n      <li class=\"nav-item\">\r\n        <div class=\"profile-wrapper\">\r\n          <button mat-icon-button class=\"\" [matMenuTriggerFor]=\"menu\">\r\n            <div class=\"profile-config\">\r\n              <span [innerHTML]=\"userInitials\"></span>\r\n            </div>\r\n          </button>\r\n          <!-- Add below code to implement requirement of SO-19533 -->\r\n          <mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\" [class]=\"'context-menu ' + contextMenuClass\"\r\n            [xPosition]=\"'before'\" [yPosition]=\"'below'\">\r\n            <h5 class=\"heading\" *ngIf=\"UserNameToolTip\" [matTooltipClass]=\"'ctos-tooltip'\" [matTooltip]=\"UserNameToolTip\"\r\n              matTooltipPosition=\"above\">\r\n              <div class=\"fullname_subheader\" [innerHTML]=\"firstName\"></div>\r\n              <div class=\"fullname_subheader\" [innerHTML]=\"lastName\"></div>\r\n            </h5>\r\n            <div *ngFor=\"let item of profileItems\" [matTooltip]=\"item.tooltipMsg\" matTooltipPosition=\"right\"\r\n              [matTooltipDisabled]=\"item.isEnabled || !item.tooltipMsg\">\r\n              <button mat-menu-item [disabled]=\"!item.isEnabled\" (click)=\"onClickAction(item.name)\">\r\n                <span>{{ item.name }}</span>\r\n                <hr />\r\n              </button>\r\n             </div> \r\n          </mat-menu>\r\n          </div>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</nav>",
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
                }] }
    ];
    /** @nocollapse */
    MainHeaderComponent.ctorParameters = function () { return [
        { type: LogoutService },
        { type: ConfigurationService },
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_8__["Router"] },
        { type: ErrorTermsStoreService },
        { type: LocaleAppResourcesService },
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialog"] },
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSnackBar"] },
        { type: HelpService },
        { type: DialogService },
        { type: ServerStatusService }
    ]; };
    MainHeaderComponent.propDecorators = {
        items: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        userProfile: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        logoUrl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        appInfoUrl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        alertConfirmUrl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        aboutResource: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        passwordResource: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        headerTabClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        matMenu: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['menu', { static: true },] }],
        profileAnchor: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['profile', { static: true },] }],
        profilePopup: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['profilePopup', { read: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ElementRef"], static: true },] }]
    };
    return MainHeaderComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/redirect/redirect.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RedirectComponent = /** @class */ (function () {
    /**
     * Creates an instance of redirect component.
     * @param route
     */
    function RedirectComponent(route) {
        this.route = route;
    }
    /**
     * @return {?}
     */
    RedirectComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var queryParams = this.route.snapshot.queryParams;
        /** @type {?} */
        var url = AppUtil.generateUrl(BASE_HREF, ((/** @type {?} */ (this.route.snapshot.data))).externalUrlFragment);
        /** @type {?} */
        var addque = true;
        for (var i in queryParams) {
            if (queryParams[i] !== undefined) {
                if (addque) {
                    url += '?';
                    addque = false;
                }
                else {
                    url += '&';
                }
                url += i + '=' + queryParams[i];
            }
        }
        AppWindow.getWindow().location.href = url;
    };
    RedirectComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'ctos-redirect',
                    template: ""
                }] }
    ];
    /** @nocollapse */
    RedirectComponent.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_8__["ActivatedRoute"] }
    ]; };
    return RedirectComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/search-list/search-list.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SearchListComponent = /** @class */ (function () {
    /**
     * Creates an instance of search list component.
     * @param searchListFB
     * @param dialogService
     */
    function SearchListComponent(searchListFB, dialogService) {
        this.searchListFB = searchListFB;
        this.dialogService = dialogService;
        this.labels = {};
        this.toggleArrowFlag = false;
        this.itemSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    Object.defineProperty(SearchListComponent.prototype, "searchListFormGroupName", {
        get: /**
         * @return {?}
         */
        function () {
            return this.searchListFormGroup;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.searchListFormGroup = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchListComponent.prototype, "$searchGroups", {
        /**
         * Getter $searchGroups
         * @return Array<any>
         */
        get: /**
         * Getter $searchGroups
         * @return {?} Array<any>
         */
        function () {
            return this.searchGroups;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SearchListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.subscriptions = new Map();
        this.initializeSubjects();
        this.setFilter();
        this.setSearchGroups();
    };
    /**
     * on changes
     * @param changes
     */
    /**
     * on changes
     * @param {?} changes
     * @return {?}
     */
    SearchListComponent.prototype.ngOnChanges = /**
     * on changes
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes &&
            changes.searchListFormGroupName &&
            this.searchListFormGroupName.get('searchListControl') &&
            this.searchListFormGroupName.get('searchListControl').value) {
            this.removeSubscription();
            this.subscriptions = new Map();
            this.setFilter(this.searchListFormGroupName.get('searchListControl').value);
        }
    };
    /**
     * Gets selected item
     * @param selectedItemkey
     * @param list
     * @returns selected item
     */
    /**
     * Gets selected item
     * @private
     * @param {?} selectedItemkey
     * @param {?} list
     * @return {?} selected item
     */
    SearchListComponent.prototype.getSelectedItem = /**
     * Gets selected item
     * @private
     * @param {?} selectedItemkey
     * @param {?} list
     * @return {?} selected item
     */
    function (selectedItemkey, list) {
        /** @type {?} */
        var selectedItem;
        if (selectedItemkey !== undefined &&
            selectedItemkey !== null &&
            list !== undefined &&
            list !== null) {
            selectedItem =
                list.find((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (typeof selectedItemkey === 'string') {
                        return (item.id.toLowerCase() === (/** @type {?} */ (selectedItemkey.toLowerCase())));
                    }
                    else {
                        return item.key === selectedItemkey;
                    }
                })) || '';
        }
        else {
            selectedItem = '';
        }
        if (this.dialogService.selectedStudyKey === undefined ||
            this.dialogService.selectedStudyKey === null ||
            this.dialogService.selectedStudyKey === '') {
            this.dialogService.selectedStudyKey = selectedItem;
        }
        return selectedItem;
    };
    /**
     * @private
     * @return {?}
     */
    SearchListComponent.prototype.initializeSubjects = /**
     * @private
     * @return {?}
     */
    function () {
        this.recentlistItemsSubject = new rxjs__WEBPACK_IMPORTED_MODULE_19__["Subject"]();
        this.allListItemsSubject = new rxjs__WEBPACK_IMPORTED_MODULE_19__["Subject"]();
    };
    /**
     * Setter setSearchGroups
     */
    /**
     * Setter setSearchGroups
     * @return {?}
     */
    SearchListComponent.prototype.setSearchGroups = /**
     * Setter setSearchGroups
     * @return {?}
     */
    function () {
        if (this.recentlistItemsSubject === undefined ||
            this.allListItemsSubject === undefined) {
            this.initializeSubjects();
        }
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var searchGroups = [];
        // recentListItemsLabel condition is checked for not showing most recently list In copy plan
        if (this.searchListInput.recentListItemsLabel) {
            searchGroups.push({
                name: this.searchListInput.recentListItemsLabel,
                list: this.recentlistItemsSubject.asObservable()
            });
        }
        searchGroups.push({
            name: this.searchListInput.allListItemsLabel,
            list: this.allListItemsSubject.asObservable()
        });
        this.searchGroups = searchGroups;
    };
    /**
     * Sets filter
     * @param [initialValue]
     */
    /**
     * Sets filter
     * @private
     * @param {?=} initialValue
     * @return {?}
     */
    SearchListComponent.prototype.setFilter = /**
     * Sets filter
     * @private
     * @param {?=} initialValue
     * @return {?}
     */
    function (initialValue) {
        var _this = this;
        this.isFirstFilterCall = true;
        if (!this.subscriptions.has('valueChangeSubscription')) {
            /** @type {?} */
            var listControl = this.isSearchListOn ? 'filterListControl' : 'searchListControl';
            if (this.searchListFormGroupName
                .get(listControl)) {
                /** @type {?} */
                var valueChangeSubscription = this.searchListFormGroupName
                    .get(listControl)
                    .valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["startWith"])(initialValue || ''), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["debounceTime"])(DEBOUNCE_TIME), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
                 * @param {?} value
                 * @return {?}
                 */
                function (value) {
                    return typeof value === 'string' ? value : value.id;
                })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["distinctUntilChanged"])((/**
                 * @param {?} oldValue
                 * @param {?} newValue
                 * @return {?}
                 */
                function (oldValue, newValue) {
                    return oldValue === newValue;
                })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["mergeMap"])((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    return _this.filterItems(item, initialValue || _this.searchListInput.selectedItemKey);
                })))
                    .subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) { }));
                this.subscriptions.set('valueChangeSubscription', valueChangeSubscription);
            }
        }
    };
    /**
     * Filters items
     * @param value
     * @param [selectedItemKey]
     * @returns items
     */
    /**
     * Filters items
     * @private
     * @param {?} value
     * @param {?=} selectedItemKey
     * @return {?} items
     */
    SearchListComponent.prototype.filterItems = /**
     * Filters items
     * @private
     * @param {?} value
     * @param {?=} selectedItemKey
     * @return {?} items
     */
    function (value, selectedItemKey) {
        var _this = this;
        /** @type {?} */
        var self = this;
        if (self.searchListInput.searchApi !== undefined) {
            /** @type {?} */
            var searchApiSubscription = self.searchListInput
                .searchApi(value)
                .subscribe((/**
             * @param {?} resp
             * @return {?}
             */
            function (resp) {
                if (resp.allListItems && resp.allListItems.length > 0) {
                    self.recentlistItemsSubject.next(resp.recentListItems);
                    self.allListItemsSubject.next(resp.allListItems);
                }
                else if (resp.allListItems && resp.allListItems.length <= 0) {
                    self.recentlistItemsSubject.next([_this.searchListInput.recentListItemsLabel]);
                    self.allListItemsSubject.next([_this.searchListInput.allListItemsLabel]);
                }
                /** @type {?} */
                var selectedItem = self.getSelectedItem(selectedItemKey, resp.recentListItems);
                if (_this.isFirstFilterCall) {
                    self.searchListFormGroupName
                        .get('searchListControl')
                        .setValue(selectedItem);
                    _this.isFirstFilterCall = false;
                }
                _this.selectionChange.emit(selectedItem);
            }));
            this.subscriptions.set('searchApiSubscription', searchApiSubscription);
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])(self.searchGroups);
    };
    /**
     * Formats item
     * @param [item]
     * @returns item
     */
    /**
     * Formats item
     * @param {?=} item
     * @return {?} item
     */
    SearchListComponent.prototype.formatItem = /**
     * Formats item
     * @param {?=} item
     * @return {?} item
     */
    function (item) {
        /** @type {?} */
        var ret;
        if (!item) {
            return;
        }
        else if (typeof item === 'string') {
            ret = item;
        }
        else {
            ret = item.id;
        }
        return ret;
    };
    /**
     * Clicks search list component
     */
    /**
     * Clicks search list component
     * @return {?}
     */
    SearchListComponent.prototype.click = /**
     * Clicks search list component
     * @return {?}
     */
    function () {
        this.searchListFormGroup.get('filterListControl').setValue('');
    };
    /**
     * Determines whether blur on
     */
    /**
     * Determines whether blur on
     * @return {?}
     */
    SearchListComponent.prototype.onBlur = /**
     * Determines whether blur on
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newValue = '';
        if (this.searchListFormGroup.get('searchListControl') &&
            this.searchListFormGroup.get('searchListControl').value) {
            if (this.searchListFormGroup.get('searchListControl').value.hasOwnProperty('searchListControl')) {
                newValue = this.searchListFormGroup.get('searchListControl').value.searchListControl;
            }
            else {
                newValue = this.searchListFormGroup.get('searchListControl').value;
            }
        }
        this.searchListFormGroup.get('searchListControl').setValue(newValue);
    };
    /**
     * Opens search list component
     */
    /**
     * Opens search list component
     * @return {?}
     */
    SearchListComponent.prototype.open = /**
     * Opens search list component
     * @return {?}
     */
    function () {
        this.toggleArrowFlag = true;
        if (this.searchListFormGroup.get('filterListControl') &&
            this.searchListFormGroup.get('filterListControl').value) {
            this.searchListFormGroup.get('filterListControl').setValue('');
        }
    };
    /**
     * Closes search list component
     */
    /**
     * Closes search list component
     * @return {?}
     */
    SearchListComponent.prototype.close = /**
     * Closes search list component
     * @return {?}
     */
    function () {
        if (this.searchListFormGroup.get('filterListControl') &&
            this.searchListFormGroup.get('filterListControl').value) {
            this.searchListFormGroup.get('filterListControl').setValue('');
        }
        this.toggleArrowFlag = false;
    };
    /**
     * Items selected
     * @param event
     */
    /**
     * Items selected
     * @param {?} event
     * @return {?}
     */
    SearchListComponent.prototype.itemSelected = /**
     * Items selected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var isReset = this.dialogService.isProceed !== undefined
            ? this.dialogService.isProceed
            : false;
        this.canDeactivate(isReset).subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res === true) {
                _this.dialogService.isStatusChanged = false;
                _this.selectionChange.emit(event.option.value);
                _this.itemSelect.emit(event);
                _this.searchbox.nativeElement.expanded = false;
                _this.searchbox.nativeElement.blur();
            }
            else {
                /** @type {?} */
                var values = _this.dialogService.selectedStudyKey;
                _this.searchListFormGroupName.get('searchListControl').setValue(values);
            }
        }));
    };
    /**
     * Determines whether deactivate can
     * @param [isReset]
     * @returns deactivate
     */
    /**
     * Determines whether deactivate can
     * @param {?=} isReset
     * @return {?} deactivate
     */
    SearchListComponent.prototype.canDeactivate = /**
     * Determines whether deactivate can
     * @param {?=} isReset
     * @return {?} deactivate
     */
    function (isReset) {
        if (isReset === true) {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])(true);
        }
        if (this.dialogService.isStatusChanged === true) {
            return this.dialogService.confirm();
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])(true);
    };
    /**
     * @return {?}
     */
    SearchListComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.searchListInput = null;
        this.itemSelect = null;
        this.selectionChange = null;
        this.searchListFormGroupName = null;
        this.recentlistItemsSubject = null;
        this.allListItemsSubject = null;
        this.searchGroups = null;
        this.removeSubscription();
    };
    /**
     * Removes subscription
     */
    /**
     * Removes subscription
     * @return {?}
     */
    SearchListComponent.prototype.removeSubscription = /**
     * Removes subscription
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) {
            subscription.unsubscribe();
        }));
        this.subscriptions = null;
    };
    SearchListComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'ctos-search-list',
                    template: "<!-- customized for So-Study dropdown -->\r\n\r\n<div *ngIf=\"isSearchListOn\" class=\"search-list-container\" [formGroup]=\"searchListFormGroupName\" matAutocompleteOrigin #origin=\"matAutocompleteOrigin\">\r\n  <label class=\"study-label\">{{searchListInput.studyListHeaderLabel}}</label>\r\n  <i class=\"material-icons arrow-mat-icon\" [ngClass]=\"toggleArrowFlag ? 'rotate-arrow-icon-ninty-degree' : 'rotate-arrow-icon-zero-degree'\">play_arrow</i>\r\n  <input \r\n  #searchbox \r\n  type=\"button\" \r\n  aria-label=\"Search\" \r\n  formControlName=\"searchListControl\" \r\n  class=\"dropdownArrow form-control study-and-study-name\" \r\n  [matAutocomplete]=\"searchList\" \r\n  [matAutocompleteConnectedTo]=\"origin\" \r\n  (click)='click()'\r\n  (blur)=\"onBlur()\" \r\n  />\r\n  <mat-autocomplete \r\n    #searchList=\"matAutocomplete\" \r\n    [displayWith]=\"formatItem\" \r\n    (optionSelected)=\"itemSelected($event)\" \r\n    showPanel=\"true\" \r\n    [class]=\"'search-list'\"\r\n    (opened)=\"open()\"\r\n    (closed)=\"close()\"\r\n  >\r\n  <i class=\"material-icons search-mat-icon\">search</i>\r\n  <input \r\n  type=\"text\" \r\n  [placeholder]=\"searchListInput.placeholder\" \r\n  aria-label=\"Search\" \r\n  formControlName=\"filterListControl\" \r\n  class=\"dropdownArrow form-control\" \r\n  #autoCompleteInput \r\n  (blur)=\"onBlur()\" \r\n  [matTooltip]=\"labels?.required\" \r\n  [matTooltipClass]=\"'warn ctos-tooltip'\"\r\n  matTooltipPosition=\"right\" \r\n  [matTooltipDisabled]=\"!(searchListFormGroupName.get('searchListControl').touched &&\r\n  searchListFormGroupName.get('searchListControl').hasError('required'))\" \r\n  />\r\n  <mat-optgroup *ngFor=\"let group of $searchGroups\" [label]=\"group.name\">\r\n      <mat-option *ngFor=\"let item of (group.list | async)\" [value]=\"item\" matTooltip=\"{{ item.name }}\">\r\n          <ng-template [ngTemplateOutlet]=\"searchListInput.optionTemplate\" [ngTemplateOutletContext]=\"{ $implicit: item }\">\r\n            </ng-template>\r\n          </mat-option>\r\n      </mat-optgroup>\r\n  </mat-autocomplete>\r\n</div>\r\n\r\n\r\n<!-- Orginial component  -->\r\n\r\n<div *ngIf=\"!isSearchListOn\" class=\"search-list-container\" [formGroup]=\"searchListFormGroupName\">\r\n  <input\r\n    type=\"text\"\r\n    [placeholder]=\"searchListInput.placeholder\"\r\n    aria-label=\"Search\"\r\n    formControlName=\"searchListControl\"\r\n    class=\"dropdownArrow form-control\"\r\n    [matAutocomplete]=\"searchList\"\r\n    #autoCompleteInput\r\n    (blur)=\"onBlur()\"\r\n    [required]=\"required\"\r\n    [matTooltipClass]=\"'warn ctos-tooltip'\"\r\n    [matTooltip]=\"labels?.required\"\r\n    matTooltipPosition=\"right\"\r\n    [matTooltipDisabled]=\"!(searchListFormGroupName.get('searchListControl').touched &&\r\n    searchListFormGroupName.get('searchListControl').hasError('required'))\"\r\n  />\r\n  <!-- <mat-error\r\n    *ngIf=\"\r\n    searchListFormGroupName?.get('searchListControl').touched &&\r\n    searchListFormGroupName?.get('searchListControl').hasError('required')\r\n    \"\r\n    >This field is mendatory.</mat-error\r\n  > -->\r\n  <mat-autocomplete\r\n    #searchList=\"matAutocomplete\"\r\n    [displayWith]=\"formatItem\"\r\n    (optionSelected)=\"itemSelected($event)\"\r\n    showPanel=\"true\"\r\n    [class]=\"'search-list'\"\r\n  >\r\n    <mat-optgroup *ngFor=\"let group of $searchGroups\" [label]=\"group.name\">\r\n      <mat-option\r\n        *ngFor=\"let item of (group.list | async)\"\r\n        [value]=\"item\"\r\n        matTooltip=\"{{ item.name }}\"\r\n      >\r\n        <ng-template\r\n          [ngTemplateOutlet]=\"searchListInput.optionTemplate\"\r\n          [ngTemplateOutletContext]=\"{ $implicit: item }\"\r\n        >\r\n        </ng-template>\r\n      </mat-option>\r\n    </mat-optgroup>\r\n  </mat-autocomplete>\r\n</div>",
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
                }] }
    ];
    /** @nocollapse */
    SearchListComponent.ctorParameters = function () { return [
        { type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"] },
        { type: DialogService }
    ]; };
    SearchListComponent.propDecorators = {
        isSearchListOn: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        searchListInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        required: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        searchListFormGroupName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        labels: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        itemSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        searchbox: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['searchbox', { static: false },] }]
    };
    return SearchListComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/sub-header/sub-header.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SubHeaderComponent = /** @class */ (function () {
    /**
     * Creates an instance of sub header component.
     * @param dialogService
     */
    function SubHeaderComponent(dialogService, router) {
        this.dialogService = dialogService;
        this.router = router;
        this.isSearchListOn = true;
        this.disableLink = false;
        this.itemSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
        this.headerTabClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    Object.defineProperty(SubHeaderComponent.prototype, "searchListFormGroupName", {
        get: /**
         * @return {?}
         */
        function () {
            return this.searchListFormGroup;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.searchListFormGroup = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SubHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * Determines whether tab click on
     * @param moduleName
     * @param $event
     */
    /**
     * Determines whether tab click on
     * @param {?} moduleName
     * @param {?} $event
     * @return {?}
     */
    SubHeaderComponent.prototype.onTabClick = /**
     * Determines whether tab click on
     * @param {?} moduleName
     * @param {?} $event
     * @return {?}
     */
    function (moduleName, $event) {
        var _this = this;
        /** @type {?} */
        var that = this;
        that.canDeactivate().subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (that.disableLink === true && moduleName === 'MODULE_PLANNING') {
                $event.stopPropagation();
                $event.preventDefault();
            }
            else if (res === true) {
                _this.headerTabClicked.emit(moduleName);
            }
        }));
    };
    /**
     * Items selected
     * @param event
     */
    /**
     * Items selected
     * @param {?} event
     * @return {?}
     */
    SubHeaderComponent.prototype.itemSelected = /**
     * Items selected
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.itemSelect.emit(event);
    };
    /**
     * Determines whether study change on
     * @param studyTag
     */
    /**
     * Determines whether study change on
     * @param {?} studyTag
     * @return {?}
     */
    SubHeaderComponent.prototype.onStudyChange = /**
     * Determines whether study change on
     * @param {?} studyTag
     * @return {?}
     */
    function (studyTag) {
        if (this.disablePlansTab === true && studyTag && studyTag.newPlanInd === true) {
            this.disableLink = true;
        }
        else {
            this.disableLink = false;
        }
    };
    /**
     * Determines whether deactivate can
     * @param [isReset]
     * @returns deactivate
     */
    /**
     * Determines whether deactivate can
     * @param {?=} isReset
     * @return {?} deactivate
     */
    SubHeaderComponent.prototype.canDeactivate = /**
     * Determines whether deactivate can
     * @param {?=} isReset
     * @return {?} deactivate
     */
    function (isReset) {
        if (isReset === true) {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])(true);
        }
        if (this.dialogService.isStatusChanged === true) {
            return this.dialogService.confirm();
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])(true);
    };
    /**
     * @param {?} item
     * @return {?}
     */
    SubHeaderComponent.prototype.isTabActive = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var tabActive = false;
        /** @type {?} */
        var url = this.router.url.split('/');
        if (url.length > 1) {
            /** @type {?} */
            var currentUrl = url[1];
            tabActive = item.$name.toLowerCase() === currentUrl.toLowerCase();
        }
        return tabActive;
    };
    /**
     * @return {?}
     */
    SubHeaderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subHeaders = null;
        this.studyListInput = null;
        this.itemSelect = null;
    };
    SubHeaderComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'ctos-sub-header',
                    template: "<div class=\"subnav\">\r\n  <!-- <select>\r\n    <option>CCD984</option>\r\n    <option>BAD984</option>\r\n    <option>CPK284</option>\r\n  </select> -->\r\n  <ctos-search-list [required]=\"false\" [searchListFormGroupName]=\"searchListFormGroupName\"\r\n    [searchListInput]=\"studyListInput\" (itemSelect)=\"itemSelected($event)\" (selectionChange)=\"onStudyChange($event)\"\r\n    [isSearchListOn]=\"isSearchListOn\">\r\n  </ctos-search-list>\r\n  <div *ngFor=\"let item of subHeaders; let i = index\" (click)=\"onTabClick(item.$moduleName, $event)\">\r\n    <!-- The check for disabled link in below ngClass directive needs to be modified when new added tabs are also to be disabled based on the criteria -->\r\n    <a [ngClass]=\"{ 'active': isTabActive(item) === true, 'disabled': disableLink === true}\"\r\n      href=\"javascript:void();\">{{ item.$name }}\r\n    </a>\r\n  </div>\r\n  <div class=\"float-right study-refresh-date\" *ngIf=\"studyRefreshDate\">\r\n    <span [innerHTML]=\"studyRefreshDateLabel\"></span> <span>:&nbsp;</span>\r\n    <span><strong>{{ studyRefreshDate | date: 'dd-MMM-yyyy' }}</strong></span>\r\n  </div>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    SubHeaderComponent.ctorParameters = function () { return [
        { type: DialogService },
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_8__["Router"] }
    ]; };
    SubHeaderComponent.propDecorators = {
        subHeaders: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        studyRefreshDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        studyRefreshDateLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        studyListInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        itemSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        headerTabClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        disablePlansTab: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        searchListFormGroupName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return SubHeaderComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/tab/tab.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TabComponent = /** @class */ (function () {
    /**
     * Creates an instance of tab component.
     * @param activatedRoute
     */
    function TabComponent(activatedRoute) {
        this.activatedRoute = activatedRoute;
        this.tabClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    TabComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var currentRoutePath = this.activatedRoute.snapshot.firstChild.url[0]
            .path;
        if (this.items) {
            this.selectedTab = this.items.find((/**
             * @param {?} i
             * @return {?}
             */
            function (i) {
                return i.routePath === currentRoutePath;
            }));
        }
    };
    /**
     * Selects tab
     * @param item
     * @returns
     */
    /**
     * Selects tab
     * @param {?} item
     * @return {?}
     */
    TabComponent.prototype.selectTab = /**
     * Selects tab
     * @param {?} item
     * @return {?}
     */
    function (item) {
        if (!item.enable) {
            return;
        }
        this.selectedTab = item;
        this.tabClicked.emit(item);
    };
    /**
     * Gets mouse event
     * @param tabName
     * @param enability
     */
    /**
     * Gets mouse event
     * @param {?} tabName
     * @param {?} enability
     * @return {?}
     */
    TabComponent.prototype.getMouseEvent = /**
     * Gets mouse event
     * @param {?} tabName
     * @param {?} enability
     * @return {?}
     */
    function (tabName, enability) {
        this.showTooltip = false;
        if (tabName === 'Countries' && !enability && this.isCohortPlan === 'Y') {
            this.showTooltip = true;
        }
    };
    /**
     * on destroy
     */
    /**
     * on destroy
     * @return {?}
     */
    TabComponent.prototype.ngOnDestroy = /**
     * on destroy
     * @return {?}
     */
    function () {
        this.selectedTab = null;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    TabComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.items && changes.items.currentValue) {
            this.items = changes.items.currentValue;
        }
        if (changes.selectedTabItem && changes.selectedTabItem.currentValue) {
            this.selectedTab = changes.selectedTabItem.currentValue;
        }
    };
    TabComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'ctos-tab',
                    template: "<ul>\r\n  <li *ngFor=\"let item of items\" [matTooltip]=\"'For a cohort plan, you must define one or more cohorts on the Cohort Design tab to enable the Countries tab.'\" matTooltipPosition=\"left\" [matTooltipClass]=\"'warn ctos-tooltip'\"\r\n    [matTooltipDisabled]=\"!showTooltip\" (mouseover)=\"getMouseEvent(item.label, item.enable)\" [ngClass]=\"{'active': selectedTab.label === item.label}\">\r\n    <span [innerHTML]=\"item.label\" (click)=\"selectTab(item)\" [ngClass]=\"{'disabled':item.enable===false}\"></span>\r\n  </li>\r\n</ul>",
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
                }] }
    ];
    /** @nocollapse */
    TabComponent.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_8__["ActivatedRoute"] }
    ]; };
    TabComponent.propDecorators = {
        isCohortPlan: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        items: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        tabClicked: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        selectedTabItem: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return TabComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/notes/notes.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NotesComponent = /** @class */ (function () {
    function NotesComponent(dialogRef, countryNotesProp) {
        this.dialogRef = dialogRef;
        this.countryNotesProp = countryNotesProp;
        this.isEditMode = false;
        this.selectionIndex = null;
        this.isNoteContentEnabled = false;
        this.isNoteEditAccess = false;
        this.noteTemplate = {
            'indicator': '',
            'lastModifiedDate': '',
            'userId': '',
            'userName': '',
            'content': ''
        };
    }
    /**
     * @return {?}
     */
    NotesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.noteTemplate = this.getEmptyNote();
        // this.isNoteContentEnabled = this.countryNotesProp.hasEditAccess && this.countryNotesProp.isEditablePlan;
        // this.isNoteEditAccess = this.countryNotesProp.hasEditAccess && this.countryNotesProp.isEditablePlan;
        // this.isNoteContentEnabled = false;
        this.areNotesEditable = this.countryNotesProp.areNotesEditable;
    };
    /**
     * @return {?}
     */
    NotesComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.dialogRef.close();
    };
    /**
     * @return {?}
     */
    NotesComponent.prototype.ok = /**
     * @return {?}
     */
    function () {
        this.countryNotesProp.noteList.forEach((/**
         * @param {?} note
         * @return {?}
         */
        function (note) {
            if (!note.indicator) {
                note.indicator = INDICATOR.INSERT;
            }
        }));
        this.dialogRef.close({ action: this.countryNotesProp.resources.SAVE, noteList: this.countryNotesProp.noteList });
    };
    /**
     * @return {?}
     */
    NotesComponent.prototype.addComment = /**
     * @return {?}
     */
    function () {
        this.noteTemplate.userId = this.countryNotesProp.userId;
        this.noteTemplate.userName = this.countryNotesProp.userName;
        this.noteTemplate.lastModifiedDate = AppUtil.formatDate(new Date(), DATE_FORMAT.NOTE_API_DATE_FORMAT_SMALL);
        if (!this.isEditMode) {
            this.countryNotesProp.noteList.push(this.noteTemplate);
        }
        else {
            this.noteTemplate.oldUserId = this.selectedNote.userId;
            this.noteTemplate.isModified = true;
            this.countryNotesProp.noteList[this.selectionIndex] = this.noteTemplate;
            this.isEditMode = false;
            this.selectionIndex = null;
        }
        this.isNoteContentEnabled = true;
        this.noteTemplate = this.getEmptyNote();
    };
    /**
     * @return {?}
     */
    NotesComponent.prototype.getEmptyNote = /**
     * @return {?}
     */
    function () {
        return {
            'indicator': '',
            'lastModifiedDate': AppUtil.formatDate(new Date(), DATE_FORMAT.NOTE_API_DATE_FORMAT_SMALL),
            // 'Dec-24-2018 10:01:52'
            'userId': this.countryNotesProp.userId,
            'userName': this.countryNotesProp.userName,
            'content': ''
        };
    };
    /**
     * @param {?} event
     * @return {?}
     */
    NotesComponent.prototype.onContentChange = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.noteTemplate) {
            if (this.noteTemplate.indicator) {
                this.noteTemplate.indicator = INDICATOR.UPDATE;
            }
        }
    };
    /**
     * @return {?}
     */
    NotesComponent.prototype.isEnabled = /**
     * @return {?}
     */
    function () {
        if (this.countryNotesProp.areNotesEditable) {
            if (this.noteTemplate.content && this.noteTemplate.content.trim().length !== 0) {
                return true;
            }
        }
        return false;
    };
    /**
     * @param {?} selectedNote
     * @param {?} index
     * @return {?}
     */
    NotesComponent.prototype.onNoteSelected = /**
     * @param {?} selectedNote
     * @param {?} index
     * @return {?}
     */
    function (selectedNote, index) {
        this.selectionIndex = index;
        this.isEditMode = true;
        this.selectedNote = Object(tslib__WEBPACK_IMPORTED_MODULE_15__["__assign"])({}, selectedNote);
        this.noteTemplate = JSON.parse(JSON.stringify(selectedNote));
    };
    /**
     * @return {?}
     */
    NotesComponent.prototype.resetNote = /**
     * @return {?}
     */
    function () {
        this.isEditMode = false;
        this.selectionIndex = null;
        this.noteTemplate = this.getEmptyNote();
    };
    /**
     * @param {?} index
     * @return {?}
     */
    NotesComponent.prototype.removeNote = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.countryNotesProp && this.countryNotesProp.noteList) {
            if (index > -1 && index < this.countryNotesProp.noteList.length) {
                if (!this.countryNotesProp.noteList[index].indicator) {
                    this.countryNotesProp.noteList.splice(index, 1);
                }
                else {
                    this.selectedNote = Object(tslib__WEBPACK_IMPORTED_MODULE_15__["__assign"])({}, this.countryNotesProp.noteList[index]);
                    this.countryNotesProp.noteList[index].indicator = INDICATOR.DELETE;
                    this.countryNotesProp.noteList[index].oldUserId = this.selectedNote.userId;
                    this.countryNotesProp.noteList[index].isModified = true;
                    this.isNoteContentEnabled = true;
                }
                if (index === this.selectionIndex) {
                    this.resetNote();
                }
            }
        }
    };
    /**
     * @param {?} note
     * @return {?}
     */
    NotesComponent.prototype.isDeletedNote = /**
     * @param {?} note
     * @return {?}
     */
    function (note) {
        return note.indicator === INDICATOR.DELETE;
    };
    NotesComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'ctos-notes',
                    template: "<!-- <h3 mat-dialog-title> {{countryNotesProp?.resources?.TITLE}} {{countryNotesProp?.countryName}}</h3> -->\r\n<h3 mat-dialog-title> {{countryNotesProp?.titleLabel}} {{countryNotesProp?.titleValue}}</h3>\r\n<div mat-dialog-content class=\"country-notes-container\">\r\n    <!-- <ng-container *ngIf=\"!countryNotesProp?.isMCGrid\"> -->\r\n    <ng-container *ngIf=\"countryNotesProp?.areNotesEditable\">\r\n        <textarea rows=\"3\" cols=\"50\" class=\"form-control\" maxlength=\"1024\" (ngModelChange)=\"onContentChange($event)\"\r\n            [disabled]=\"!areNotesEditable\" [(ngModel)]=\"noteTemplate.content\" #content=\"ngModel\" id=\"content\"\r\n            name=\"content\" placeholder=\"{{countryNotesProp?.resources?.TYPE_TO_ADD_COMMENT}}\"></textarea>\r\n        <div class=\"row action-btn-container\">\r\n            <button mat-button class=\"btn-add-comment\" *ngIf=\"isEditMode\" [disableRipple]=\"true\" (click)=\"resetNote()\">\r\n                Cancel\r\n            </button>\r\n            <button mat-button class=\"btn-add-comment\" [disabled]=\"!isEnabled()\" [disableRipple]=\"true\"\r\n                (click)=\"addComment()\">\r\n                <i *ngIf=\"!isEditMode\" class=\"material-icons\">\r\n                    add_circle_outline\r\n                </i> {{ isEditMode ? 'Save Comment' : countryNotesProp?.resources?.ADD_COMMENT}}\r\n            </button>\r\n        </div>\r\n    </ng-container>\r\n    <div class=\"note-list-container\">\r\n        <div class=\"row note-list-header\">\r\n            <!-- <div *ngIf=\"!countryNotesProp?.isMCGrid\" class=\"col-sm-1\"></div> -->\r\n            <div *ngIf=\"countryNotesProp?.areNotesEditable\" class=\"col-sm-1\"></div>\r\n            <div class=\"col-sm-11 row\">\r\n                <div class=\"col-sm-3\">{{countryNotesProp?.resources?.MODIFIED_DATE}}</div>\r\n                <div class=\"col-sm-3\">{{countryNotesProp?.resources?.USER_NAME}}</div>\r\n                <div class=\"col-sm-6\">{{countryNotesProp?.resources?.CONTENT}}</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"note-list-data\">\r\n            <div class=\"row  note-row\" *ngFor=\"let note of countryNotesProp.noteList; let i = index\">\r\n                <ng-container *ngIf=\"!isDeletedNote(note)\">\r\n                    <!-- <ng-container *ngIf=\"!countryNotesProp?.isMCGrid\"> -->\r\n                    <ng-container *ngIf=\"countryNotesProp?.areNotesEditable\">\r\n                        <div class=\"col-sm-1 btn-remove-note\"\r\n                            [ngClass]=\"(countryNotesProp.areNotesEditable === false) ? 'disable' : ''\"\r\n                            (click)=\"removeNote(i)\">\r\n                            <i class=\"material-icons\"> clear </i>\r\n                        </div>\r\n                    </ng-container>\r\n                    <div class=\"col-sm-11 row\" (click)=\"onNoteSelected(note, i)\">\r\n                        <div class=\"col-sm-3\">{{note.lastModifiedDate | date: 'dd-MMM-yyyy'}}</div>\r\n                        <div class=\"col-sm-3\">{{note.userId}}</div>\r\n                        <div class=\"col-sm-6 txt-content\">{{note.content}}</div>\r\n                    </div>\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div mat-dialog-actions>\r\n    <!-- <ng-container *ngIf=\"!countryNotesProp?.isMCGrid\"> -->\r\n    <ng-container *ngIf=\"countryNotesProp?.areNotesEditable\">\r\n        <button mat-button class=\"ctos-btn-secondary\"\r\n            (click)=\"cancel()\">{{countryNotesProp?.resources?.CANCEL}}</button>\r\n        <button mat-button class=\"ctos-btn-primary offset-2\" [disabled]=\"!areNotesEditable\" (click)=\"ok()\"\r\n            cdkFocusInitial>{{countryNotesProp?.resources?.SAVE}}</button>\r\n    </ng-container>\r\n    <!-- <ng-container *ngIf=\"countryNotesProp?.isMCGrid\"> -->\r\n    <ng-container *ngIf=\"!countryNotesProp?.areNotesEditable\">\r\n        <button mat-button class=\"ctos-btn-primary\" (click)=\"cancel()\">{{countryNotesProp?.resources?.OK}}</button>\r\n    </ng-container>\r\n</div>"
                }] }
    ];
    /** @nocollapse */
    NotesComponent.ctorParameters = function () { return [
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialogRef"] },
        { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Inject"], args: [_angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_DIALOG_DATA"],] }] }
    ]; };
    return NotesComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/auth-main-header/auth-main-header.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AuthMainHeaderComponent = /** @class */ (function () {
    function AuthMainHeaderComponent() {
        this.hideCustomerLogo = false;
    }
    /**
     * @return {?}
     */
    AuthMainHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * Hides image
     * @param event
     */
    /**
     * Hides image
     * @param {?} event
     * @return {?}
     */
    AuthMainHeaderComponent.prototype.hideImage = /**
     * Hides image
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.hideCustomerLogo = true;
    };
    AuthMainHeaderComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'ctos-auth-main-header',
                    template: "<nav class=\"navbar navbar-expand navbar-light bg-light\">\r\n  <div class=\"navbar-brand d-flex align-items-center\">\r\n    <label class=\"study-o-text\">IQVIA <sup>TM</sup> StudyOptimizer</label>\r\n    <div class=\"v-divider\"></div>\r\n    <img class=\"logo\" [src]=\"logoUrl\" alt=\"\" (error)=\"hideImage($event)\" [ngClass]=\"{ hideImage: hideCustomerLogo }\" />\r\n  </div>\r\n  <!-- <div class=\"collapse navbar-collapse d-flex justify-content-end full-height\" id=\"navbarSupportedContent\">\r\n\r\n    <ul class=\"navbar-nav full-height\">\r\n    </ul>\r\n  </div> -->\r\n</nav>",
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewEncapsulation"].None
                }] }
    ];
    /** @nocollapse */
    AuthMainHeaderComponent.ctorParameters = function () { return []; };
    AuthMainHeaderComponent.propDecorators = {
        logoUrl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }],
        appInfoUrl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return AuthMainHeaderComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/nested-dropdown/nested-dropdown.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NestedDropdownComponent = /** @class */ (function () {
    function NestedDropdownComponent() {
        this.optionClick = new _angular_core__WEBPACK_IMPORTED_MODULE_0__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    NestedDropdownComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} item
     * @return {?}
     */
    NestedDropdownComponent.prototype.optionClicked = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.optionClick.emit(item);
    };
    NestedDropdownComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Component"], args: [{
                    selector: 'ctos-nested-dropdown',
                    template: "<mat-menu #menu class=\"nested-dropdown-menu world-wide-nested-dropdown-panel\">\r\n    <ng-container *ngFor=\"let item of items\">\r\n        <button *ngIf=\"!item.children; else branch\" mat-menu-item (click)=\"optionClicked(item)\">{{item.name}}</button>\r\n        <ng-template #branch>\r\n            <button mat-menu-item [matMenuTriggerFor]=\"innerPanel.menu\"\r\n                (click)=\"optionClicked(item)\">{{item.name}}</button>\r\n            <ctos-nested-dropdown #innerPanel [items]=\"item.children\" (optionClick)=\"optionClicked($event)\">\r\n            </ctos-nested-dropdown>\r\n        </ng-template>\r\n    </ng-container>\r\n</mat-menu>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    NestedDropdownComponent.ctorParameters = function () { return []; };
    NestedDropdownComponent.propDecorators = {
        optionClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Output"] }],
        menu: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["ViewChild"], args: ['menu', { static: true },] }],
        items: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Input"] }]
    };
    return NestedDropdownComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/components.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComponentsModule = /** @class */ (function () {
    function ComponentsModule() {
    }
    ComponentsModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    imports: [
                        _angular_router__WEBPACK_IMPORTED_MODULE_8__["RouterModule"],
                        _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
                        CommonAngularMaterialModule,
                        _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormsModule"],
                        _angular_material_menu__WEBPACK_IMPORTED_MODULE_7__["MatMenuModule"],
                        _angular_material_icon__WEBPACK_IMPORTED_MODULE_6__["MatIconModule"],
                        _angular_material_button__WEBPACK_IMPORTED_MODULE_4__["MatButtonModule"],
                        _angular_material_dialog__WEBPACK_IMPORTED_MODULE_5__["MatDialogModule"]
                    ],
                    declarations: [
                        BreadcrumbComponent,
                        MainHeaderComponent,
                        SubHeaderComponent,
                        SearchListComponent,
                        PasswordComponent,
                        ConfirmEqualValidatorDirective,
                        ConfirmationDialogComponent,
                        ExportComponent,
                        RedirectComponent,
                        DisplayBannerComponent,
                        ContextMenuComponent,
                        TabComponent,
                        InfoComponent,
                        AuthMainHeaderComponent,
                        SignedIntegerDirective,
                        SignedDecimalDirective,
                        LabelControlDirective,
                        NotesComponent,
                        NestedDropdownComponent
                    ],
                    providers: [BreadcrumbService],
                    exports: [
                        BreadcrumbComponent,
                        MainHeaderComponent,
                        SubHeaderComponent,
                        SearchListComponent,
                        ConfirmEqualValidatorDirective,
                        ConfirmationDialogComponent,
                        ExportComponent,
                        DisplayBannerComponent,
                        ContextMenuComponent,
                        TabComponent,
                        InfoComponent,
                        AuthMainHeaderComponent,
                        SignedIntegerDirective,
                        SignedDecimalDirective,
                        LabelControlDirective,
                        NotesComponent,
                        NestedDropdownComponent
                    ],
                    entryComponents: [
                        PasswordComponent,
                        RedirectComponent,
                        DisplayBannerComponent,
                        ConfirmationDialogComponent,
                        _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSpinner"],
                        NotesComponent
                    ]
                },] }
    ];
    return ComponentsModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/spinner.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SpinnerService = /** @class */ (function () {
    function SpinnerService(overlay) {
        var _this = this;
        this.overlay = overlay;
        this.spinnerRef = this.cdkSpinnerCreate();
        this.spin$ = new rxjs__WEBPACK_IMPORTED_MODULE_19__["Subject"]();
        this.spin$
            .asObservable()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return (val ? 1 : -1); })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["scan"])((/**
         * @param {?} acc
         * @param {?} one
         * @return {?}
         */
        function (acc, one) { return (acc + one >= 0 ? acc + one : 0); }), 0))
            .subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res === 1) {
                _this.showSpinner();
            }
            else if (res === 0) {
                if (_this.spinnerRef.hasAttached()) {
                    _this.stopSpinner();
                }
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    SpinnerService.prototype.cdkSpinnerCreate = /**
     * @private
     * @return {?}
     */
    function () {
        return this.overlay.create({
            hasBackdrop: true,
            backdropClass: 'dark-backdrop',
            positionStrategy: this.overlay
                .position()
                .global()
                .centerHorizontally()
                .centerVertically(),
        });
    };
    /**
     * @return {?}
     */
    SpinnerService.prototype.showSpinner = /**
     * @return {?}
     */
    function () {
        this.spinnerRef.attach(new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_24__["ComponentPortal"](_angular_material__WEBPACK_IMPORTED_MODULE_3__["MatSpinner"]));
    };
    /**
     * @return {?}
     */
    SpinnerService.prototype.stopSpinner = /**
     * @return {?}
     */
    function () {
        this.spinnerRef.detach();
    };
    SpinnerService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    SpinnerService.ctorParameters = function () { return [
        { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_17__["Overlay"] }
    ]; };
    /** @nocollapse */ SpinnerService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function SpinnerService_Factory() { return new SpinnerService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_17__["Overlay"])); }, token: SpinnerService, providedIn: "root" });
    return SpinnerService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/common-library.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommonLibraryModule = /** @class */ (function () {
    function CommonLibraryModule() {
    }
    CommonLibraryModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["NgModule"], args: [{
                    imports: [ComponentsModule],
                    exports: [ComponentsModule],
                    declarations: [],
                    providers: [
                        PCEService,
                        SpinnerService
                    ],
                    entryComponents: []
                },] }
    ];
    return CommonLibraryModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/error-terms.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function TermsErrorParam() { }
if (false) {}
var ErrorTermsService = /** @class */ (function () {
    /**
     * Creates an instance of error terms service.
     * @param baseConnectionService
     * @param payloadCommandService
     * @param errorTermsStoreService
     */
    function ErrorTermsService(baseConnectionService, payloadCommandService, errorTermsStoreService) {
        this.baseConnectionService = baseConnectionService;
        this.payloadCommandService = payloadCommandService;
        this.errorTermsStoreService = errorTermsStoreService;
    }
    /**
     * Gets error terminologies
     * @param params
     * @param [cacheType]
     * @returns error terminologies
     */
    /**
     * Gets error terminologies
     * @param {?} params
     * @param {?=} actionParam
     * @return {?} error terminologies
     */
    ErrorTermsService.prototype.getErrorTerminologies = /**
     * Gets error terminologies
     * @param {?} params
     * @param {?=} actionParam
     * @return {?} error terminologies
     */
    function (params, actionParam) {
        if (!params) {
            throw new Error("params can not be empty or undefined");
        }
        if (!this.typeCheck(params)) {
            throw new Error("Invalid params object");
        }
        actionParam = !actionParam ? (/** @type {?} */ ({})) : actionParam;
        actionParam.cacheKey = CacheKey.TermErrorKey;
        actionParam.cacheType = CacheType.sticky;
        actionParam.storeType = StoreType.Session;
        actionParam.encryption = EncryptionAction.encrypt;
        actionParam.cmdName = ''; // reset cmd name
        actionParam.xmlRequest = '';
        /** @type {?} */
        var moduleInfo = {
            moduleName: 'NEWPLANTAB'
        };
        if (actionParam.endPoint) {
            actionParam.url = APIEndPoints.BASE_TERMS;
        }
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var errorTermsPayload;
        if (actionParam.endPoint) {
            errorTermsPayload = that.payloadCommandService.getApiRequest(params.commandName, params.categoriesError, null, moduleInfo);
            if (!that.errorTermsStoreService.errorTerminologies) {
                return that.baseConnectionService.send(errorTermsPayload, actionParam)
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    if (response.result === COMMON.RESULT_OK) {
                        that.errorTermsStoreService.createErrorCodeBase(response.terminologies);
                        return 'ok';
                    }
                    else {
                        return 'failed';
                    }
                })));
            }
            else {
                return rxjs__WEBPACK_IMPORTED_MODULE_19__["Observable"].create('ok');
            }
        }
        else {
            errorTermsPayload = that.payloadCommandService.getCommandDetails(params.commandName, params.categoriesError, null, null, moduleInfo);
            if (!that.errorTermsStoreService.errorTerminologies) {
                return that.baseConnectionService.sendRequest(errorTermsPayload, actionParam)
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    if (response.result === COMMON.RESULT_OK) {
                        that.errorTermsStoreService.createErrorCodeBase(response.terminologies);
                        return 'ok';
                    }
                    else {
                        return 'failed';
                    }
                })));
            }
            else {
                return rxjs__WEBPACK_IMPORTED_MODULE_19__["Observable"].create('ok');
            }
        }
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    ErrorTermsService.prototype.typeCheck = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return (obj.categoriesError !== undefined && obj.commandName !== undefined);
    };
    ErrorTermsService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ErrorTermsService.ctorParameters = function () { return [
        { type: BaseConnectionService },
        { type: PayloadCommandService },
        { type: ErrorTermsStoreService }
    ]; };
    /** @nocollapse */ ErrorTermsService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function ErrorTermsService_Factory() { return new ErrorTermsService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BaseConnectionService), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(PayloadCommandService), Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(ErrorTermsStoreService)); }, token: ErrorTermsService, providedIn: "root" });
    return ErrorTermsService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/login-terms.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoginTermsService = /** @class */ (function () {
    /**
     * Creates an instance of login terms service.
     * @param baseTermsService
     */
    function LoginTermsService(baseTermsService) {
        this.baseTermsService = baseTermsService;
        /**
         * Login terminologies of login terms service
         */
        this._loginTerminologies = null;
        this.terms = null;
    }
    /**
     * Gets login terminologies
     * @param params
     * @param [cacheType]
     * @returns login terminology information
     */
    /**
     * Gets login terminologies
     * @param {?} params
     * @param {?=} actionParam
     * @return {?} login terminology information
     */
    LoginTermsService.prototype.getLoginTerminologies = /**
     * Gets login terminologies
     * @param {?} params
     * @param {?=} actionParam
     * @return {?} login terminology information
     */
    function (params, actionParam) {
        if (!params) {
            throw new Error("Params can not be empty or undefined");
        }
        if (!this.typeCheck(params)) {
            throw new Error("Invalid params object");
        }
        /** @type {?} */
        var that = this;
        actionParam = !actionParam ? (/** @type {?} */ ({})) : actionParam;
        actionParam.cacheType = CacheType.sticky;
        actionParam.storeType = StoreType.Session;
        actionParam.encryption = EncryptionAction.encrypt;
        actionParam.cacheKey = CacheKey.TermLoginKey;
        actionParam.cmdName = ''; // reset cmd name
        actionParam.xmlRequest = '';
        if (actionParam.endPoint) {
            actionParam.url = APIEndPoints.BASE_TERMS;
        }
        if (that._loginTerminologies === null) {
            return that.baseTermsService.load(params, actionParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                that._loginTerminologies = response;
                return response;
            })));
        }
        else {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])([]);
        }
    };
    /**
     * Gets term
     * get the login term value according to input
     * e.g.
     * getTerm(LoginWelcome);
     * Ouptput
     * <font color='#333333'>Welcome to IQVIA<\/font>
     * @param name
     * @returns
     */
    /**
     * Gets term
     * get the login term value according to input
     * e.g.
     * getTerm(LoginWelcome);
     * Ouptput
     * <font color='#333333'>Welcome to IQVIA<\/font>
     * @param {?} name
     * @return {?}
     */
    LoginTermsService.prototype.getTerm = /**
     * Gets term
     * get the login term value according to input
     * e.g.
     * getTerm(LoginWelcome);
     * Ouptput
     * <font color='#333333'>Welcome to IQVIA<\/font>
     * @param {?} name
     * @return {?}
     */
    function (name) {
        /** @type {?} */
        var termValue = '';
        /* if (!this._loginTerminologies) {
            return termValue;
        } */
        for (var i = 0, iLen = this._loginTerminologies.term.length; i < iLen; i++) {
            if (this._loginTerminologies.term[i].name === name) {
                termValue = this.baseTermsService.resolveValue(this._loginTerminologies.term[i].value);
                break;
            }
        }
        return termValue;
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    LoginTermsService.prototype.typeCheck = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return (obj.category !== undefined && obj.commandName !== undefined);
    };
    LoginTermsService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LoginTermsService.ctorParameters = function () { return [
        { type: BaseTermsService }
    ]; };
    /** @nocollapse */ LoginTermsService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function LoginTermsService_Factory() { return new LoginTermsService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(BaseTermsService)); }, token: LoginTermsService, providedIn: "root" });
    return LoginTermsService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/user-idle.config.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var UserIdleConfig = /** @class */ (function () {
    function UserIdleConfig() {
    }
    return UserIdleConfig;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/user-idle.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * User's idle service.
 */
var UserIdleService = /** @class */ (function () {
    function UserIdleService(config) {
        this.timerStart$ = new rxjs__WEBPACK_IMPORTED_MODULE_19__["Subject"]();
        this.timeout$ = new rxjs__WEBPACK_IMPORTED_MODULE_19__["Subject"]();
        /**
         * Idle value in seconds.
         * Default equals to 10 minutes.
         */
        this.idle = 600;
        /*   protected idle = 600; */
        /**
         * Timeout value in seconds.
         * Default equals to 5 minutes.
         */
        this.timeout = 300;
        /*   protected timeout = 3; */
        /**
         * Ping value in seconds.
         * * Default equals to 2 minutes.
         */
        /*   protected ping = 1; */
        this.ping = 120;
        if (config) {
            this.idle = config.idle;
            this.timeout = config.timeout;
            this.ping = config.ping;
        }
        this.activityEvents$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["merge"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["fromEvent"])(window, 'mousemove'), Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["fromEvent"])(window, 'resize'), Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["fromEvent"])(document, 'keydown'), Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["fromEvent"])(document, 'keyup'));
        this.idle$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["from"])(this.activityEvents$);
    }
    /**
     * Start watching for user idle and setup timer and ping.
     */
    /**
     * Start watching for user idle and setup timer and ping.
     * @return {?}
     */
    UserIdleService.prototype.startWatching = /**
     * Start watching for user idle and setup timer and ping.
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.idleSubscription) {
            this.idleSubscription.unsubscribe();
        }
        // If any of user events is not active for idle-seconds when start timer.
        this.idleSubscription = this.idle$
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["bufferTime"])(5000), // Starting point of detecting of user's inactivity
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["filter"])((/**
         * @param {?} arr
         * @return {?}
         */
        function (arr) { return !arr.length && !_this.isInactivityTimer; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["tap"])((/**
         * @return {?}
         */
        function () { return _this.isInactivityTimer = true; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["switchMap"])((/**
         * @return {?}
         */
        function () { return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["interval"])(1000).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["takeUntil"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["merge"])(_this.activityEvents$, Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["timer"])(_this.idle * 500).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["tap"])((/**
         * @return {?}
         */
        function () { return _this.timerStart$.next(true); }))))), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["finalize"])((/**
         * @return {?}
         */
        function () { return (_this.isInactivityTimer = false); }))); })))
            .subscribe();
        this.setupTimer(this.timeout);
        this.setupPing(this.ping);
    };
    /**
     * @return {?}
     */
    UserIdleService.prototype.stopWatching = /**
     * @return {?}
     */
    function () {
        this.stopTimer();
        if (this.idleSubscription) {
            this.idleSubscription.unsubscribe();
        }
    };
    /**
     * @return {?}
     */
    UserIdleService.prototype.stopTimer = /**
     * @return {?}
     */
    function () {
        this.timerStart$.next(false);
    };
    /**
     * @return {?}
     */
    UserIdleService.prototype.resetTimer = /**
     * @return {?}
     */
    function () {
        this.stopTimer();
        this.isTimeout = false;
    };
    /**
     * Return observable for timer's countdown number that emits after idle.
     */
    /**
     * Return observable for timer's countdown number that emits after idle.
     * @return {?}
     */
    UserIdleService.prototype.onTimerStart = /**
     * Return observable for timer's countdown number that emits after idle.
     * @return {?}
     */
    function () {
        var _this = this;
        return this.timerStart$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["distinctUntilChanged"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["switchMap"])((/**
         * @param {?} start
         * @return {?}
         */
        function (start) { return (start ? _this.timer$ : Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])(null)); })));
    };
    /**
     * Return observable for timeout is fired.
     */
    /**
     * Return observable for timeout is fired.
     * @return {?}
     */
    UserIdleService.prototype.onTimeout = /**
     * Return observable for timeout is fired.
     * @return {?}
     */
    function () {
        var _this = this;
        return this.timeout$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["filter"])((/**
         * @param {?} timeout
         * @return {?}
         */
        function (timeout) { return !!timeout; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["tap"])((/**
         * @return {?}
         */
        function () { return _this.isTimeout = true; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
         * @return {?}
         */
        function () { return true; })));
    };
    /**
     * @return {?}
     */
    UserIdleService.prototype.getConfigValue = /**
     * @return {?}
     */
    function () {
        return {
            idle: this.idle,
            timeout: this.timeout,
            ping: this.ping
        };
    };
    /**
     * Set config values.
     * @param config
     */
    /**
     * Set config values.
     * @param {?} config
     * @return {?}
     */
    UserIdleService.prototype.setConfigValues = /**
     * Set config values.
     * @param {?} config
     * @return {?}
     */
    function (config) {
        if (this.idleSubscription && !this.idleSubscription.closed) {
            console.error('Call stopWatching() before set config values');
            return;
        }
        if (config.idle) {
            this.idle = config.idle;
        }
        if (config.ping) {
            this.ping = config.ping;
        }
        if (config.timeout) {
            this.timeout = config.timeout;
        }
    };
    /**
     * Setup timer.
     *
     * Counts every seconds and return n+1 and fire timeout for last count.
     * @param timeout Timeout in seconds.
     */
    /**
     * Setup timer.
     *
     * Counts every seconds and return n+1 and fire timeout for last count.
     * @protected
     * @param {?} timeout Timeout in seconds.
     * @return {?}
     */
    UserIdleService.prototype.setupTimer = /**
     * Setup timer.
     *
     * Counts every seconds and return n+1 and fire timeout for last count.
     * @protected
     * @param {?} timeout Timeout in seconds.
     * @return {?}
     */
    function (timeout) {
        var _this = this;
        this.timer$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["interval"])(1000).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["take"])(timeout), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["map"])((/**
         * @return {?}
         */
        function () { return 1; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["scan"])((/**
         * @param {?} acc
         * @param {?} n
         * @return {?}
         */
        function (acc, n) { return acc + n; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["tap"])((/**
         * @param {?} count
         * @return {?}
         */
        function (count) {
            if (count === timeout) {
                _this.timeout$.next(true);
            }
        })));
    };
    /**
     * Setup ping.
     *
     * Pings every ping-seconds only if is not timeout.
     * @param ping
     */
    /**
     * Setup ping.
     *
     * Pings every ping-seconds only if is not timeout.
     * @protected
     * @param {?} ping
     * @return {?}
     */
    UserIdleService.prototype.setupPing = /**
     * Setup ping.
     *
     * Pings every ping-seconds only if is not timeout.
     * @protected
     * @param {?} ping
     * @return {?}
     */
    function (ping) {
        var _this = this;
        this.ping$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["interval"])(ping * 1000).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_21__["filter"])((/**
         * @return {?}
         */
        function () { return !_this.isTimeout; })));
    };
    UserIdleService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    UserIdleService.ctorParameters = function () { return [
        { type: UserIdleConfig, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_0__["Optional"] }] }
    ]; };
    /** @nocollapse */ UserIdleService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵdefineInjectable"])({ factory: function UserIdleService_Factory() { return new UserIdleService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_0__["ɵɵinject"])(UserIdleConfig, 8)); }, token: UserIdleService, providedIn: "root" });
    return UserIdleService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/ApplicationError.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Application error
 */
var  /**
 * Application error
 */
ApplicationError = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_15__["__extends"])(ApplicationError, _super);
    /**
     * Creates an instance of application error.
     * @param message
     * @param errorCode
     */
    function ApplicationError(message, errorCode) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.errorCode = errorCode;
        _this.name = ApplicationError.name;
        Object.setPrototypeOf(_this, ApplicationError.prototype);
        return _this;
    }
    return ApplicationError;
}(Error));
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/terms-param.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function TermsParam() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/server-param.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function ServerParam() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/environment-param.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function EnvironmentParam() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/action.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function Action() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/list-item.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ListItem = /** @class */ (function () {
    function ListItem($name, $url, $moduleName, $isEnabled, $isVisible) {
        this.name = $name;
        this.url = $url;
        this.moduleName = $moduleName;
        this.isEnabled = $isEnabled;
        this.isVisible = $isVisible;
    }
    Object.defineProperty(ListItem.prototype, "$name", {
        /**
         * Getter $name
         * @return string
         */
        get: /**
         * Getter $name
         * @return {?} string
         */
        function () {
            return this.name;
        },
        /**
         * Setter $name
         * @param string value
         */
        set: /**
         * Setter $name
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.name = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "$url", {
        /**
         * Getter $url
         * @return string
         */
        get: /**
         * Getter $url
         * @return {?} string
         */
        function () {
            return this.url;
        },
        /**
         * Setter $url
         * @param string value
         */
        set: /**
         * Setter $url
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.url = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "$moduleName", {
        /**
        * Getter $moduleName
        * @return string
        */
        get: /**
         * Getter $moduleName
         * @return {?} string
         */
        function () {
            return this.moduleName;
        },
        /**
         * Setter $moduleName
         * @param string value
         */
        set: /**
         * Setter $moduleName
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.moduleName = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "$isEnabled", {
        /**
         * Getter $isEnabled
         * @return string
         */
        get: /**
         * Getter $isEnabled
         * @return {?} string
         */
        function () {
            return this.isEnabled;
        },
        /**
         * Setter $isEnabled
         * @param string value
         */
        set: /**
         * Setter $isEnabled
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.isEnabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "$isVisible", {
        /**
         * Getter $isVisible
         * @return string
         */
        get: /**
         * Getter $isVisible
         * @return {?} string
         */
        function () {
            return this.isVisible;
        },
        /**
         * Setter $isVisible
         * @param string value
         */
        set: /**
         * Setter $isVisible
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.isVisible = value;
        },
        enumerable: true,
        configurable: true
    });
    return ListItem;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/reset-password.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function ResetPassword() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/search-list-input.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function SearchListInput() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/search-list-item.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function SearchListItem() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/confirmation.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function Confirmation() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/ctos-window.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
CtosWindow = /** @class */ (function () {
    function CtosWindow() {
    }
    /**
     * @param {?} name
     * @return {?}
     */
    CtosWindow.prototype.getParameterByName = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        /** @type {?} */
        var url = AppWindow.getWindow().location.href;
        name = name.replace(/[[]]/g, '\$&');
        /** @type {?} */
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');
        /** @type {?} */
        var results = regex.exec(url);
        if (!results) {
            return null;
        }
        if (!results[2]) {
            return '';
        }
        return decodeURIComponent(results[2].replace('/+/g', ' '));
    };
    /**
     * @return {?}
     */
    CtosWindow.prototype.redirectAsPerParams = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} moduleId
     * @return {?}
     */
    CtosWindow.prototype.userHasPrivilegesForModule = /**
     * @param {?} moduleId
     * @return {?}
     */
    function (moduleId) {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_19__["of"])('');
    };
    /**
     * @param {?} moduleName
     * @return {?}
     */
    CtosWindow.prototype.navigateToModule = /**
     * @param {?} moduleName
     * @return {?}
     */
    function (moduleName) {
    };
    return CtosWindow;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/app-bootstrap.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
var  /**
 * @abstract
 */
AppBootstrap = /** @class */ (function () {
    function AppBootstrap() {
    }
    /**
     * @return {?}
     */
    AppBootstrap.prototype.init = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} environment
     * @param {?=} serverInfo
     * @param {?=} actionParam
     * @return {?}
     */
    AppBootstrap.prototype.call = /**
     * @param {?} environment
     * @param {?=} serverInfo
     * @param {?=} actionParam
     * @return {?}
     */
    function (environment, serverInfo, actionParam) {
    };
    return AppBootstrap;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/about-resource.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function AboutResource() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/password-resource.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function PasswordResource() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/server-info.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function ServerInfo() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/cache/cryptoJS-encryption.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Crypto jsencryption
 */
var  /**
 * Crypto jsencryption
 */
CryptoJSEncryption = /** @class */ (function () {
    function CryptoJSEncryption() {
    }
    /**
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    CryptoJSEncryption.prototype.encrypt = /**
     * @param {?} obj
     * @param {?} key
     * @return {?}
     */
    function (obj, key) {
        /** @type {?} */
        var text = JSON.stringify(obj);
        // const key = CryptoJS.enc.Base64.parse('TEST1234');
        /** @type {?} */
        var encrypted = crypto_js__WEBPACK_IMPORTED_MODULE_25__["AES"].encrypt(text, key);
        return encrypted.toString();
    };
    /**
     * @param {?} text
     * @param {?} key
     * @return {?}
     */
    CryptoJSEncryption.prototype.decrypt = /**
     * @param {?} text
     * @param {?} key
     * @return {?}
     */
    function (text, key) {
        // const key = CryptoJS.enc.Base64.parse('TEST1234');
        /** @type {?} */
        var decrypted = crypto_js__WEBPACK_IMPORTED_MODULE_25__["AES"].decrypt(text.toString(), key);
        /** @type {?} */
        var obj = JSON.parse(decrypted.toString(crypto_js__WEBPACK_IMPORTED_MODULE_25__["enc"].Utf8));
        return obj;
    };
    return CryptoJSEncryption;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/cache/encryption.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Encryption
 * @record
 */
function Encryption() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/tab-item.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function TabItem() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/nested-item.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function NestedItem() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/http-action-type.enum.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var HttpActionType = {
    get: "Get",
    post: "Post",
    delete: "Delete",
    put: "Put",
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/common-routes.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommonRoutes = /** @class */ (function () {
    function CommonRoutes() {
    }
    CommonRoutes.data = [
        {
            'path': 'new-plans',
            'component': RedirectComponent,
            'data': {
                'externalUrlFragment': 'app1',
                'moduleId': 35
            }
        },
        {
            'path': 'new-study',
            'component': RedirectComponent,
            'data': {
                'externalUrlFragment': 'app2',
                'moduleId': 36
            }
        }, {
            'path': 'new-countries',
            'component': RedirectComponent,
            'data': {
                'externalUrlFragment': 'app3',
                'moduleId': 9
            }
        }, {
            'path': 'new-sites',
            'component': RedirectComponent,
            'data': {
                'externalUrlFragment': 'app4',
                'moduleId': 5
            }
        }, {
            'path': 'new-login',
            'component': RedirectComponent,
            'data': {
                'externalUrlFragment': 'login',
                'moduleId': 39
            }
        }
    ];
    return CommonRoutes;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: common-library.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */


//# sourceMappingURL=common-library.js.map


/***/ }),

/***/ "../../dist/so-common-library/fesm5/so-common-library.js":
/*!***********************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/dist/so-common-library/fesm5/so-common-library.js ***!
  \***********************************************************************************************************************************************/
/*! exports provided: ABOUT, AGGRIDROWS, ALERT_CONFIRM_URL, ALERT_TYPE, APPROVE, APP_DATA, ARTBValidator, AllNotZeroValidator, AppBootstrapService, AppDataService, AreaPoint, AreaPoint1, AuthGuard, COMMAND, CSIBlank, CTOSCustomMultiSelectComponent, CTOSPlanChartComponent, CTOSPlanChartLegendComponent, CTOSPlanChartLegendItemComponent, CTOSPlanChartLegendService, CTOSUtil, CUE_CARD_HEADER_LABELS, ColumnPreferenceService, CommonHeaderService, ComponentsModule, ConfigurationService, CurveData, CustomRequired, CustomSiteInitiationDates, DEFAULT_PREFERENCE_GRID_COLUMN, DIALOG_ACIONS, DIALOG_CONFIG, DISPATCH_URL, DOMLAYOUT, DYNAMICGRIDCONTAINER, DataPoint, DaysFromFSIValidator, DropdownComponent, EDIT, EMPTY, ERROR_PARAMS, EndDateValidator, ErrorMessageService, FILTER_PARAMS, FSISitesValidator, FSIValidator, FSSValidator, FilterDataService, GEO_LEVELS, GRIDCONFIG, GRIDROWHEIGHT, GROUP_ACTIONS, GSK_LOGO_URL, GlobalErrorHandler, ICON_NEGATIVE, ICON_POSITIVE, INVALID_URL, LABEL_ACTUAL, LOGIN_PARAMS, LoadingScreenComponent, LoadingScreenService, MEASUREMENT, MENU, MESSAGETYPE_NEGATIVE, MESSAGETYPE_POSITIVE, MILESTONE_GRAPHS, MIN_MAX_RANGE, MODULE_CONSTANTS, Marker, MileStonesData, MilestoneGraphComponent, MilestoneGraphService, MultiLevelDropdownComponent, NA_TOOLTIP, NEWPLANTAB, NOVALUE, PAGE_CONSTANTS, PAGE_CONSTANTS_NEW, PASSWORD, PRECISION, PasteDateRangerValidator, PlanOptionsComponent, PlanOptionsService, PlanService, PrefGridColumnsKeys, PreferenceCategory, REF_CARD_HEAD, REQUIRED_ERROR_OBJ, RRValidator, RangeValidator, ReportsComponent, ReportsService, ResourceService, SASValidator, SFRValidator, SNACKBAR_NEGATIVE, SNACKBAR_POSITIVE, STUDYSUMMARY_COMMAND, STUDYSUMMARY_TARGET, SingleStudy, SiteInitiationValidator, Sites, SoCommonLibraryModule, StudyListInput, StudyListService, StudySummaryService, TargetMilestone, UNIQUE, UNIQUECOHORT, UPDATE_CHART_PREFERNCE, UPDATE_USER_PREFERENCE_ACTION_PARAMS, USER_ACTION_PARAMS, USER_PARAMS, USER_PREFERENCES, UserDataService, VIEW, ValidateARTB, ValidateAllNotZero, ValidateDaysFromFSI, ValidateFSI, ValidateFSS, ValidateRR, ValidateRange, ValidateSAS, ValidateSFR, WEEKS, WindowService, WorldwideDropdownComponent, ZERO, mapping, mappingPref, reversemapping, ɵa, ɵb, ɵc, ɵd, ɵe, ɵf, ɵg, ɵh, ɵi, ɵj, ɵk, ɵl, ɵm */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ABOUT", function() { return ABOUT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AGGRIDROWS", function() { return AGGRIDROWS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ALERT_CONFIRM_URL", function() { return ALERT_CONFIRM_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ALERT_TYPE", function() { return ALERT_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APPROVE", function() { return APPROVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APP_DATA", function() { return APP_DATA; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ARTBValidator", function() { return ARTBValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AllNotZeroValidator", function() { return AllNotZeroValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppBootstrapService", function() { return AppBootstrapService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppDataService", function() { return AppDataService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AreaPoint", function() { return AreaPoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AreaPoint1", function() { return AreaPoint1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthGuard", function() { return AuthGuard; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMMAND", function() { return COMMAND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CSIBlank", function() { return CSIBlank; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CTOSCustomMultiSelectComponent", function() { return CTOSCustomMultiSelectComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CTOSPlanChartComponent", function() { return CTOSPlanChartComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CTOSPlanChartLegendComponent", function() { return CTOSPlanChartLegendComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CTOSPlanChartLegendItemComponent", function() { return CTOSPlanChartLegendItemComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CTOSPlanChartLegendService", function() { return CTOSPlanChartLegendService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CTOSUtil", function() { return CTOSUtil; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CUE_CARD_HEADER_LABELS", function() { return CUE_CARD_HEADER_LABELS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColumnPreferenceService", function() { return ColumnPreferenceService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonHeaderService", function() { return CommonHeaderService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentsModule", function() { return ComponentsModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfigurationService", function() { return ConfigurationService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CurveData", function() { return CurveData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomRequired", function() { return CustomRequired; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomSiteInitiationDates", function() { return CustomSiteInitiationDates; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_PREFERENCE_GRID_COLUMN", function() { return DEFAULT_PREFERENCE_GRID_COLUMN; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DIALOG_ACIONS", function() { return DIALOG_ACIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DIALOG_CONFIG", function() { return DIALOG_CONFIG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DISPATCH_URL", function() { return DISPATCH_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOMLAYOUT", function() { return DOMLAYOUT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DYNAMICGRIDCONTAINER", function() { return DYNAMICGRIDCONTAINER; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataPoint", function() { return DataPoint; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DaysFromFSIValidator", function() { return DaysFromFSIValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DropdownComponent", function() { return DropdownComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EDIT", function() { return EDIT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EMPTY", function() { return EMPTY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ERROR_PARAMS", function() { return ERROR_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EndDateValidator", function() { return EndDateValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorMessageService", function() { return ErrorMessageService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FILTER_PARAMS", function() { return FILTER_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FSISitesValidator", function() { return FSISitesValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FSIValidator", function() { return FSIValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FSSValidator", function() { return FSSValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FilterDataService", function() { return FilterDataService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GEO_LEVELS", function() { return GEO_LEVELS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GRIDCONFIG", function() { return GRIDCONFIG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GRIDROWHEIGHT", function() { return GRIDROWHEIGHT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GROUP_ACTIONS", function() { return GROUP_ACTIONS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GSK_LOGO_URL", function() { return GSK_LOGO_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GlobalErrorHandler", function() { return GlobalErrorHandler; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ICON_NEGATIVE", function() { return ICON_NEGATIVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ICON_POSITIVE", function() { return ICON_POSITIVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INVALID_URL", function() { return INVALID_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LABEL_ACTUAL", function() { return LABEL_ACTUAL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOGIN_PARAMS", function() { return LOGIN_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadingScreenComponent", function() { return LoadingScreenComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoadingScreenService", function() { return LoadingScreenService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MEASUREMENT", function() { return MEASUREMENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MENU", function() { return MENU; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MESSAGETYPE_NEGATIVE", function() { return MESSAGETYPE_NEGATIVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MESSAGETYPE_POSITIVE", function() { return MESSAGETYPE_POSITIVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MILESTONE_GRAPHS", function() { return MILESTONE_GRAPHS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MIN_MAX_RANGE", function() { return MIN_MAX_RANGE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MODULE_CONSTANTS", function() { return MODULE_CONSTANTS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Marker", function() { return Marker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MileStonesData", function() { return MileStonesData; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MilestoneGraphComponent", function() { return MilestoneGraphComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MilestoneGraphService", function() { return MilestoneGraphService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MultiLevelDropdownComponent", function() { return MultiLevelDropdownComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NA_TOOLTIP", function() { return NA_TOOLTIP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NEWPLANTAB", function() { return NEWPLANTAB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NOVALUE", function() { return NOVALUE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_CONSTANTS", function() { return PAGE_CONSTANTS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_CONSTANTS_NEW", function() { return PAGE_CONSTANTS_NEW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PASSWORD", function() { return PASSWORD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PRECISION", function() { return PRECISION; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PasteDateRangerValidator", function() { return PasteDateRangerValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlanOptionsComponent", function() { return PlanOptionsComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlanOptionsService", function() { return PlanOptionsService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PlanService", function() { return PlanService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PrefGridColumnsKeys", function() { return PrefGridColumnsKeys; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PreferenceCategory", function() { return PreferenceCategory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "REF_CARD_HEAD", function() { return REF_CARD_HEAD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "REQUIRED_ERROR_OBJ", function() { return REQUIRED_ERROR_OBJ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RRValidator", function() { return RRValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RangeValidator", function() { return RangeValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReportsComponent", function() { return ReportsComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ReportsService", function() { return ReportsService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResourceService", function() { return ResourceService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SASValidator", function() { return SASValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SFRValidator", function() { return SFRValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SNACKBAR_NEGATIVE", function() { return SNACKBAR_NEGATIVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SNACKBAR_POSITIVE", function() { return SNACKBAR_POSITIVE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STUDYSUMMARY_COMMAND", function() { return STUDYSUMMARY_COMMAND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "STUDYSUMMARY_TARGET", function() { return STUDYSUMMARY_TARGET; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SingleStudy", function() { return SingleStudy; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SiteInitiationValidator", function() { return SiteInitiationValidator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Sites", function() { return Sites; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SoCommonLibraryModule", function() { return SoCommonLibraryModule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StudyListInput", function() { return StudyListInput; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StudyListService", function() { return StudyListService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StudySummaryService", function() { return StudySummaryService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TargetMilestone", function() { return TargetMilestone; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UNIQUE", function() { return UNIQUE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UNIQUECOHORT", function() { return UNIQUECOHORT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UPDATE_CHART_PREFERNCE", function() { return UPDATE_CHART_PREFERNCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UPDATE_USER_PREFERENCE_ACTION_PARAMS", function() { return UPDATE_USER_PREFERENCE_ACTION_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "USER_ACTION_PARAMS", function() { return USER_ACTION_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "USER_PARAMS", function() { return USER_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "USER_PREFERENCES", function() { return USER_PREFERENCES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserDataService", function() { return UserDataService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VIEW", function() { return VIEW; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidateARTB", function() { return ValidateARTB; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidateAllNotZero", function() { return ValidateAllNotZero; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidateDaysFromFSI", function() { return ValidateDaysFromFSI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidateFSI", function() { return ValidateFSI; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidateFSS", function() { return ValidateFSS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidateRR", function() { return ValidateRR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidateRange", function() { return ValidateRange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidateSAS", function() { return ValidateSAS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ValidateSFR", function() { return ValidateSFR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WEEKS", function() { return WEEKS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WindowService", function() { return WindowService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WorldwideDropdownComponent", function() { return WorldwideDropdownComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZERO", function() { return ZERO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mapping", function() { return mapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "mappingPref", function() { return mappingPref; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reversemapping", function() { return reversemapping; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵa", function() { return HeaderComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵb", function() { return PlanDropdownListComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵc", function() { return TrimPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵd", function() { return CueCardComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵe", function() { return CueCardService; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵf", function() { return ApprovePlanComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵg", function() { return CopyPlanComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵh", function() { return DateCustomPipe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵi", function() { return GojsCanvasComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵj", function() { return ExtendedNgxTooltipAreaComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵk", function() { return ExtendedCircleSeriesComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵl", function() { return ExtendedLineSeriesComponent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ɵm", function() { return AuthHeaderComponent; });
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @angular/common */ "../../node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var common_library__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! common-library */ "../../dist/common-library/fesm5/common-library.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "../../node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material */ "../../node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/button */ "../../node_modules/@angular/material/esm5/button.es5.js");
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/dialog */ "../../node_modules/@angular/material/esm5/dialog.es5.js");
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/tooltip */ "../../node_modules/@angular/material/esm5/tooltip.es5.js");
/* harmony import */ var _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/checkbox */ "../../node_modules/@angular/material/esm5/checkbox.es5.js");
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! moment */ "../../node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_13___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_13__);
/* harmony import */ var d3__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! d3 */ "../../node_modules/d3/index.js");
/* harmony import */ var _swimlane_ngx_charts_release__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @swimlane/ngx-charts/release */ "../../node_modules/@swimlane/ngx-charts/release/index.js");
/* harmony import */ var _swimlane_ngx_charts_release__WEBPACK_IMPORTED_MODULE_15___default = /*#__PURE__*/__webpack_require__.n(_swimlane_ngx_charts_release__WEBPACK_IMPORTED_MODULE_15__);
/* harmony import */ var d3_shape__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! d3-shape */ "../../node_modules/d3-shape/src/index.js");
/* harmony import */ var d3_scale__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! d3-scale */ "../../node_modules/d3-scale/index.js");
/* harmony import */ var _swimlane_ngx_charts__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @swimlane/ngx-charts */ "../../node_modules/@swimlane/ngx-charts/release/esm.js");
/* harmony import */ var ng5_slider__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ng5-slider */ "../../node_modules/ng5-slider/esm5/ng5-slider.js");
/* harmony import */ var gojs__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! gojs */ "../../node_modules/gojs/release/go.js");
/* harmony import */ var gojs__WEBPACK_IMPORTED_MODULE_20___default = /*#__PURE__*/__webpack_require__.n(gojs__WEBPACK_IMPORTED_MODULE_20__);
/* harmony import */ var _angular_animations__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! @angular/animations */ "../../node_modules/@angular/animations/fesm5/animations.js");























/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/service-constant.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var APP_DATA = 'getAppData';
/** @type {?} */
var LOGIN_PARAMS = {
    commandName: 'GetTerms',
    categoriesTerms: {
        category: 'terms'
    },
    categories: {
        category: 'login'
    }
};
/** @type {?} */
var ERROR_PARAMS = {
    commandName: 'GetTerms',
    categoriesTerms: {
        category: 'terms'
    },
    categoriesError: {
        category: 'error'
    }
};
/** @type {?} */
var USER_PARAMS = {
    commandName: 'getUserData',
    app: {
        appType: 'SOMAIN'
    }
};
/** @type {?} */
var UPDATE_USER_PREFERENCE_ACTION_PARAMS = {
    endPoint: true,
    url: common_library__WEBPACK_IMPORTED_MODULE_2__["APIEndPoints"].USER_PREFERENCE
};
/** @type {?} */
var USER_ACTION_PARAMS = {
    endPoint: true
};
/** @type {?} */
var GSK_LOGO_URL = 'assets/images/';
/** @type {?} */
var ALERT_CONFIRM_URL = 'assets/images/alertConfirm.png';
/** @type {?} */
var UPDATE_CHART_PREFERNCE = {
    commandName: 'updateUserPreference',
    appType: 'SOMAIN',
    category: 'PreferenceChartLegendPlan'
};
/** @type {?} */
var FILTER_PARAMS = {
    commandName: 'getFilterData',
    filterType: {
        HSTDY: 'HSTDY',
        STDY: 'STDY'
    },
    filterCriteria: {
        THERAPY: 'THERAPY',
        INDICN: 'INDICN',
        PRGM: 'PRGM',
        ASSET: 'ASSET'
    }
};
/** @type {?} */
var STUDYSUMMARY_COMMAND = {
    commandName: 'GetStudySummary'
};
/** @type {?} */
var NA_TOOLTIP = 'Previously approved plans and their adjustments do not contain projections';
/** @type {?} */
var REF_CARD_HEAD = 'Reference Card';
/** @type {?} */
var STUDYSUMMARY_TARGET = 'target';
/** @type {?} */
var UNIQUECOHORT = 1;
/** @type {?} */
var UNIQUE = 1;
/** @type {?} */
var WEEKS = "weeks";
/** @type {?} */
var NOVALUE = "-";
/** @type {?} */
var APPROVE = 'Approve';
/** @type {?} */
var EDIT = 'Edit';
/** @type {?} */
var VIEW = 'View';
/** @type {?} */
var LABEL_ACTUAL = 'actual';
/** @type {?} */
var SingleStudy = {
    commandName: 'target'
};
/** @type {?} */
var MODULE_CONSTANTS = {
    MODULE_RUNWAY: 1,
    MODULE_STUYD_LIST: 2,
    MODULE_PLANNING: 3,
    MODULE_STUDY: 4,
    MODULE_SITES: 5,
    MODULE_SCENARIO: 6,
    MODULE_DATA_MANAGEMENT: 7,
    MODULE_COUNTRY: 9,
    MODULE_HISTORICAL: 18,
    MODULE_TEMPLATES: 10,
    MODULE_COST: 16,
    MODULE_ENROLLMENT: 27,
    MODULE_ADDMAP_COHORT: 28,
    MODULE_GRANT_PLAN: 31,
    MODULE_NEW_PLANNING: 35,
    MODULE_NEW_STUDY: 36,
    MODULE_NEW_COUNTRIES: 37,
    MODULE_NEW_SITES: 38
};
/** @type {?} */
var PAGE_CONSTANTS = [
    {
        id: 1,
        spaName: '',
        routeUrl: '',
        isMultiStudyView: true
    },
    {
        id: 2,
        spaName: '',
        routeUrl: '',
        isMultiStudyView: true
    },
    {
        id: 3,
        spaName: '',
        routeUrl: '',
        isMultiStudyView: false
    },
    // {
    //   id: 4,
    //   spaName: '',
    //   routeUrl: '',
    //   isMultiStudyView: false
    // },
    // {
    //   id: 5,
    //   spaName: '',
    //   routeUrl: '',
    //   isMultiStudyView: false
    // },
    {
        id: 6,
        spaName: '',
        routeUrl: ''
    },
    {
        id: 7,
        spaName: '',
        routeUrl: ''
    },
    // {
    //   id: 9,
    //   spaName: '',
    //   routeUrl: '',
    //   isMultiStudyView: false
    // },
    {
        id: 10,
        spaName: '',
        routeUrl: ''
    },
    {
        id: 16,
        spaName: '',
        routeUrl: ''
    },
    {
        id: 18,
        spaName: '',
        routeUrl: '',
        isMultiStudyView: true
    },
    {
        id: 27,
        spaName: '',
        routeUrl: ''
    },
    {
        id: 28,
        spaName: '',
        routeUrl: ''
    },
    {
        id: 31,
        spaName: '',
        routeUrl: ''
    },
    {
        id: 35,
        spaName: 'app1',
        routeUrl: '/new-plans',
        isMultiStudyView: false,
        isAngularModule: true
    },
    {
        id: 4,
        spaName: 'app2',
        routeUrl: '/new-study',
        isMultiStudyView: false,
        isAngularModule: true
    },
    {
        id: 9,
        spaName: 'app3',
        routeUrl: '/new-countries',
        isMultiStudyView: false,
        isAngularModule: true
    },
    {
        id: 5,
        spaName: 'app4',
        routeUrl: '/new-sites',
        isMultiStudyView: false,
        isAngularModule: true
    },
    {
        id: 39,
        spaName: 'login',
        routeUrl: '/new-login',
        isMultiStudyView: false,
        isAngularModule: true
    },
    {
        id: 'STDLST',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'RNWYCHRT',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'MNGHILST',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'VSTRMETC',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'VENRLMETC',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'VSCRNMTC',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'VRNREMTC',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'VINVSCRD',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'MNGPLNTEM',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'MNGRTATEM',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'ENROVRW',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'STDMLSTN',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'ENTRCSTOV',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'DFENTRCST',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'CNTRPERF',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'ENRODET',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'CNTRDM',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'SCRCRD',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'MNGPLN',
        spaName: 'app1',
        routeUrl: '/new-plans',
        isMultiStudyView: false
    },
    {
        id: 'MNGCNTRY',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'DFNCNTPLN',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'MCRA',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'APPRPLN',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'DFCNPLNCST',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'INTERIM',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'DFNSOLVE',
        spaName: '',
        routeUrl: ''
    },
    {
        id: 'SSV',
        spaName: '',
        routeUrl: ''
    }
];
/** @type {?} */
var INVALID_URL = "Invalid url";
/** @type {?} */
var MENU = {
    studyList: {
        name: 'AllStudiesTab',
        url: '/studyList',
        moduleName: 'MODULE_STUYD_LIST'
    },
    runWay: {
        name: 'RecruitmentTab',
        url: '/runway',
        moduleName: 'MODULE_RUNWAY'
    },
    ant: {
        name: 'historicalAnalysisTab',
        url: '/ant',
        moduleName: 'MODULE_HISTORICAL'
    },
    eb: {
        name: 'EBTab',
        url: '/eb',
        moduleName: 'MODULE_ENROLLMENT'
    },
    password: {
        name: 'HeaderChangePassword',
        url: '/password'
    },
    help: {
        name: 'HeaderProfileHelp',
        url: '/help'
    },
    about: {
        name: 'HeaderAboutStudyOptimizer',
        url: '/about'
    },
    logout: {
        name: 'HeaderLogout',
        url: '/logout'
    },
    // study: {
    //   name: 'StudyViewsTab',
    //   url: '/study',
    //   moduleName: 'MODULE_STUDY'
    // },
    // countries: {
    //   name: 'CountryViewsTab',
    //   url: '/countries',
    //   moduleName: 'MODULE_COUNTRY'
    // },
    // sites: {
    //   name: 'SiteTab',
    //   url: '/sites',
    //   moduleName: 'MODULE_SITES'
    // },
    plans: {
        name: 'PlansTab',
        url: '/plan',
        moduleName: 'MODULE_PLANNING'
    },
    newStudy: {
        name: 'StudyViewsTab',
        url: '/newStudy',
        moduleName: 'MODULE_STUDY'
    },
    newCountries: {
        name: 'CountryViewsTab',
        url: '/newCountries',
        moduleName: 'MODULE_COUNTRY'
    },
    newSites: {
        name: 'SiteTab',
        url: '/newSites',
        moduleName: 'MODULE_SITES'
    },
    newPlans: {
        name: 'PlansTab',
        url: '/newPlans',
        moduleName: 'MODULE_NEW_PLANNING'
    },
    logo: {
        name: 'logoName'
    },
    appInfo: {
        name: 'appInfo'
    }
};
/** @type {?} */
var PASSWORD = {
    currentpsw: 'CurrentPassword',
    newpsw: 'NewPassword',
    confirmpsw: 'ConfirmPassword',
    lengthRule: 'LENGHTHRULE',
    mixCharRule: 'MIXCHARRULENEWPLANS',
    changePassword: 'ChangePassword',
    cancel: 'Cancel',
    ok: 'OK'
};
/** @type {?} */
var ABOUT = {
    aboutBoxTitle: 'aboutBoxTitle',
    aboutBoxVersion: 'aboutBoxVersion',
    aboutBoxPatch: 'aboutBoxPatch',
    aboutBoxDisclaimer: 'aboutBoxDisclaimer'
};
/** @type {?} */
var COMMAND = {
    PLANLIST: 'GetPlanList',
    STUDYSUMMARY: 'GetStudySummary',
    UPDATEUSAGEMETRICS: 'updateUsageMetrics',
    CREATE_PLAN_TEMPLATE: 'createPlanTemplate',
    GET_TEMPLATE_LIST: 'getTemplateList',
    COPYPLAN: 'copyStudyPlan',
    DELTEPLAN: 'deleteStudyPlan',
    APPROVEPLAN: 'approvePlan',
    APPROVEADJUSTMENT: 'approveAdjustStudyPlan',
    KEEPUSERSESSIONALIVE: 'keepUserSessionAlive',
    GET_STUDY_TAGS: 'getStudyTags',
    GET_STUDY_TAGS_LIST: 'getStudyTagList',
    STUDY_DETAILS: 'getStudyDetails',
    STUDY_SETTINGS: 'getStudySettings',
    GET_FILTER_COUNTRY_DATA: 'GetFilterCountryData',
    GET_COHORTS_DETAILS: 'getCohortsDetails',
    UPDATE_COUNTRY_NOTES: 'updateCountryNotes',
    GETALLCURVES: 'GetAllCurves',
    GETALLMILESTONES: 'getAllMileStones'
};
/** @type {?} */
var DIALOG_CONFIG = {
    COPY_PLAN: {
        ID: 'CopyPlanDialog',
        WIDTH: '450px',
        PANEL_CLASS: 'copy-plan-dialog'
    },
    DELETE_PLAN: {
        ID: 'DeletePlanDialog',
        WIDTH: '310px',
        HEIGHT: '180px',
        PANEL_CLASS: 'delete-plan-confirmation-dialog'
    },
    APPROVE_PLAN: {
        ID: 'ApprovePlanDialog',
        WIDTH: '450px',
        PANEL_CLASS: 'approve-plan-dialog'
    },
    COPY_PLAN_SUCCESS: {
        WIDTH: '365px',
        PANEL_CLASS: 'copy-plan-success-dialog'
    },
    CONFIRM_UNSAVED_DATA: {
        WIDTH: '310px',
        HEIGHT: '190',
        PANEL_CLASS: 'unsaved-data-confirmation-dialog'
    },
    MC_ERROR_DIALOG: {
        ID: 'MCErrorDialog',
        WIDTH: '350px',
        PANEL_CLASS: 'mc-error-dialog'
    }
};
/** @type {?} */
var USER_PREFERENCES = {
    commandName: 'updateUserPreference'
};
/** @type {?} */
var ALERT_TYPE = {
    CancelLabel: 'CancelLabel',
    OkLabel: 'OkLabel',
    OK: 'OK',
    YesLabel: 'YesLabel',
    NoLabel: 'NoLabel'
};
/** @type {?} */
var DISPATCH_URL = window.location.origin + "/dv/StudyOptimizer/dispatch";
/** @type {?} */
var PAGE_CONSTANTS_NEW = [
    {
        url: 'card',
        name: 'PLANCARD'
    },
    {
        url: 'grid',
        name: 'PLANGRID'
    },
    {
        url: 'rate-adjustments',
        name: 'NMCRA'
    },
    {
        url: 'plan-properties',
        name: 'PLANPROP'
    },
    {
        url: 'plan-design',
        name: 'PLANDSGN'
    },
    {
        url: 'countries',
        name: 'NCTRYDTL'
    },
    {
        url: 'reports',
        name: 'NREPORTS'
    }
];
/** @type {?} */
var MILESTONE_GRAPHS = {
    TFSI_LABEL: 'TFSI:Target First Site Initiated',
    TFSI_SHORT: 'TFSI',
    TFSI: 'Target First Site Initiated',
    TLSR_LABEL: 'TLSR:Target Last Subject Randomized',
    TLSR_SHORT: 'TLSR',
    TLSR: 'Target Last Subject Randomized',
    PFSI_LABEL: 'PFSI:Planned First Site Initiated:',
    PFSI_SHORT: 'PFSI',
    PFSI: 'Planned First Site Initiated',
    PFSR_LABEL: 'PFSR:Planned First Subject Randomized',
    PFSR_SHORT: 'PFSR',
    PFSR: 'Planned First Subject Randomized',
    PLSI_LABEL: 'PLSI:Planned Last Site Initiated',
    PLSI_SHORT: 'PLSI',
    PLSI: 'Planned Last Site Initiated',
    PLSR_LABEL: 'PFSR:Planned Last Subject Randomized',
    PLSR_SHORT: 'PLSR',
    PLSR: 'Planned Last Subject Randomized',
    DAYS_FROM_TFSI: ' days from TFSI',
    DAYS_FROM_TLSR: ' days from TLSR',
    SPACES: '     '
};
/** @type {?} */
var REQUIRED_ERROR_OBJ = {
    required: true
};
/** @type {?} */
var NEWPLANTAB = 'NEWPLANTAB';
/** @type {?} */
var CUE_CARD_HEADER_LABELS = {
    sourceTargets: 'Source Targets',
    studyTargets: 'Study Targets',
    worldwide: 'Worldwide',
    'parent Plan': 'Parent Plan',
    actuals: 'Actuals',
    projections: 'Projections',
    country: 'Country',
};
/** @type {?} */
var EMPTY = '';
/** @type {?} */
var DIALOG_ACIONS = {
    OK: 'OK',
    CANCEL: 'CANCEL',
    CONTINUE: 'CONTINUE',
    APPLY: 'APPLY'
};
/** @type {?} */
var MIN_MAX_RANGE = {
    MAX_CHAR: 255,
};
/** @type {?} */
var ZERO = 0;
/** @type {?} */
var GEO_LEVELS = {
    COUNTRY: 'Country',
    WW: 'WW',
    REGION: 'Region'
};
/** @type {?} */
var DEFAULT_PREFERENCE_GRID_COLUMN = {
    PreferenceGridColumns: {},
    appType: 'SOMAIN',
    category: 'PreferenceGridColumns'
};
/** @type {?} */
var SNACKBAR_POSITIVE = 'positive-snackbar';
/** @type {?} */
var SNACKBAR_NEGATIVE = 'error-snackbar';
/** @type {?} */
var ICON_POSITIVE = 'assets/images/manageplans/icon-positive.png';
/** @type {?} */
var ICON_NEGATIVE = 'assets/images/manageplans/icon-error.png';
/** @type {?} */
var MESSAGETYPE_POSITIVE = 'positive';
/** @type {?} */
var MESSAGETYPE_NEGATIVE = 'negative';

/**
 * @fileoverview added by tsickle
 * Generated from: lib/enums/preference-category.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PreferenceCategory = {
    PreferenceBookmarks: "PreferenceBookmarks",
    PreferenceChartLegendPlan: "PreferenceChartLegendPlan",
    PreferenceChartLegendStudy: "PreferenceChartLegendStudy",
    PreferenceGridColumns: "PreferenceGridColumns",
    PreferenceLayout: "PreferenceLayout",
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/ctos-utils.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment = moment__WEBPACK_IMPORTED_MODULE_13__;
/**
 * CTOS util - Class containing static methods that are specific to the SO domain such as computations of enrolment parameters
 */
var  /**
 * CTOS util - Class containing static methods that are specific to the SO domain such as computations of enrolment parameters
 */
CTOSUtil = /** @class */ (function () {
    function CTOSUtil() {
    }
    /**
     * Computes and returns the maximum enrollment for the specified enrollment target and over recruitment percent
     *
     * @param enrollmentTarget
     * @param overRecruitmentPercent
     * @returns (string | number)
     * @memberof CTOSUtil
     */
    /**
     * Computes and returns the maximum enrollment for the specified enrollment target and over recruitment percent
     *
     * \@memberof CTOSUtil
     * @param {?} enrollmentTarget
     * @param {?} overRecruitmentPercent
     * @return {?} (string | number)
     */
    CTOSUtil.computeMaximumEnrollment = /**
     * Computes and returns the maximum enrollment for the specified enrollment target and over recruitment percent
     *
     * \@memberof CTOSUtil
     * @param {?} enrollmentTarget
     * @param {?} overRecruitmentPercent
     * @return {?} (string | number)
     */
    function (enrollmentTarget, overRecruitmentPercent) {
        /** @type {?} */
        var maximumEnrollment;
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(enrollmentTarget, true)) {
            if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(overRecruitmentPercent, true)) {
                maximumEnrollment = Math.floor(enrollmentTarget + ((overRecruitmentPercent * enrollmentTarget) / 100));
            }
            else {
                maximumEnrollment = enrollmentTarget;
            }
        }
        if (!common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(maximumEnrollment, true)) {
            maximumEnrollment = '';
        }
        return maximumEnrollment;
    };
    /**
     * Computes and returns the randomization rate for the specified screening rate and screen failure percentage
     *
     * @param SR
     * @param SFR
     * @returns (string | number)
     * @memberof CTOSUtil
     */
    /**
     * Computes and returns the randomization rate for the specified screening rate and screen failure percentage
     *
     * \@memberof CTOSUtil
     * @param {?} SR
     * @param {?} SFR
     * @param {?=} formatValue
     * @return {?} (string | number)
     */
    CTOSUtil.computeRR = /**
     * Computes and returns the randomization rate for the specified screening rate and screen failure percentage
     *
     * \@memberof CTOSUtil
     * @param {?} SR
     * @param {?} SFR
     * @param {?=} formatValue
     * @return {?} (string | number)
     */
    function (SR, SFR, formatValue) {
        if (formatValue === void 0) { formatValue = true; }
        /** @type {?} */
        var RR = null;
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(SR, true)) {
            if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(SFR, true)) {
                RR = SR * (1 - SFR / 100);
            }
            else {
                RR = SR;
            }
        }
        else {
            RR = '';
        }
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(RR, true) && formatValue) {
            RR = common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].formatDecimal(RR, '0.1-3');
        }
        return RR;
    };
    /**
     * Computes and returns the screening rate for the specified randomization rate and screen failure percentage
     *
     * @param RR
     * @param SFR
     * @returns (string | number)
     * @memberof CTOSUtil
     */
    /**
     * Computes and returns the screening rate for the specified randomization rate and screen failure percentage
     *
     * \@memberof CTOSUtil
     * @param {?} RR
     * @param {?} SFR
     * @return {?} (string | number)
     */
    CTOSUtil.computeSR = /**
     * Computes and returns the screening rate for the specified randomization rate and screen failure percentage
     *
     * \@memberof CTOSUtil
     * @param {?} RR
     * @param {?} SFR
     * @return {?} (string | number)
     */
    function (RR, SFR) {
        /** @type {?} */
        var SR = null;
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(RR, true)) {
            if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(SFR, true)) {
                SR = RR / (1 - SFR / 100);
            }
            else {
                SR = RR;
            }
        }
        else {
            SR = '';
        }
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(SR, true)) {
            SR = common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].formatDecimal(SR, '0.1-3');
        }
        return SR;
    };
    /**
     * Computes and returns the active number of sites for the specified total number of sites and actively screening sites percentage
     *
     * @param numSites
     * @param SAS
     * @returns (string | number)
     * @memberof CTOSUtil
     */
    /**
     * Computes and returns the active number of sites for the specified total number of sites and actively screening sites percentage
     *
     * \@memberof CTOSUtil
     * @param {?} numSites
     * @param {?} SAS
     * @return {?} (string | number)
     */
    CTOSUtil.computeActiveSites = /**
     * Computes and returns the active number of sites for the specified total number of sites and actively screening sites percentage
     *
     * \@memberof CTOSUtil
     * @param {?} numSites
     * @param {?} SAS
     * @return {?} (string | number)
     */
    function (numSites, SAS) {
        /** @type {?} */
        var value = '';
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(numSites, true) && common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(SAS, true)) {
            value = Math.floor(numSites * (SAS / 100));
            if (!common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(value, true)) {
                value = '';
            }
        }
        return value;
    };
    /**
     * Computes and returns the actively screening sites percentage for the specified total number of sites and active number of sites
     *
     * @param numSites
     * @param activeSites
     * @returns (string | number)
     * @memberof CTOSUtil
     */
    /**
     * Computes and returns the actively screening sites percentage for the specified total number of sites and active number of sites
     *
     * \@memberof CTOSUtil
     * @param {?} numSites
     * @param {?} activeSites
     * @return {?} (string | number)
     */
    CTOSUtil.computeSAS = /**
     * Computes and returns the actively screening sites percentage for the specified total number of sites and active number of sites
     *
     * \@memberof CTOSUtil
     * @param {?} numSites
     * @param {?} activeSites
     * @return {?} (string | number)
     */
    function (numSites, activeSites) {
        /** @type {?} */
        var value = '';
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(numSites, true)) {
            value = (activeSites / numSites) * 100;
            if (!common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(value, true)) {
                value = '';
            }
        }
        return value;
    };
    /**
     * Computes and returns the first subject screening date for the specified first site initiation date and
     * the number of days from first site initiation to first subject screening
     *
     * @param FSI
     * @param SITOFSSDAYS
     * @returns momentNS.Moment
     * @memberof CTOSUtil
     */
    /**
     * Computes and returns the first subject screening date for the specified first site initiation date and
     * the number of days from first site initiation to first subject screening
     *
     * \@memberof CTOSUtil
     * @param {?} FSI
     * @param {?} SITOFSSDAYS
     * @return {?} momentNS.Moment
     */
    CTOSUtil.computeFSS = /**
     * Computes and returns the first subject screening date for the specified first site initiation date and
     * the number of days from first site initiation to first subject screening
     *
     * \@memberof CTOSUtil
     * @param {?} FSI
     * @param {?} SITOFSSDAYS
     * @return {?} momentNS.Moment
     */
    function (FSI, SITOFSSDAYS) {
        /** @type {?} */
        var FSS = null;
        if (FSI && FSI.isValid() && common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(SITOFSSDAYS, true)) {
            FSS = FSI.add(SITOFSSDAYS, 'days');
        }
        return FSS;
    };
    /**
     * Returns the module information viz. module, page and study key
     *
     * @param  pageName
     * @param  studykey
     * @param  moduleName
     * @returns ModuleInfo
     * @memberof CTOSUtil
     */
    /**
     * Returns the module information viz. module, page and study key
     *
     * \@memberof CTOSUtil
     * @param {?=} pageName
     * @param {?=} studykey
     * @param {?=} moduleName
     * @return {?} ModuleInfo
     */
    CTOSUtil.getModuleInfo = /**
     * Returns the module information viz. module, page and study key
     *
     * \@memberof CTOSUtil
     * @param {?=} pageName
     * @param {?=} studykey
     * @param {?=} moduleName
     * @return {?} ModuleInfo
     */
    function (pageName, studykey, moduleName) {
        if (moduleName === void 0) { moduleName = NEWPLANTAB; }
        /** @type {?} */
        var Obj = {
            moduleName: moduleName
        };
        if (pageName) {
            Obj.pageName = pageName;
        }
        if (studykey) {
            Obj.studykey = studykey;
        }
        return Obj;
    };
    return CTOSUtil;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/chart-legend-mapping.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var mapping = {
    'studyTargets': 'Tar',
    'milestoneDates': 'Mil',
    'scrAll': '',
    'sitePlannedBase': 'BasPSI',
    'scrInterimAnalysis': '',
    'enrollPlannedAdj': 'AdjPSR',
    'totalActual': '',
    'enrollFrozenProj': 'FroPrSR',
    'siteFrozenProj': 'FroPrSI',
    'totalCurrentProj': '',
    'enrollUpdatedProj': 'UpdPrSR',
    'siteUpdatedProj': 'UpdPrSI',
    'totalPlannedApproved': '',
    'totalPlannedAdj': '',
    'scrActual': 'ActSS',
    'totalPlannedBase': '',
    'scrCurrentProj': 'CurPrSS',
    'enrollAll': '',
    'aheadBehindBox': 'aheadBehind',
    'scrFailureActual': 'ActSF',
    'enrollActual': 'ActPSR',
    'extendProjs': 'Ext',
    'scrPlannedApproved': 'AppPSS',
    'enrollCurrentProj': 'CurPrSR',
    'studyCostSymbols': '',
    'todaysDate': 'today',
    'scrPlannedBase': 'BasPSS',
    'dropoutActual': 'ActDO',
    'cohortPerf': '',
    'scrPlannedAdj': 'AdjPSS',
    'enrollPlanConfBoundary': '',
    'sitePlannedAdj': 'AdjPSI',
    'siteActual': 'ActSI',
    'scrFrozenProj': 'FroPrSS',
    'enrollPlannedApproved': 'AppPSR',
    'siteCurrentProj': 'CurPrSI',
    'sitePlannedApproved': 'AppPSI',
    'scrUpdatedProj': 'UpdPrSS',
    'enrollPlannedBase': 'BasPSR',
    'cbApproved': 'CBApp',
    'cbAdjustment': 'CBAdj',
    'cbCurrentProjection': 'CBCurPr',
    'cbBase': 'CBBas'
};
// to make Conf Boundary work for Flex and HTML separately
/** @type {?} */
var mappingPref = {
    'studyTargets': 'Tar',
    'milestoneDates': 'Mil',
    'scrAll': '',
    'sitePlannedBase': 'BasPSI',
    'scrInterimAnalysis': '',
    'enrollPlannedAdj': 'AdjPSR',
    'totalActual': '',
    'enrollFrozenProj': 'FroPrSR',
    'siteFrozenProj': 'FroPrSI',
    'totalCurrentProj': '',
    'enrollUpdatedProj': 'UpdPrSR',
    'siteUpdatedProj': 'UpdPrSI',
    'totalPlannedApproved': '',
    'totalPlannedAdj': '',
    'scrActual': 'ActSS',
    'totalPlannedBase': '',
    'scrCurrentProj': 'CurPrSS',
    'enrollAll': '',
    'aheadBehindBox': 'aheadBehind',
    'scrFailureActual': 'ActSF',
    'enrollActual': 'ActPSR',
    'extendProjs': 'Ext',
    'scrPlannedApproved': 'AppPSS',
    'enrollCurrentProj': 'CurPrSR',
    'studyCostSymbols': '',
    'todaysDate': 'today',
    'scrPlannedBase': 'BasPSS',
    'dropoutActual': 'ActDO',
    'cohortPerf': '',
    'scrPlannedAdj': 'AdjPSS',
    'enrollPlanConfBoundary': '',
    'sitePlannedAdj': 'AdjPSI',
    'siteActual': 'ActSI',
    'scrFrozenProj': 'FroPrSS',
    'enrollPlannedApproved': 'AppPSR',
    'siteCurrentProj': 'CurPrSI',
    'sitePlannedApproved': 'AppPSI',
    'scrUpdatedProj': 'UpdPrSS',
    'enrollPlannedBase': 'BasPSR',
    'cbApproved': 'CBApp',
    'cbAdjustment': 'CBAdj',
    'cbCurrentProjection': 'CBCurPr',
    'cbBase': 'CBBas'
};
/** @type {?} */
var reversemapping = {
    'Tar': 'studyTargets',
    'Mil': 'milestoneDates',
    'BasPSI': 'sitePlannedBase',
    'AdjPSR': 'enrollPlannedAdj',
    'FroPrSR': 'enrollFrozenProj',
    'FroPrSI': 'siteFrozenProj',
    'UpdPrSR': 'enrollUpdatedProj',
    'UpdPrSI': 'siteUpdatedProj',
    'ActSS': 'scrActual',
    'CurPrSS': 'scrCurrentProj',
    'ActSF': 'scrFailureActual',
    'ActPSR': 'enrollActual',
    'Ext': 'extendProjs',
    'AppPSS': 'scrPlannedApproved',
    'CurPrSR': 'enrollCurrentProj',
    'BasPSS': 'scrPlannedBase',
    'ActDO': 'dropoutActual',
    'AdjPSS': 'scrPlannedAdj',
    'AdjPSI': 'sitePlannedAdj',
    'ActSI': 'siteActual',
    'FroPrSS': 'scrFrozenProj',
    'AppPSR': 'enrollPlannedApproved',
    'CurPrSI': 'siteCurrentProj',
    'AppPSI': 'sitePlannedApproved',
    'UpdPrSS': 'scrUpdatedProj',
    'BasPSR': 'enrollPlannedBase',
    'CBBas': 'cbBase',
    'CBAdj': 'cbAdjustment',
    'CBApp': 'cbApproved',
    'CBCurPr': 'cbCurrentProjection',
    'aheadBehind': 'aheadBehindBox',
    'today': 'todaysDate'
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/user-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$1 = moment__WEBPACK_IMPORTED_MODULE_13__;
var UserDataService = /** @class */ (function () {
    /**
     * Creates an instance of user data service.
     * @param payloadCommandService
     * @param baseConnectionService
     */
    function UserDataService(payloadCommandService, baseConnectionService, logoutService, configurationService, serverStatusService) {
        this.payloadCommandService = payloadCommandService;
        this.baseConnectionService = baseConnectionService;
        this.logoutService = logoutService;
        this.configurationService = configurationService;
        this.serverStatusService = serverStatusService;
        this.userData = null;
        this.isLoggedIn = false;
        this._username = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        this.username$ = this._username.asObservable();
        this._logoFileName = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        this.logoFileName$ = this._logoFileName.asObservable();
        this._userPrefix = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        this.userPrefix$ = this._userPrefix.asObservable();
    }
    Object.defineProperty(UserDataService.prototype, "lastKeepAliveCallTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this._lastKeepAliveCallTime;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._lastKeepAliveCallTime = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserDataService.prototype, "coefficient", {
        get: /**
         * @return {?}
         */
        function () {
            return (/** @type {?} */ (this._coefficient));
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._coefficient = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserDataService.prototype, "isKeepAliveCallProceed", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isKeepAliveCallProceed;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._isKeepAliveCallProceed = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserDataService.prototype, "autoLogOutTime", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autoLogOutTime;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._autoLogOutTime = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserDataService.prototype, "sessionTimeOut", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sessionTimeOut;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._sessionTimeOut = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserDataService.prototype, "autoLogOutTimeBuffer", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autoLogOutTimeBuffer;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._autoLogOutTimeBuffer = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserDataService.prototype, "chartLegendPreference", {
        get: /**
         * @return {?}
         */
        function () {
            return this._chartLegendPreference;
        },
        set: /**
         * @param {?} o
         * @return {?}
         */
        function (o) {
            this._chartLegendPreference = o;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserDataService.prototype, "chartLegendPreferenceArr", {
        get: /**
         * @return {?}
         */
        function () {
            return this._chartLegendPreferenceArr;
        },
        set: /**
         * @param {?} o
         * @return {?}
         */
        function (o) {
            this._chartLegendPreferenceArr = o;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserDataService.prototype, "lastVisitedStudy", {
        get: /**
         * @return {?}
         */
        function () {
            return this.lastStudy;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.lastStudy = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserDataService.prototype, "userPrivileges", {
        get: /**
         * @return {?}
         */
        function () {
            return this.uPrivileges;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.uPrivileges = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} data
     * @return {?}
     */
    UserDataService.prototype.setUserPrivileges = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.userPrivileges = data;
    };
    /**
     * Sets username
     * @param username
     */
    /**
     * Sets username
     * @param {?} username
     * @return {?}
     */
    UserDataService.prototype.setUsername = /**
     * Sets username
     * @param {?} username
     * @return {?}
     */
    function (username) {
        this._username.next(username);
    };
    /**
     * Sets logo file name
     * @param filename
     */
    /**
     * Sets logo file name
     * @param {?} filename
     * @return {?}
     */
    UserDataService.prototype.setLogoFileName = /**
     * Sets logo file name
     * @param {?} filename
     * @return {?}
     */
    function (filename) {
        this._logoFileName.next(filename);
    };
    /**
     * Sets user prefix
     */
    /**
     * Sets user prefix
     * @param {?} username
     * @return {?}
     */
    UserDataService.prototype.setUserPrefix = /**
     * Sets user prefix
     * @param {?} username
     * @return {?}
     */
    function (username) {
        /** @type {?} */
        var prefix = common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].getNameInitials(username, ' ');
        this._userPrefix.next(prefix);
    };
    /**
     * Gets user data
     * @param params
     * @param [cacheType]
     * @returns user data
     */
    /**
     * Gets user data
     * @param {?} params
     * @param {?=} actionParam
     * @return {?} user data
     */
    UserDataService.prototype.getUserData = /**
     * Gets user data
     * @param {?} params
     * @param {?=} actionParam
     * @return {?} user data
     */
    function (params, actionParam) {
        actionParam = !actionParam ? (/** @type {?} */ ({})) : actionParam;
        actionParam.cacheKey = common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].UserDataKey;
        actionParam.cacheType = common_library__WEBPACK_IMPORTED_MODULE_2__["CacheType"].nonsticky;
        actionParam.storeType = common_library__WEBPACK_IMPORTED_MODULE_2__["StoreType"].InMemory;
        actionParam.encryption = common_library__WEBPACK_IMPORTED_MODULE_2__["EncryptionAction"].encrypt;
        actionParam.cmdName = ''; // reset cmd name
        actionParam.xmlRequest = '';
        actionParam.url = common_library__WEBPACK_IMPORTED_MODULE_2__["APIEndPoints"].USER_DATA;
        actionParam.isSSOEndPoint = false;
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var moduleInfo = CTOSUtil.getModuleInfo('PLANS');
        if (actionParam.endPoint) {
            actionParam.url = common_library__WEBPACK_IMPORTED_MODULE_2__["APIEndPoints"].USER_DATA;
        }
        /** @type {?} */
        var userDataPayload;
        if (actionParam.endPoint) {
            actionParam.url = common_library__WEBPACK_IMPORTED_MODULE_2__["APIEndPoints"].USER_DATA;
            userDataPayload = self.payloadCommandService.getApiRequest(params.commandName, params.app, null, moduleInfo);
            return self.baseConnectionService
                .send(userDataPayload, actionParam)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
             * @param {?} resp
             * @return {?}
             */
            function (resp) {
                if (resp.result === common_library__WEBPACK_IMPORTED_MODULE_2__["COMMON"].RESULT_OK) {
                    self.userData = resp;
                    self.isLoggedIn = true;
                    self.setUsername(self.userData.user.name);
                    self.setLogoFileName(self.userData.user.logoFileName);
                    self.setStudyKey(self.userData.user.preferences.userPreferences);
                    self.chartLegendPreference = self.setChartLegendPreference(self.userData.user.preferences.userPreferences);
                    self.chartLegendPreferenceArr = self.createLegendMap(self.chartLegendPreference);
                    self.setUserPrivileges(self.userData.user.privileges.module);
                    return self.userData;
                }
                else {
                    self.userData = null;
                    self.isLoggedIn = false;
                    return new common_library__WEBPACK_IMPORTED_MODULE_2__["ApplicationError"](resp.error.message, resp.error.errorCode);
                }
            })));
        }
        else {
            userDataPayload = self.payloadCommandService.getCommandDetails(params.commandName, params.app, null, null, moduleInfo);
            return self.baseConnectionService
                .sendRequest(userDataPayload, actionParam)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
             * @param {?} resp
             * @return {?}
             */
            function (resp) {
                if (resp.result === common_library__WEBPACK_IMPORTED_MODULE_2__["COMMON"].RESULT_OK) {
                    self.userData = resp;
                    self.isLoggedIn = true;
                    self.setUsername(self.userData.user.name);
                    self.setLogoFileName(self.userData.user.logoFileName);
                    self.setStudyKey(self.userData.user.preferences.userPreferences);
                    self.chartLegendPreference = self.setChartLegendPreference(self.userData.user.preferences.userPreferences);
                    self.chartLegendPreferenceArr = self.createLegendMap(self.chartLegendPreference);
                    self.setUserPrivileges(self.userData.user.privileges.module);
                    return self.userData;
                }
                else {
                    self.userData = null;
                    self.isLoggedIn = false;
                    return new common_library__WEBPACK_IMPORTED_MODULE_2__["ApplicationError"](resp.error.message, resp.error.errorCode);
                }
            })));
        }
        // } else {
        // return of(self.userData);
        // }
    };
    /**
     * @param {?} changedPref
     * @param {?} chartLegendPreference
     * @param {?=} actionParam
     * @return {?}
     */
    UserDataService.prototype.updateChartLegendPreference = /**
     * @param {?} changedPref
     * @param {?} chartLegendPreference
     * @param {?=} actionParam
     * @return {?}
     */
    function (changedPref, chartLegendPreference, actionParam) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var preferenceObject = UPDATE_CHART_PREFERNCE;
        /** @type {?} */
        var categoryObject = {};
        categoryObject[preferenceObject.category] =
            preferenceObject[preferenceObject.category];
        /** @type {?} */
        var tempObject = {
            userPreference: {
                params: {
                    appType: preferenceObject.appType,
                    category: preferenceObject.category,
                }
            }
        };
        /** @type {?} */
        var userPreferencesPayload = this.payloadCommandService.getCommandDetails(UPDATE_CHART_PREFERNCE.commandName, null, null, tempObject);
        /** @type {?} */
        var baseParam = {};
        if (!actionParam) {
            actionParam = baseParam;
            actionParam.dependencyList = [common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].UserDataKey];
        }
        /** @type {?} */
        var req = userPreferencesPayload.xmlRequest;
        /** @type {?} */
        var newReq = req.replace('</userPreference>', this.CreateCDATAObj(changedPref, chartLegendPreference)
            + '</userPreference>');
        userPreferencesPayload.xmlRequest = newReq;
        return this.baseConnectionService.sendRequest(userPreferencesPayload, actionParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
         * @param {?} resp
         * @return {?}
         */
        function (resp) {
            if (resp.result === common_library__WEBPACK_IMPORTED_MODULE_2__["COMMON"].RESULT_OK) {
                return resp;
            }
            else {
                return new common_library__WEBPACK_IMPORTED_MODULE_2__["ApplicationError"](resp.error.message, resp.error.errorCode);
            }
        })));
    };
    /**
     * Gets user name
     * @returns
     */
    /**
     * Gets user name
     * @return {?}
     */
    UserDataService.prototype.getUserName = /**
     * Gets user name
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        if (self.userData && self.userData.result === 'OK') {
            return self.userData.user.name;
        }
    };
    /**
     * @return {?}
     */
    UserDataService.prototype.getUserId = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        if (self.userData && self.userData.result === 'OK') {
            return self.userData.user.id;
        }
    };
    /**
     * @return {?}
     */
    UserDataService.prototype.getLastVisitedStudyKey = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var preferenceBookmarks = this.getPreferenceBookmarks(this.getUserPreferences());
        if (preferenceBookmarks) {
            return preferenceBookmarks.lastVisitedStudy;
        }
        else {
            return null;
        }
    };
    /**
     * @return {?}
     */
    UserDataService.prototype.getUserPreferences = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var userPreferences;
        if (self.userData &&
            self.userData.result === 'OK' &&
            self.userData.hasOwnProperty('user') &&
            self.userData.user.hasOwnProperty('preferences') &&
            self.userData.user.preferences.hasOwnProperty('userPreferences') &&
            self.userData.user.preferences.userPreferences.length > 0) {
            // fetch preferences
            userPreferences = self.userData.user.preferences.userPreferences;
        }
        return userPreferences;
    };
    /**
     * @param {?} userPreferences
     * @return {?}
     */
    UserDataService.prototype.getPreferenceBookmarksIndex = /**
     * @param {?} userPreferences
     * @return {?}
     */
    function (userPreferences) {
        /** @type {?} */
        var preferenceBookmarksIndex;
        if (userPreferences.length > 0) {
            // find the PreferenceBookmarksIndex
            preferenceBookmarksIndex = userPreferences.findIndex((/**
             * @param {?} userpref
             * @return {?}
             */
            function (userpref) {
                return userpref.category === 'PreferenceBookmarks';
            }));
        }
        return preferenceBookmarksIndex;
    };
    /**
     * @param {?} userPreferences
     * @return {?}
     */
    UserDataService.prototype.getPreferenceBookmarks = /**
     * @param {?} userPreferences
     * @return {?}
     */
    function (userPreferences) {
        /** @type {?} */
        var preferenceBookmarks;
        if (userPreferences && userPreferences.length > 0) {
            /** @type {?} */
            var preferenceBookmarksIndex = this.getPreferenceBookmarksIndex(userPreferences);
            // tslint:disable-next-line:prefer-const
            if (preferenceBookmarksIndex > -1) {
                preferenceBookmarks = userPreferences[preferenceBookmarksIndex].PreferenceBookmarks;
            }
        }
        return preferenceBookmarks;
    };
    /**
     * @return {?}
     */
    UserDataService.prototype.getMruStudyList = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var preferenceBookmarks = this.getPreferenceBookmarks(this.getUserPreferences());
        if (preferenceBookmarks !== undefined && preferenceBookmarks.hasOwnProperty('mruStudyList')) {
            return preferenceBookmarks.mruStudyList.toString();
        }
        return '';
    };
    // updateUserPreference(preferenceObject, actionParam?: Action): Observable<any> {
    //   // tslint:disable-next-line:prefer-const
    //   let categoryObject = {};
    //   categoryObject[preferenceObject.category] =
    //     preferenceObject[preferenceObject.category];
    //   const tempObject = {
    //     userPreference: {
    //       params: {
    //         appType: preferenceObject.appType,
    //         category: preferenceObject.category,
    //         key: preferenceObject.key
    //       },
    //       value: !actionParam.endPoint ? JSON.stringify(categoryObject) : categoryObject
    //     }
    //   };
    //   const moduleInfo = CTOSUtil.getModuleInfo('PLANS');
    //   /* const baseParam: Action = {};
    //   if (!actionParam) {
    //     actionParam = baseParam;
    //   } */
    //   if (actionParam) {
    //     actionParam.dependencyList = [CacheKey.UserDataKey];
    //   }
    //   actionParam = !actionParam ? {} as Action : actionParam;
    //   if (actionParam.endPoint) {
    //     actionParam.url = APIEndPoints.USER_PREFERENCE;
    //     actionParam.httpMethod = HttpVerbs.put;
    //   }
    //   let userPreferencesPayload;
    //   if (actionParam.endPoint) {
    //     const params = tempObject.userPreference.params;
    //     userPreferencesPayload = this.payloadCommandService.getApiRequest(
    //       USER_PREFERENCES.commandName,
    //       params,
    //       null,
    //       moduleInfo,
    //       tempObject
    //     );
    //     return this.baseConnectionService.send(userPreferencesPayload, actionParam).pipe(
    //       map(resp => {
    //         if (resp.result === COMMON.RESULT_OK) {
    //           return resp;
    //         } else {
    //           return new ApplicationError(resp.error.message, resp.error.errorCode);
    //         }
    //       })
    //     );
    //   } else {
    //     userPreferencesPayload = this.payloadCommandService.getCommandDetails(
    //       USER_PREFERENCES.commandName,
    //       null,
    //       null,
    //       tempObject,
    //       moduleInfo
    //     );
    //     /* const baseParam: Action = {};
    //     if (!actionParam) {
    //       actionParam = baseParam;
    //       actionParam.dependencyList = [CacheKey.UserDataKey];
    //     } */
    //     return this.baseConnectionService.sendRequest(userPreferencesPayload, actionParam).pipe(
    //       map(resp => {
    //         if (resp.result === COMMON.RESULT_OK) {
    //           return resp;
    //         } else {
    //           return new ApplicationError(resp.error.message, resp.error.errorCode);
    //         }
    //       })
    //     );
    //   }
    // }
    // updateUserPreference(preferenceObject, actionParam?: Action): Observable<any> {
    //   // tslint:disable-next-line:prefer-const
    //   let categoryObject = {};
    //   categoryObject[preferenceObject.category] =
    //     preferenceObject[preferenceObject.category];
    //   const tempObject = {
    //     userPreference: {
    //       params: {
    //         appType: preferenceObject.appType,
    //         category: preferenceObject.category,
    //         key: preferenceObject.key
    //       },
    //       value: !actionParam.endPoint ? JSON.stringify(categoryObject) : categoryObject
    //     }
    //   };
    //   const moduleInfo = CTOSUtil.getModuleInfo('PLANS');
    //   /* const baseParam: Action = {};
    //   if (!actionParam) {
    //     actionParam = baseParam;
    //   } */
    //   if (actionParam) {
    //     actionParam.dependencyList = [CacheKey.UserDataKey];
    //   }
    //   actionParam = !actionParam ? {} as Action : actionParam;
    //   if (actionParam.endPoint) {
    //     actionParam.url = APIEndPoints.USER_PREFERENCE;
    //     actionParam.httpMethod = HttpVerbs.put;
    //   }
    //   let userPreferencesPayload;
    //   if (actionParam.endPoint) {
    //     const params = tempObject.userPreference.params;
    //     userPreferencesPayload = this.payloadCommandService.getApiRequest(
    //       USER_PREFERENCES.commandName,
    //       params,
    //       null,
    //       moduleInfo,
    //       tempObject
    //     );
    //     return this.baseConnectionService.send(userPreferencesPayload, actionParam).pipe(
    //       map(resp => {
    //         if (resp.result === COMMON.RESULT_OK) {
    //           return resp;
    //         } else {
    //           return new ApplicationError(resp.error.message, resp.error.errorCode);
    //         }
    //       })
    //     );
    //   } else {
    //     userPreferencesPayload = this.payloadCommandService.getCommandDetails(
    //       USER_PREFERENCES.commandName,
    //       null,
    //       null,
    //       tempObject,
    //       moduleInfo
    //     );
    //     /* const baseParam: Action = {};
    //     if (!actionParam) {
    //       actionParam = baseParam;
    //       actionParam.dependencyList = [CacheKey.UserDataKey];
    //     } */
    //     return this.baseConnectionService.sendRequest(userPreferencesPayload, actionParam).pipe(
    //       map(resp => {
    //         if (resp.result === COMMON.RESULT_OK) {
    //           return resp;
    //         } else {
    //           return new ApplicationError(resp.error.message, resp.error.errorCode);
    //         }
    //       })
    //     );
    //   }
    // }
    /**
     * @param {?} preferenceObject
     * @param {?=} actionParam
     * @return {?}
     */
    UserDataService.prototype.updateUserPreference = 
    // updateUserPreference(preferenceObject, actionParam?: Action): Observable<any> {
    //   // tslint:disable-next-line:prefer-const
    //   let categoryObject = {};
    //   categoryObject[preferenceObject.category] =
    //     preferenceObject[preferenceObject.category];
    //   const tempObject = {
    //     userPreference: {
    //       params: {
    //         appType: preferenceObject.appType,
    //         category: preferenceObject.category,
    //         key: preferenceObject.key
    //       },
    //       value: !actionParam.endPoint ? JSON.stringify(categoryObject) : categoryObject
    //     }
    //   };
    //   const moduleInfo = CTOSUtil.getModuleInfo('PLANS');
    //   /* const baseParam: Action = {};
    //   if (!actionParam) {
    //     actionParam = baseParam;
    //   } */
    //   if (actionParam) {
    //     actionParam.dependencyList = [CacheKey.UserDataKey];
    //   }
    //   actionParam = !actionParam ? {} as Action : actionParam;
    //   if (actionParam.endPoint) {
    //     actionParam.url = APIEndPoints.USER_PREFERENCE;
    //     actionParam.httpMethod = HttpVerbs.put;
    //   }
    //   let userPreferencesPayload;
    //   if (actionParam.endPoint) {
    //     const params = tempObject.userPreference.params;
    //     userPreferencesPayload = this.payloadCommandService.getApiRequest(
    //       USER_PREFERENCES.commandName,
    //       params,
    //       null,
    //       moduleInfo,
    //       tempObject
    //     );
    //     return this.baseConnectionService.send(userPreferencesPayload, actionParam).pipe(
    //       map(resp => {
    //         if (resp.result === COMMON.RESULT_OK) {
    //           return resp;
    //         } else {
    //           return new ApplicationError(resp.error.message, resp.error.errorCode);
    //         }
    //       })
    //     );
    //   } else {
    //     userPreferencesPayload = this.payloadCommandService.getCommandDetails(
    //       USER_PREFERENCES.commandName,
    //       null,
    //       null,
    //       tempObject,
    //       moduleInfo
    //     );
    //     /* const baseParam: Action = {};
    //     if (!actionParam) {
    //       actionParam = baseParam;
    //       actionParam.dependencyList = [CacheKey.UserDataKey];
    //     } */
    //     return this.baseConnectionService.sendRequest(userPreferencesPayload, actionParam).pipe(
    //       map(resp => {
    //         if (resp.result === COMMON.RESULT_OK) {
    //           return resp;
    //         } else {
    //           return new ApplicationError(resp.error.message, resp.error.errorCode);
    //         }
    //       })
    //     );
    //   }
    // }
    /**
     * @param {?} preferenceObject
     * @param {?=} actionParam
     * @return {?}
     */
    function (preferenceObject, actionParam) {
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var categoryObject = {};
        categoryObject[preferenceObject.category] =
            preferenceObject[preferenceObject.category];
        // const moduleInfo = CTOSUtil.getModuleInfo('PLANS');
        /** @type {?} */
        var moduleInfo = CTOSUtil.getModuleInfo('PLANS', this.getLastVisitedStudyKey());
        if (actionParam) {
            actionParam.dependencyList = [common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].UserDataKey];
        }
        actionParam = !actionParam ? (/** @type {?} */ ({})) : actionParam;
        /** @type {?} */
        var userPreferencesPayload;
        if (actionParam.endPoint) {
            /** @type {?} */
            var params = {
                appType: preferenceObject.appType,
                category: preferenceObject.category,
                key: preferenceObject.key
            };
            actionParam.url = common_library__WEBPACK_IMPORTED_MODULE_2__["APIEndPoints"].USER_PREFERENCE;
            actionParam.httpMethod = common_library__WEBPACK_IMPORTED_MODULE_2__["HttpVerbs"].put;
            /** @type {?} */
            var userPreferencesPayloadXml = JSON.stringify(categoryObject);
            /** @type {?} */
            var tempObject = {
                value: userPreferencesPayloadXml
            };
            userPreferencesPayload = this.payloadCommandService.getApiRequest(USER_PREFERENCES.commandName, params, null, moduleInfo, tempObject);
            return this.baseConnectionService.send(userPreferencesPayload, actionParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
             * @param {?} resp
             * @return {?}
             */
            function (resp) {
                if (resp.result === common_library__WEBPACK_IMPORTED_MODULE_2__["COMMON"].RESULT_OK) {
                    return resp;
                }
                else {
                    return new common_library__WEBPACK_IMPORTED_MODULE_2__["ApplicationError"](resp.error.message, resp.error.errorCode);
                }
            })));
        }
        else {
            /** @type {?} */
            var tempObject = {
                userPreference: {
                    params: {
                        appType: preferenceObject.appType,
                        category: preferenceObject.category,
                        key: preferenceObject.key
                    },
                    value: !actionParam.endPoint ? JSON.stringify(categoryObject) : categoryObject
                }
            };
            userPreferencesPayload = this.payloadCommandService.getCommandDetails(USER_PREFERENCES.commandName, null, null, tempObject, moduleInfo);
            /* const baseParam: Action = {};
            if (!actionParam) {
              actionParam = baseParam;
              actionParam.dependencyList = [CacheKey.UserDataKey];
            } */
            return this.baseConnectionService.sendRequest(userPreferencesPayload, actionParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
             * @param {?} resp
             * @return {?}
             */
            function (resp) {
                if (resp.result === common_library__WEBPACK_IMPORTED_MODULE_2__["COMMON"].RESULT_OK) {
                    return resp;
                }
                else {
                    return new common_library__WEBPACK_IMPORTED_MODULE_2__["ApplicationError"](resp.error.message, resp.error.errorCode);
                }
            })));
        }
    };
    /**
     * @param {?} userPreferences
     * @return {?}
     */
    UserDataService.prototype.setStudyKey = /**
     * @param {?} userPreferences
     * @return {?}
     */
    function (userPreferences) {
        /** @type {?} */
        var lastSelectedStudy = userPreferences.map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            return data.PreferenceBookmarks;
        })).filter((/**
         * @param {?} r
         * @return {?}
         */
        function (r) { return r; })).map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.lastVisitedStudy; })).toString();
        this.lastVisitedStudy = lastSelectedStudy;
    };
    /**
     * @param {?} userPreferences
     * @return {?}
     */
    UserDataService.prototype.setChartLegendPreference = /**
     * @param {?} userPreferences
     * @return {?}
     */
    function (userPreferences) {
        for (var i = 0; i < userPreferences.length; i++) {
            if (userPreferences[i].category === 'PreferenceChartLegendPlan') {
                return userPreferences[i].PreferenceChartLegendPlan;
            }
        }
    };
    /**
     * @param {?} o
     * @return {?}
     */
    UserDataService.prototype.createLegendMap = /**
     * @param {?} o
     * @return {?}
     */
    function (o) {
        /** @type {?} */
        var preference = [];
        for (var prop in o) {
            if (mapping[prop] !== '' && o[prop] === true) {
                preference.push(mapping[prop]);
            }
            else if (o[prop] === true) {
                preference.push(prop);
            }
        }
        // flex has selected, display all
        if (preference.indexOf('CB') > -1 && !o.hasOwnProperty('cbApproved')) {
            o['cbApproved'] = true;
            o['cbAdjustment'] = true;
            o['cbCurrentProjection'] = true;
            o['cbBase'] = true;
            // spl cases for remove duplicate conf boundary
            /** @type {?} */
            var CBList = ['CBApp', 'CBBas', 'CBAdj', 'CBCurPr'];
            for (var i = 0; i < CBList.length; i++) {
                /** @type {?} */
                var idx = preference.indexOf(CBList[i]);
                if (idx > -1) {
                    preference.splice(idx, 1);
                }
            }
            preference = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(preference, CBList);
        }
        return preference;
    };
    /**
     * @param {?} moduleId
     * @return {?}
     */
    UserDataService.prototype.getUserPrivilegesForModule = /**
     * @param {?} moduleId
     * @return {?}
     */
    function (moduleId) {
        /** @type {?} */
        var privilegesForModule;
        /** @type {?} */
        var userPrivileges = this.getUserPrivilages();
        /** @type {?} */
        var filteredUserPrivileges;
        if (Array.isArray(userPrivileges)) {
            filteredUserPrivileges = userPrivileges.filter((/**
             * @param {?} privilegeObject
             * @return {?}
             */
            function (privilegeObject) {
                if (privilegeObject.id === moduleId) {
                    return privilegeObject;
                }
            }));
        }
        else {
            if (userPrivileges['id'] === moduleId) {
                filteredUserPrivileges.push(userPrivileges);
            }
        }
        if (filteredUserPrivileges && filteredUserPrivileges.length > 0) {
            privilegesForModule = filteredUserPrivileges[0].privilege;
        }
        else {
            privilegesForModule = [];
        }
        if (!Array.isArray(privilegesForModule)) {
            return [privilegesForModule];
        }
        return privilegesForModule;
    };
    /**
     * @return {?}
     */
    UserDataService.prototype.getUserPrivilages = /**
     * @return {?}
     */
    function () {
        // if (this.userData &&
        //   this.userData.result === 'OK' &&
        //   this.userData.user &&
        //   this.userData.user.privileges) {
        //   return this.userData.user.privileges.module;
        // }
        return this.userPrivileges;
    };
    /**
     * @param {?} privilageName
     * @return {?}
     */
    UserDataService.prototype.checkModulePrivilege = /**
     * @param {?} privilageName
     * @return {?}
     */
    function (privilageName) {
        var e_1, _a;
        /** @type {?} */
        var userPrivileges = this.getUserPrivilegesForModule(MODULE_CONSTANTS.MODULE_PLANNING);
        try {
            for (var userPrivileges_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__values"])(userPrivileges), userPrivileges_1_1 = userPrivileges_1.next(); !userPrivileges_1_1.done; userPrivileges_1_1 = userPrivileges_1.next()) {
                var privilage = userPrivileges_1_1.value;
                if (privilage.name === privilageName) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (userPrivileges_1_1 && !userPrivileges_1_1.done && (_a = userPrivileges_1.return)) _a.call(userPrivileges_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
    };
    /**
     * @param {?} item
     * @param {?=} actionParam
     * @return {?}
     */
    UserDataService.prototype.updateUserPreferencesBookmarks = /**
     * @param {?} item
     * @param {?=} actionParam
     * @return {?}
     */
    function (item, actionParam) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var userPreferences = self.getUserPreferences();
        /** @type {?} */
        var preferenceBookmarksIndex = self.getPreferenceBookmarksIndex(userPreferences);
        /** @type {?} */
        var preferenceBookmarksObj = userPreferences[preferenceBookmarksIndex];
        // update the required fields
        if (item.hasOwnProperty('isMultiStudyView') && item.isMultiStudyView) {
            preferenceBookmarksObj.PreferenceBookmarks.lastMultiStudyViewID = item.id;
            preferenceBookmarksObj.PreferenceBookmarks.multiStudyView = true;
        }
        else {
            preferenceBookmarksObj.PreferenceBookmarks.lastSingleStudyViewID = item.id;
            preferenceBookmarksObj.PreferenceBookmarks.multiStudyView = false;
        }
        // call updateUserPreference API
        actionParam = !actionParam ? (/** @type {?} */ ({})) : actionParam;
        return self.updateUserPreference(preferenceBookmarksObj, actionParam);
    };
    /**
     * update Usage Metrics.
     * @param params
     * e.g
     *  const param = {
        usageMetric: {
          viewVisit: {
            module: 'PLANS',
            page: 'MNGCNTRY',
            studykey: 26,
            localTime: new Date()
          }
        }
      };
      <serviceRequest xmlns="http://www.coprindm.com">
        <command name="updateUsageMetrics">
          <usageMetric>
            <viewVisit>
              <module>PLANS</module>
              <page>MNGCNTRY</page>
              <studykey>26</studykey>
              <localTime>Mon Oct 22 12:29:57 GMT+0530 2018</localTime>
            </viewVisit>
          </usageMetric>
        </command>
      </serviceRequest>
     */
    /**
     * update Usage Metrics.
     * @param {?=} params
     * e.g
     *  const param = {
     * usageMetric: {
     * viewVisit: {
     * module: 'PLANS',
     * page: 'MNGCNTRY',
     * studykey: 26,
     * localTime: new Date()
     * }
     * }
     * };
     * <serviceRequest xmlns="http://www.coprindm.com">
     * <command name="updateUsageMetrics">
     * <usageMetric>
     * <viewVisit>
     * <module>PLANS</module>
     * <page>MNGCNTRY</page>
     * <studykey>26</studykey>
     * <localTime>Mon Oct 22 12:29:57 GMT+0530 2018</localTime>
     * </viewVisit>
     * </usageMetric>
     * </command>
     * </serviceRequest>
     * @return {?}
     */
    UserDataService.prototype.updateUsageMetrics = /**
     * update Usage Metrics.
     * @param {?=} params
     * e.g
     *  const param = {
     * usageMetric: {
     * viewVisit: {
     * module: 'PLANS',
     * page: 'MNGCNTRY',
     * studykey: 26,
     * localTime: new Date()
     * }
     * }
     * };
     * <serviceRequest xmlns="http://www.coprindm.com">
     * <command name="updateUsageMetrics">
     * <usageMetric>
     * <viewVisit>
     * <module>PLANS</module>
     * <page>MNGCNTRY</page>
     * <studykey>26</studykey>
     * <localTime>Mon Oct 22 12:29:57 GMT+0530 2018</localTime>
     * </viewVisit>
     * </usageMetric>
     * </command>
     * </serviceRequest>
     * @return {?}
     */
    function (params) {
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var moduleInfo = CTOSUtil.getModuleInfo('PLANS');
        /** @type {?} */
        var usageMetricsPayload = that.payloadCommandService.getCommandDetails(COMMAND.UPDATEUSAGEMETRICS, '', '', params, moduleInfo);
        return this.baseConnectionService.sendRequest(usageMetricsPayload, { url: common_library__WEBPACK_IMPORTED_MODULE_2__["LOGGING_SERVLET_URL"] }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
         * @param {?} resp
         * @return {?}
         */
        function (resp) {
            if (resp.result === 'OK') {
                return resp.result;
            }
            else {
                return null;
            }
        })));
    };
    /**
     * Keeps user session alive
     * @param [coefficient]
     * Periodically call the keep user session alive api.
     * Check the following condition (LastKeepAlive api call time + sessiontimeoutValue * coefficient) <= currenttime
     */
    /**
     * Keeps user session alive
     * @param {?=} coefficient
     * @return {?}
     */
    UserDataService.prototype.keepUserSessionAlive = /**
     * Keeps user session alive
     * @param {?=} coefficient
     * @return {?}
     */
    function (coefficient) {
        /** @type {?} */
        var userData = this.userData;
        if (userData && userData.user && userData.user.sessiontimeoutValue) {
            this.coefficient = coefficient;
            /** @type {?} */
            var serverSessionTimeOutValue = parseInt(userData.user.sessiontimeoutValue, 10);
            /** @type {?} */
            var sessionTimeOut = (serverSessionTimeOutValue / 60);
            this.isKeepAliveCallProceed = false;
            /** @type {?} */
            var modifiedLastKeepAliveCallTime = null;
            if (!this.lastKeepAliveCallTime) {
                this.isKeepAliveCallProceed = true;
            }
            if (!this.isKeepAliveCallProceed) {
                /** @type {?} */
                var calVal = sessionTimeOut * this.coefficient;
                modifiedLastKeepAliveCallTime = moment$1(this.lastKeepAliveCallTime).add(calVal, 'm').local().format();
                /** @type {?} */
                var currentDateTime = moment$1(new Date()).local().format();
                if (moment$1(modifiedLastKeepAliveCallTime).diff(moment$1(currentDateTime)) === 0 ||
                    moment$1(modifiedLastKeepAliveCallTime).diff(moment$1(currentDateTime)) < 0) {
                    this.isKeepAliveCallProceed = true;
                }
                else {
                    this.isKeepAliveCallProceed = false;
                }
            }
            if (this.isKeepAliveCallProceed) {
                this.lastKeepAliveCallTime = moment$1(new Date()).local().format();
                this.keepUserSessionAliveCall();
            }
        }
    };
    /**
     * Keeps user session alive api call
     */
    /**
     * Keeps user session alive api call
     * @return {?}
     */
    UserDataService.prototype.keepUserSessionAliveCall = /**
     * Keeps user session alive api call
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var moduleInfo = CTOSUtil.getModuleInfo('PLANS');
        /** @type {?} */
        var keepUserSessionAlivePayload = this.payloadCommandService.getCommandDetails(COMMAND.KEEPUSERSESSIONALIVE, null, null, null, moduleInfo);
        this.baseConnectionService.sendRequest(keepUserSessionAlivePayload)
            .subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res.result === 'Ok') {
                _this.isKeepAliveCallProceed = false;
            }
        }));
    };
    /**
     * Users ideal watch
     * Log out will perform after session time out
     */
    /**
     * Users ideal watch
     * Log out will perform after session time out
     * @return {?}
     */
    UserDataService.prototype.userIdealWatch = /**
     * Users ideal watch
     * Log out will perform after session time out
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.idleSubscription) {
            this.idleSubscription.unsubscribe();
        }
        this.idleSubscription = this.userIdeal$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["bufferTime"])(this.setAutoLogOutTime()), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["filter"])((/**
         * @param {?} arr
         * @return {?}
         */
        function (arr) { return !arr.length; })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["tap"])((/**
         * @return {?}
         */
        function () {
            _this.logout();
        })), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["finalize"])((/**
         * @return {?}
         */
        function () { }))).subscribe();
    };
    /**
     * Logouts user data service
     */
    /**
     * Logouts user data service
     * @return {?}
     */
    UserDataService.prototype.logout = /**
     * Logouts user data service
     * @return {?}
     */
    function () {
        var _this = this;
        console.log('timeout......');
        if (this.logOutSubscription) {
            this.logOutSubscription.unsubscribe();
        }
        this.logOutSubscription = this.logoutService.logout().subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data.result === common_library__WEBPACK_IMPORTED_MODULE_2__["COMMON"].RESULT_OK) {
                if (_this.serverStatusService.serverStatus) {
                    /** @type {?} */
                    var loginUrl = _this.configurationService.$loginUrl;
                    if (loginUrl) {
                        common_library__WEBPACK_IMPORTED_MODULE_2__["AppWindow"].getWindow().location.href = loginUrl;
                    }
                }
                else {
                    common_library__WEBPACK_IMPORTED_MODULE_2__["AppWindow"].getWindow().location.href = _this.serverStatusService.serverStatus.ssoRedirectURL;
                }
            }
            else if (data.result === common_library__WEBPACK_IMPORTED_MODULE_2__["COMMON"].RESULT_ERROR) {
                console.log(data.error.message);
                throw new Error(data.error.message);
            }
        }));
    };
    /**
     * Sets auto log out time buffer
     * Convert session time out (seconds) into milisecond
     * @returns
     */
    /**
     * Sets auto log out time buffer
     * Convert session time out (seconds) into milisecond
     * @return {?}
     */
    UserDataService.prototype.setAutoLogOutTime = /**
     * Sets auto log out time buffer
     * Convert session time out (seconds) into milisecond
     * @return {?}
     */
    function () {
        /** @type {?} */
        var value = this.userData && this.userData.user && (this.userData.user.sessiontimeoutValue);
        if (value) {
            value = value - 60;
        }
        this.sessionTimeOut = value && ((value) * 1000);
        console.log("%c session time out " + this.sessionTimeOut, 'color: purple');
        this.getPreferencesByCategory(PreferenceCategory.PreferenceGridColumns);
        return this.sessionTimeOut;
    };
    /**This function returns preference object for provided category.
     *
     * @param categoryName : PreferenceCategory
     *
     * Use this enum to find out different category
     *
     * @returns Preference object
     * example :
     * preferenceObject : {
            "<CATEGORY_ID>": {
              <Data to be stored in preference>
            },
            "appType": "<Application Type id>",
            "category": "<CATEGORY_ID>",
            "key": <KEY Number>
          }
     */
    /**
     * This function returns preference object for provided category.
     *
     * @param {?} categoryName : PreferenceCategory
     *
     * Use this enum to find out different category
     *
     * @return {?} Preference object
     * example :
     * preferenceObject : {
     * "<CATEGORY_ID>": {
     * <Data to be stored in preference>
     * },
     * "appType": "<Application Type id>",
     * "category": "<CATEGORY_ID>",
     * "key": <KEY Number>
     * }
     */
    UserDataService.prototype.getPreferencesByCategory = /**
     * This function returns preference object for provided category.
     *
     * @param {?} categoryName : PreferenceCategory
     *
     * Use this enum to find out different category
     *
     * @return {?} Preference object
     * example :
     * preferenceObject : {
     * "<CATEGORY_ID>": {
     * <Data to be stored in preference>
     * },
     * "appType": "<Application Type id>",
     * "category": "<CATEGORY_ID>",
     * "key": <KEY Number>
     * }
     */
    function (categoryName) {
        if (!common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(categoryName)) {
            return null;
        }
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var cateogryByPreferecenes = null;
        /** @type {?} */
        var returnPreferences = null;
        /** @type {?} */
        var userPreferences = that.getUserPreferences();
        if (userPreferences && userPreferences.length > 0) {
            cateogryByPreferecenes = userPreferences.find((/**
             * @param {?} data
             * @return {?}
             */
            function (data) { return data.category === categoryName; }));
            returnPreferences = cateogryByPreferecenes
                ? cateogryByPreferecenes
                : null;
        }
        return returnPreferences;
    };
    /**
     * Function updates specific preference to be updated. There are multiple preferences that can be stored which are
     * identified by Category Id.
     *
     * To understand object structure of preference, please refer getUserData.json from assets directory.
     *
     * @param preferenceObject : Preference object identified by Category.
     *
     * example :
     * preferenceObject : {
            "<CATEGORY_ID>": {
              <Data to be stored in preference>
            },
            "appType": "<Application Type id>",
            "category": "<CATEGORY_ID>",
            "key": <KEY Number>
          }
     * @param actionParam : Action
     */
    /**
     * Function updates specific preference to be updated. There are multiple preferences that can be stored which are
     * identified by Category Id.
     *
     * To understand object structure of preference, please refer getUserData.json from assets directory.
     *
     * @param {?} preferenceObject : Preference object identified by Category.
     *
     * example :
     * preferenceObject : {
     * "<CATEGORY_ID>": {
     * <Data to be stored in preference>
     * },
     * "appType": "<Application Type id>",
     * "category": "<CATEGORY_ID>",
     * "key": <KEY Number>
     * }
     * @param {?=} actionParam : Action
     * @return {?}
     */
    UserDataService.prototype.updatePreferencesByCategory = /**
     * Function updates specific preference to be updated. There are multiple preferences that can be stored which are
     * identified by Category Id.
     *
     * To understand object structure of preference, please refer getUserData.json from assets directory.
     *
     * @param {?} preferenceObject : Preference object identified by Category.
     *
     * example :
     * preferenceObject : {
     * "<CATEGORY_ID>": {
     * <Data to be stored in preference>
     * },
     * "appType": "<Application Type id>",
     * "category": "<CATEGORY_ID>",
     * "key": <KEY Number>
     * }
     * @param {?=} actionParam : Action
     * @return {?}
     */
    function (preferenceObject, actionParam) {
        /** @type {?} */
        var categoryObject = {};
        categoryObject[preferenceObject.category] =
            preferenceObject[preferenceObject.category];
        /** @type {?} */
        var tempObject = {
            userPreference: {
                params: {
                    appType: preferenceObject.appType,
                    category: preferenceObject.category
                },
                value: JSON.stringify(categoryObject)
            }
        };
        /** @type {?} */
        var userPreferencesPayload = this.payloadCommandService.getCommandDetails('updateUserPreference', null, null, tempObject);
        /** @type {?} */
        var baseParam = {};
        if (!actionParam) {
            actionParam = baseParam;
            actionParam.dependencyList = [common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].UserDataKey];
        }
        return this.baseConnectionService
            .sendRequest(userPreferencesPayload, baseParam)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response) {
                return response;
            }
            else {
                return null;
            }
        })));
    };
    /**
     * @param {?} pref
     * @param {?} o
     * @return {?}
     */
    UserDataService.prototype.CreateCDATAObj = /**
     * @param {?} pref
     * @param {?} o
     * @return {?}
     */
    function (pref, o) {
        /** @type {?} */
        var cdata = '<![CDATA[<PreferenceChartLegendPlan>';
        if (o instanceof Object) {
            for (var prop in o) {
                if (prop) {
                    /** @type {?} */
                    var mappedProp = mappingPref[prop];
                    if (pref && pref instanceof Array && mappedProp.length > 0 && pref.indexOf(mappedProp) > -1) {
                        o[prop] = true;
                    }
                    else if (pref && pref instanceof Array && mappedProp.length === 0) {
                        o[prop] = o[prop];
                    }
                    else {
                        o[prop] = false;
                    }
                    cdata += "<" + prop + ">" + o[prop] + "</" + prop + ">";
                }
            }
        }
        else if (o === undefined || o === '') {
            this._chartLegendPreference = {};
            for (var prop in mappingPref) {
                if (pref && pref instanceof Array && mappingPref[prop].length > 0 && pref.indexOf(mappingPref[prop]) > -1) {
                    cdata += "<" + prop + ">true</" + prop + ">";
                    this._chartLegendPreference[prop] = true;
                }
                else {
                    cdata += "<" + prop + ">false</" + prop + ">";
                    this._chartLegendPreference[prop] = false;
                }
            }
        }
        cdata += '</PreferenceChartLegendPlan>]]>';
        return common_library__WEBPACK_IMPORTED_MODULE_2__["StringUtil"].escapeHTML(cdata);
    };
    /**
     * Gets xmltag
     * @param tags
     * @returns the xml elements
     */
    /**
     * Gets xmltag
     * @private
     * @param {?} tags
     * @return {?} the xml elements
     */
    UserDataService.prototype.getXMLTag = /**
     * Gets xmltag
     * @private
     * @param {?} tags
     * @return {?} the xml elements
     */
    function (tags) {
        // If the content is not an Object or an Array return the value
        if (typeof tags !== 'object') {
            if (typeof tags === 'string') {
                tags = common_library__WEBPACK_IMPORTED_MODULE_2__["StringUtil"].escapeHTML(tags);
            }
            return tags;
        }
        /** @type {?} */
        var req = '';
        // For each Value that you have in the object or an Array process it for a new tag
        for (var key in tags) {
            if (!tags.hasOwnProperty(key)) {
                continue;
            }
            // If The Data is not in the form of an Array parse the OBject for parameters and tags
            if (Object.prototype.toString.call(tags) !== '[object Array]') {
                if (key !== 'params' && key !== 'value') {
                    req += "<" + key;
                    if (tags[key] && tags[key].params !== undefined) {
                        // console.log('Params:', tags[key].params);
                        for (var value in tags[key].params) {
                            // req += ' ' + value + '=\'' + tags[key].params[value] + '\'';
                            if (value) {
                                req += " " + value + "=\"" + tags[key].params[value] + "\"";
                            }
                        }
                    }
                    req += ">";
                }
            }
            if (key !== 'params') {
                req += this.getXMLTag(tags[key]);
            }
            if (Object.prototype.toString.call(tags) !== '[object Array]') {
                if (key !== 'params' && key !== 'value') {
                    req += "</" + key + ">";
                }
            }
        }
        req = '&lt;![CDATA[ ' + req + ' ]]>';
        return req;
    };
    UserDataService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    UserDataService.ctorParameters = function () { return [
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["PayloadCommandService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["LogoutService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["ConfigurationService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["ServerStatusService"] }
    ]; };
    /** @nocollapse */ UserDataService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function UserDataService_Factory() { return new UserDataService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["PayloadCommandService"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["LogoutService"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["ConfigurationService"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["ServerStatusService"])); }, token: UserDataService, providedIn: "root" });
    return UserDataService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/window.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WindowService = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__extends"])(WindowService, _super);
    function WindowService(router, userDataService) {
        var _this = _super.call(this) || this;
        _this.router = router;
        _this.userDataService = userDataService;
        _this.subscriptions = [];
        return _this;
    }
    /**
     * @return {?}
     */
    WindowService.prototype.redirectAsPerParams = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var preferenceIdSubscription = self.getPreferenceId().subscribe((/**
         * @param {?} successResponse
         * @return {?}
         */
        function (successResponse) {
            if (successResponse) {
                /** @type {?} */
                var prefId_1 = successResponse;
                /** @type {?} */
                var item_1 = PAGE_CONSTANTS.find((/**
                 * @param {?} c
                 * @return {?}
                 */
                function (c) {
                    return c.id === prefId_1;
                }));
                if (item_1 !== undefined) {
                    /** @type {?} */
                    var preferenceBookmarksSubscription = self.userDataService.updateUserPreferencesBookmarks(item_1).subscribe((/**
                     * @param {?} successResp
                     * @return {?}
                     */
                    function (successResp) {
                        if (!item_1.routeUrl) {
                            // self.navigateToFlexApp();
                            self.router.navigate(['/']);
                            /** Uncomment the following code and add conditions for all application routes
                             * when using user preferences in absence of prefId for finding the last visited module */
                            // } else if (item.routeUrl && item.routeUrl === '/new-plans') {
                            //     self.router.navigate(['/']);
                        }
                        else {
                            self.router.navigate([item_1.routeUrl]);
                        }
                    }), (/**
                     * @param {?} errorResponse
                     * @return {?}
                     */
                    function (errorResponse) {
                        throw new Error(errorResponse);
                    }));
                    self.subscriptions.push(preferenceBookmarksSubscription);
                }
                else {
                    self.navigateToFlexApp();
                }
            }
            else {
                self.router.navigate(['/']);
            }
        }), (/**
         * @param {?} errorResponse
         * @return {?}
         */
        function (errorResponse) {
            throw new Error(errorResponse);
        }));
        self.subscriptions.push(preferenceIdSubscription);
    };
    /**
     * @return {?}
     */
    WindowService.prototype.redirectOnSPABasedOnPreference = /**
     * @return {?}
     */
    function () {
        // before login
        /** @type {?} */
        var prefCategory = PreferenceCategory.PreferenceBookmarks;
        /** @type {?} */
        var preferenceBookmarks = this.userDataService.getPreferencesByCategory(prefCategory);
        /** @type {?} */
        var prefId = preferenceBookmarks.PreferenceBookmarks.lastSingleStudyViewID;
        /** @type {?} */
        var item = PAGE_CONSTANTS.find((/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            return c.id === prefId;
        }));
        if (!item.routeUrl) {
            this.router.navigate(['/new-study']); // will change
        }
        else {
            this.router.navigate([item.routeUrl]); // new-study
        }
    };
    /**
     * @return {?}
     */
    WindowService.prototype.redirectBasedOnPreference = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var prefCategory = PreferenceCategory.PreferenceBookmarks;
        /** @type {?} */
        var preferenceBookmarks = this.userDataService.getPreferencesByCategory(prefCategory);
        console.log('preferenceBookmarks: ', preferenceBookmarks);
        /** @type {?} */
        var prefId = preferenceBookmarks.PreferenceBookmarks.lastSingleStudyViewID;
        /** @type {?} */
        var item = PAGE_CONSTANTS.find((/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            return c.id === prefId;
        }));
        /** @type {?} */
        var actionParam = {};
        actionParam.endPoint = true;
        /** @type {?} */
        var preferenceBookmarksSubscription = self.userDataService.updateUserPreferencesBookmarks(item, actionParam).subscribe((/**
         * @param {?} successResp
         * @return {?}
         */
        function (successResp) {
            if (!item.routeUrl) {
                self.router.navigate(['/']);
                /** Uncomment the following code and add conditions for all application routes
                 * when using user preferences in absence of prefId for finding the last visited module */
                // } else if (item.routeUrl && item.routeUrl === '/new-plans') {
                //     self.router.navigate(['/']);
            }
            else {
                self.router.navigate([item.routeUrl]); // new-country
            }
        }), (/**
         * @param {?} errorResponse
         * @return {?}
         */
        function (errorResponse) {
            throw new Error(errorResponse);
        }));
        self.subscriptions.push(preferenceBookmarksSubscription);
    };
    /**
     * @private
     * @return {?}
     */
    WindowService.prototype.getPreferenceId = /**
     * @private
     * @return {?}
     */
    function () {
        // const self = this;
        /** @type {?} */
        var prefId = parseInt(_super.prototype.getParameterByName.call(this, 'prefId'), 10) || _super.prototype.getParameterByName.call(this, 'prefId');
        /** Uncomment the following code if preferences for user are to be used while naviation in absence of prefId.
         * Also add the check for tab literals commented in above method */
        // if (prefId === undefined || prefId === null) {
        //     return self.userDataService.getUserData(USER_PARAMS).pipe(map(resp => {
        //         const preferenceBookmarks = self.userDataService.getPreferenceBookmarks(self.userDataService.getUserPreferences());
        //         if (preferenceBookmarks.multiStudyView === true) {
        //             prefId = parseInt(preferenceBookmarks.lastMultiStudyViewID, 10) || preferenceBookmarks.lastMultiStudyViewID;
        //         } else {
        //             prefId = parseInt(preferenceBookmarks.lastSingleStudyViewID, 10) || preferenceBookmarks.lastSingleStudyViewID;
        //         }
        //         return prefId;
        //     }), catchError(error => {
        //         throw error;
        //     }));
        // } else {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["of"])(prefId);
        // }
    };
    /**
     * @param {?} moduleName
     * @return {?}
     */
    WindowService.prototype.navigateToModule = /**
     * @param {?} moduleName
     * @return {?}
     */
    function (moduleName) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var id = MODULE_CONSTANTS[moduleName];
        /** @type {?} */
        var item = PAGE_CONSTANTS.find((/**
         * @param {?} pc
         * @return {?}
         */
        function (pc) {
            return pc.id === id;
        }));
        if (item !== undefined) {
            /** @type {?} */
            var actionParam = {};
            actionParam.endPoint = true;
            actionParam.url = common_library__WEBPACK_IMPORTED_MODULE_2__["APIEndPoints"].USER_PREFERENCE;
            actionParam.httpMethod = common_library__WEBPACK_IMPORTED_MODULE_2__["HttpVerbs"].put;
            /** @type {?} */
            var subscription = self.userDataService.updateUserPreferencesBookmarks(item, actionParam).subscribe((/**
             * @param {?} successResponse
             * @return {?}
             */
            function (successResponse) {
                if (item.isAngularModule) {
                    self.router.navigate([item.routeUrl]); // newCountries
                }
                else {
                    self.navigateToFlexApp();
                }
            }), (/**
             * @param {?} errorResponse
             * @return {?}
             */
            function (errorResponse) {
                throw new Error(errorResponse);
            }));
            self.subscriptions.push(subscription);
        }
    };
    /**
     * @private
     * @return {?}
     */
    WindowService.prototype.navigateToFlexApp = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var url = common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].generateFlexUrl(common_library__WEBPACK_IMPORTED_MODULE_2__["BASE_HREF"]);
        common_library__WEBPACK_IMPORTED_MODULE_2__["AppWindow"].getWindow().location.href = url;
    };
    /**
     * @return {?}
     */
    WindowService.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) {
            subscription.unsubscribe();
        }));
        this.subscriptions = null;
    };
    WindowService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    WindowService.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_10__["Router"] },
        { type: UserDataService }
    ]; };
    /** @nocollapse */ WindowService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function WindowService_Factory() { return new WindowService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(_angular_router__WEBPACK_IMPORTED_MODULE_10__["Router"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(UserDataService)); }, token: WindowService, providedIn: "root" });
    return WindowService;
}(common_library__WEBPACK_IMPORTED_MODULE_2__["CtosWindow"]));
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/header/header.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var HeaderComponent = /** @class */ (function () {
    function HeaderComponent(soCommonWindowService) {
        this.soCommonWindowService = soCommonWindowService;
        this.itemSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    Object.defineProperty(HeaderComponent.prototype, "searchListFormGroupName", {
        get: /**
         * @return {?}
         */
        function () {
            return this.searchListFormGroup;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.searchListFormGroup = value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    HeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} event
     * @return {?}
     */
    HeaderComponent.prototype.itemSelected = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.itemSelect.emit(event);
    };
    /**
     * @return {?}
     */
    HeaderComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.userProfile = null;
        this.mainHeaderItems = null;
        this.logoUrl = null;
        this.alertConfirmUrl = null;
        this.subHeaderItems = null;
        this.studyRefreshDate = null;
        this.studyRefreshDateLabel = null;
        this.itemSelect = null;
    };
    /**
     * @param {?} moduleName
     * @return {?}
     */
    HeaderComponent.prototype.navigateToModule = /**
     * @param {?} moduleName
     * @return {?}
     */
    function (moduleName) {
        this.soCommonWindowService.navigateToModule(moduleName);
    };
    HeaderComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-header',
                    template: "<ctos-main-header [userProfile]=\"userProfile\" [items]=\"mainHeaderItems\" [logoUrl]=\"logoUrl\" [appInfoUrl]=\"appInfoUrl\" [alertConfirmUrl]=\"alertConfirmUrl\"\r\n    [aboutResource]=\"aboutResource\" [passwordResource]=\"passwordResource\" (headerTabClicked)=\"navigateToModule($event)\"></ctos-main-header>\r\n<ctos-sub-header [subHeaders]=\"subHeaderItems\" [studyRefreshDate]=\"studyRefreshDate\" [studyRefreshDateLabel]=\"studyRefreshDateLabel\"\r\n    [studyListInput]=\"studyListInput\" [searchListFormGroupName]=\"searchListFormGroupName\" (itemSelect)=\"itemSelected($event)\" (headerTabClicked)=\"navigateToModule($event)\"\r\n    [disablePlansTab]=\"disablePlansTab\"></ctos-sub-header>"
                }] }
    ];
    /** @nocollapse */
    HeaderComponent.ctorParameters = function () { return [
        { type: WindowService }
    ]; };
    HeaderComponent.propDecorators = {
        userProfile: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        mainHeaderItems: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        logoUrl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        appInfoUrl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        alertConfirmUrl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        subHeaderItems: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        studyRefreshDate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        studyRefreshDateLabel: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        studyListInput: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        aboutResource: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        passwordResource: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        disablePlansTab: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        searchListFormGroupName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        itemSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }]
    };
    return HeaderComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/milestone-graph/milestone-graph.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$2 = moment__WEBPACK_IMPORTED_MODULE_13__;
var MilestoneGraphComponent = /** @class */ (function () {
    function MilestoneGraphComponent(cdRef) {
        this.cdRef = cdRef;
        this.title = 'D3 Custom Widget';
        this.baseline = {};
        this.site = {};
        this.subjects = {};
        this.higherend = 500;
        this.lowerend = 50;
        this.position = 65;
        this.siteY = 58; // 60; // to shift the site (purple/magenta) line
        // 60; // to shift the site (purple/magenta) line
        this.subjectY = 72; // 70; // to shift the subject (blue) line
        // 70; // to shift the subject (blue) line
        this.dateFormat = 'DD-MMM-YYYY';
        this.collisionSafety = 20; // collision safety margin of 20px apart
        this.rangeParam = [];
    }
    /**
     * @return {?}
     */
    MilestoneGraphComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.render();
        this.rangeParam = [this.lowerend, this.higherend];
        this.xScale = Object(d3__WEBPACK_IMPORTED_MODULE_14__["scaleTime"])()
            .domain([new Date(this.range.start), new Date(this.range.end)])
            .range(this.rangeParam);
        this.xTFSI = this.xScale(new Date(this.milestone['TFSI']));
        this.xTLSR = this.xScale(new Date(this.milestone['TLSR']));
        this.xPFSR = this.xScale(new Date(this.milestone['PFSI']));
        this.xPLSR = this.xScale(new Date(this.milestone['PLSR']));
        this.xPFSI = this.xScale(new Date(this.milestone['PFSI']));
        this.xPLSI = this.xScale(new Date(this.milestone['PLSI']));
        this.DrawBaseline();
        this.PlotPlannedSiteMilestones();
        this.PlotPlannedSubjectsMilestones();
        this.cdRef.detectChanges();
    };
    /**
     * @return {?}
     */
    MilestoneGraphComponent.prototype.draw = /**
     * @return {?}
     */
    function () {
    };
    // to clear the SVG contents
    //   private clearSVG() {
    //     d3.select('#' + this.id + ' .baseline')
    //       .selectAll('*')
    //       .remove();
    //     d3.select('#' + this.id + ' .site')
    //       .selectAll('*')
    //       .remove();
    //     d3.select('#' + this.id + ' .subjects')
    //       .selectAll('*')
    //       .remove();
    //   }
    // to clear the SVG contents
    //   private clearSVG() {
    //     d3.select('#' + this.id + ' .baseline')
    //       .selectAll('*')
    //       .remove();
    //     d3.select('#' + this.id + ' .site')
    //       .selectAll('*')
    //       .remove();
    //     d3.select('#' + this.id + ' .subjects')
    //       .selectAll('*')
    //       .remove();
    //   }
    /**
     * @private
     * @return {?}
     */
    MilestoneGraphComponent.prototype.DrawBaseline = 
    // to clear the SVG contents
    //   private clearSVG() {
    //     d3.select('#' + this.id + ' .baseline')
    //       .selectAll('*')
    //       .remove();
    //     d3.select('#' + this.id + ' .site')
    //       .selectAll('*')
    //       .remove();
    //     d3.select('#' + this.id + ' .subjects')
    //       .selectAll('*')
    //       .remove();
    //   }
    /**
     * @private
     * @return {?}
     */
    function () {
        if (this.showBaseline()) {
            if (this.milestone['PFSI'] &&
                this.milestone['PLSI'] &&
                this.xTLSR - this.xTFSI < this.collisionSafety) {
                this.xTLSR = this.xTFSI + this.collisionSafety;
            }
        }
    };
    /**
     * @return {?}
     */
    MilestoneGraphComponent.prototype.type = /**
     * @return {?}
     */
    function () {
        return 'CUSTOM';
    };
    /**
     * @private
     * @return {?}
     */
    MilestoneGraphComponent.prototype.PlotPlannedSiteMilestones = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.milestone['PFSI'] &&
            this.milestone['PLSI'] &&
            moment$2(this.milestone['PLSI']) >= moment$2(this.milestone['PFSI'])) {
            // if site line
            if (this.xPLSI - this.xPFSI < this.collisionSafety) {
                this.xPLSI = this.xPFSI + this.collisionSafety;
            }
            /** @type {?} */
            var xxTFSI = moment$2(this.milestone['TFSI']);
            /** @type {?} */
            var xxPFSI = moment$2(this.milestone['PFSI']);
            /** @type {?} */
            var aheadBehindDaysFSI = parseInt(moment$2
                .duration(xxPFSI.diff(xxTFSI))
                .asDays()
                .toString(), 10);
            this.aheadBehindDaysFSIColor = this.determineColor(aheadBehindDaysFSI);
            this.diffFSI =
                (aheadBehindDaysFSI > 0
                    ? '+' + aheadBehindDaysFSI
                    : aheadBehindDaysFSI) + this.labels.DAYS_FROM_TFSI;
        }
    };
    /**
     * @private
     * @return {?}
     */
    MilestoneGraphComponent.prototype.PlotPlannedSubjectsMilestones = /**
     * @private
     * @return {?}
     */
    function () {
        // const xPFSS = this.xScale(new Date(this.milestone['PFSS']));
        // const xPLSS = this.xScale(new Date(this.milestone['PLSS']));
        if (this.xPFSR && this.xPLSR) {
            // if subject line
            if (this.xPLSR - this.xPFSR < this.collisionSafety) {
                this.xPLSR = this.xPFSR + this.collisionSafety;
            }
            /** @type {?} */
            var xxPLSR = moment$2(this.milestone['PLSR']);
            /** @type {?} */
            var xxTLSR = moment$2(this.milestone['TLSR']);
            /** @type {?} */
            var aheadBehindDaysLSR = parseInt(moment$2
                .duration(xxPLSR.diff(xxTLSR))
                .asDays()
                .toString(), 10);
            this.aheadBehindDaysLSRColor = this.determineColor(aheadBehindDaysLSR);
            this.diffLSR =
                (aheadBehindDaysLSR > 0
                    ? '+' + aheadBehindDaysLSR
                    : aheadBehindDaysLSR) + this.labels.DAYS_FROM_TLSR;
        }
    };
    /**
     * @param {?} difference
     * @return {?}
     */
    MilestoneGraphComponent.prototype.determineColor = /**
     * @param {?} difference
     * @return {?}
     */
    function (difference) {
        if (difference <= 0) {
            return '#00C221';
        }
        else {
            return '#E20000';
        }
    };
    /**
     * @return {?}
     */
    MilestoneGraphComponent.prototype.render = /**
     * @return {?}
     */
    function () {
        // this.clearSVG();
        this.higherend = document.getElementById(this.id).clientWidth - 50;
        this.draw();
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    MilestoneGraphComponent.prototype.onResize = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.render();
    };
    /**
     * @param {?} line1
     * @param {?} date
     * @param {?=} line3
     * @return {?}
     */
    MilestoneGraphComponent.prototype.getTooltipData = /**
     * @param {?} line1
     * @param {?} date
     * @param {?=} line3
     * @return {?}
     */
    function (line1, date, line3) {
        /** @type {?} */
        var result = line1 + '\n' + this.labels.SPACES + moment$2(this.milestone[date]).format(this.dateFormat);
        if (line3) {
            result = result + '\n' + this.labels.SPACES + line3;
        }
        return result;
    };
    /**
     * @return {?}
     */
    MilestoneGraphComponent.prototype.showBaseline = /**
     * @return {?}
     */
    function () {
        return this.xTFSI && this.xTLSR;
    };
    /**
     * @return {?}
     */
    MilestoneGraphComponent.prototype.showPlannedSiteMilestones = /**
     * @return {?}
     */
    function () {
        return (this.xPFSI &&
            this.xPLSI &&
            this.milestone['PFSI'] &&
            this.milestone['PLSI'] &&
            moment$2(this.milestone['PLSI']) >=
                moment$2(this.milestone['PFSI']));
    };
    /**
     * @return {?}
     */
    MilestoneGraphComponent.prototype.showPlannedSubjectsMilestones = /**
     * @return {?}
     */
    function () {
        return this.xPFSR && this.xPLSR;
    };
    MilestoneGraphComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    // tslint:disable-next-line
                    selector: 'ctos-milestone-graph',
                    template: "<svg id=\"{{ id }}\" class=\"outer\" style=\"min-width:350px;width: 90%\" (window:resize)=\"onResize($event)\">\r\n  <!--Site milestones and baseline-->\r\n  <g class=\"site\" *ngIf=\"showPlannedSiteMilestones()\">\r\n    <line class=\"line\" [attr.x1]=\"xPFSI\" [attr.y1]=\"siteY\" [attr.x2]=\"xPLSI\" [attr.y2]=\"siteY\"></line>\r\n    <polygon class=\"polygon1\" [attr.points]=\"xPFSI +\r\n      ',' +\r\n      (siteY - 6) +\r\n      ' ' +\r\n      (xPFSI - 5) +\r\n      ',' +\r\n      (siteY - 14) +\r\n      ' ' +\r\n      (xPFSI + 5) +\r\n      ',' +\r\n      (siteY - 14)\" [attr.stroke]=\"aheadBehindDaysFSIColor\" [attr.stroke-width]=\"0\"\r\n      [attr.fill]=\"aheadBehindDaysFSIColor\" [attr.d]=\"labels.PFSI_LABEL + diffFSI\"\r\n      [matTooltipClass]=\"'ctos-text-centered-tooltip'\" [matTooltip]=\"\r\n        getTooltipData(labels.PFSI, labels.PFSI_SHORT, diffFSI)\r\n      \"></polygon>\r\n    <text [attr.x]=\"xPFSI - 8\" [attr.y]=\"siteY - 20\">{{ labels.PFSI_SHORT }}</text>\r\n    <polygon class=\"polygon2\" [attr.points]=\"xPLSI +\r\n      ',' +\r\n      (siteY - 6) +\r\n      ' ' +\r\n      (xPLSI - 5) +\r\n      ',' +\r\n      (siteY - 14) +\r\n      ' ' +\r\n      (xPLSI + 5) +\r\n      ',' +\r\n      (siteY - 14)\" [attr.stroke]=\"'black'\" [attr.stroke-width]=\"1\" [attr.fill]=\"'white'\" [attr.d]=\"labels.PLSI_LABEL\"\r\n      [matTooltipClass]=\"'ctos-text-centered-tooltip'\" [matTooltip]=\"getTooltipData(labels.PLSI, labels.PLSI_SHORT)\">\r\n    </polygon>\r\n    <text [attr.x]=\"xPLSI - 8\" [attr.y]=\"siteY - 20\">{{ labels.PLSI_SHORT }}</text>\r\n  </g>\r\n\r\n  <!--Sites milestones and baseline-->\r\n  <g class=\"baseline\" *ngIf=\"showBaseline()\">\r\n    <line class=\"line\" [attr.x1]=\"xTFSI\" [attr.y1]=\"position\" [attr.x2]=\"xTLSR\" [attr.y2]=\"position\"></line>\r\n    <circle class=\"circle1\" [attr.cx]=\"xTFSI\" [attr.cy]=\"position\" [attr.r]=\"5\" [attr.d]=\"labels.TFSI_LABEL\"\r\n      [matTooltipClass]=\"'ctos-text-centered-tooltip'\" [matTooltip]=\"getTooltipData(labels.TFSI, labels.TFSI_SHORT)\">\r\n    </circle>\r\n    <text [attr.x]=\"xTFSI - 27\" [attr.y]=\"position + 3\">{{ labels.TFSI_SHORT }}</text>\r\n    <circle class=\"circle2\" [attr.cx]=\"xTLSR\" [attr.cy]=\"position\" [attr.r]=\"5\" [attr.d]=\"labels.TLSR_LABEL\"\r\n      [matTooltipClass]=\"'ctos-text-centered-tooltip'\" [matTooltip]=\"getTooltipData(labels.TLSR, labels.TLSR_SHORT)\">\r\n    </circle>\r\n    <text [attr.x]=\"xTLSR + 10\" [attr.y]=\"position + 3\">{{ labels.TLSR_SHORT }}</text>\r\n  </g>\r\n\r\n  <!--Target line and milestone-->\r\n  <g class=\"subjects\" *ngIf=\"showPlannedSubjectsMilestones()\">\r\n    <line class=\"line\" [attr.x1]=\"xPFSR\" [attr.y1]=\"subjectY\" [attr.x2]=\"xPLSR\" [attr.y2]=\"subjectY\"></line>\r\n    <text [attr.x]=\"xPFSR - 10\" [attr.y]=\"subjectY + 27\" [attr.stroke-width]=\"0\">\r\n      {{ labels.PFSR_SHORT }}\r\n    </text>\r\n    <polygon class=\"polygon1\" [attr.points]=\"xPFSR +\r\n      ',' +\r\n      (subjectY + 6) +\r\n      ' ' +\r\n      (xPFSR - 5) +\r\n      ',' +\r\n      (subjectY + 14) +\r\n      ' ' +\r\n      (xPFSR + 5) +\r\n      ',' +\r\n      (subjectY + 14)\" [attr.stroke]=\"'black'\" [attr.stroke-width]=\"1\" [attr.fill]=\"'white'\"\r\n      [attr.d]=\"labels.PFSR_LABEL\" [matTooltipClass]=\"'ctos-text-centered-tooltip'\"\r\n      [matTooltip]=\"getTooltipData(labels.PFSR, labels.PFSR_SHORT)\"></polygon>\r\n    <text [attr.x]=\"xPLSR - 10\" [attr.y]=\"subjectY + 27\" [attr.stroke-width]=\"0\">\r\n      {{ labels.PLSR_SHORT }}\r\n    </text>\r\n    <polygon class=\"polygon2\" [attr.points]=\"xPLSR +\r\n      ',' +\r\n      (subjectY + 6) +\r\n      ' ' +\r\n      (xPLSR - 5) +\r\n      ',' +\r\n      (subjectY + 14) +\r\n      ' ' +\r\n      (xPLSR + 5) +\r\n      ',' +\r\n      (subjectY + 14)\" [attr.stroke]=\"aheadBehindDaysLSRColor\" [attr.stroke-width]=\"0\"\r\n      [attr.fill]=\"aheadBehindDaysLSRColor\" [attr.d]=\"labels.PLSR_LABEL\"\r\n      [matTooltipClass]=\"'ctos-text-centered-tooltip'\"\r\n      [matTooltip]=\"getTooltipData(labels.PLSR, labels.PLSR_SHORT, diffLSR)\"></polygon>\r\n  </g>\r\n</svg>",
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    MilestoneGraphComponent.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectorRef"] }
    ]; };
    MilestoneGraphComponent.propDecorators = {
        milestone: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        range: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        labels: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
    };
    return MilestoneGraphComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/study-list.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StudyListService = /** @class */ (function () {
    /**
     * Creates an instance of study list service.
     * @param payloadCommandService
     * @param baseConnectionService
     */
    function StudyListService(payloadCommandService, baseConnectionService, userDataService) {
        this.payloadCommandService = payloadCommandService;
        this.baseConnectionService = baseConnectionService;
        this.userDataService = userDataService;
        this.studyKeySubject = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        this.studyKey$ = this.studyKeySubject.asObservable();
    }
    Object.defineProperty(StudyListService.prototype, "studyTag", {
        get: /**
         * @return {?}
         */
        function () {
            return this.sTag;
        },
        set: /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.sTag = v;
        },
        enumerable: true,
        configurable: true
    });
    // /**
    //  * Gets criteria details
    //  * @returns
    //  */
    // GetCriteriaDetails() {
    //   return this.filterDataService.histList.pipe(
    //     map(messages => {
    //       return messages;
    //     })
    //   );
    // }
    // /**
    //  * Gets study list
    //  * @param [criteriName]
    //  * @param [cacheType]
    //  * @returns
    //  */
    // getStudyList(criteriName?: any, cacheType?: CacheType) {
    //   if (!cacheType) {
    //     cacheType = CacheType.sticky;
    //   }
    //   const CriteriNames = criteriName ? criteriName : [];
    //   const tempObject = {
    //     criteriaList: {
    //       value: []
    //     }
    //   };
    //   CriteriNames.forEach(function (value, key) {
    //     tempObject.criteriaList.value.push({
    //       criterionVal: {
    //         params: {
    //           criterionId: value
    //         },
    //         value: 'All'
    //       }
    //     });
    //   });
    //   const moduleInfo = {
    //     moduleName: 'STDLST',
    //     pageName: 'MNGHILST'
    //   };
    //   const studyListPayload = this.payloadCommandService.getCommandDetails(
    //     'GetStudyList',
    //     {},
    //     {},
    //     tempObject,
    //     moduleInfo
    //   );
    //   return this.baseConnectionService
    //     .sendRequest(studyListPayload, {
    //       cacheKey: CacheKey.StudyDataKey,
    //       cacheType: cacheType
    //     })
    //     .pipe(
    //       map(response => {
    //         if (
    //           response.hasOwnProperty('studyList') &&
    //           response.studyList.hasOwnProperty('studyThumbnail')
    //         ) {
    //           return response.studyList.studyThumbnail;
    //         } else {
    //           return response;
    //         }
    //       })
    //     );
    // }
    /**
     * Gets study tag list
     * @returns study tag list
     */
    // /**
    //  * Gets criteria details
    //  * @returns
    //  */
    // GetCriteriaDetails() {
    //   return this.filterDataService.histList.pipe(
    //     map(messages => {
    //       return messages;
    //     })
    //   );
    // }
    // /**
    //  * Gets study list
    //  * @param [criteriName]
    //  * @param [cacheType]
    //  * @returns
    //  */
    // getStudyList(criteriName?: any, cacheType?: CacheType) {
    //   if (!cacheType) {
    //     cacheType = CacheType.sticky;
    //   }
    //   const CriteriNames = criteriName ? criteriName : [];
    //   const tempObject = {
    //     criteriaList: {
    //       value: []
    //     }
    //   };
    //   CriteriNames.forEach(function (value, key) {
    //     tempObject.criteriaList.value.push({
    //       criterionVal: {
    //         params: {
    //           criterionId: value
    //         },
    //         value: 'All'
    //       }
    //     });
    //   });
    //   const moduleInfo = {
    //     moduleName: 'STDLST',
    //     pageName: 'MNGHILST'
    //   };
    //   const studyListPayload = this.payloadCommandService.getCommandDetails(
    //     'GetStudyList',
    //     {},
    //     {},
    //     tempObject,
    //     moduleInfo
    //   );
    //   return this.baseConnectionService
    //     .sendRequest(studyListPayload, {
    //       cacheKey: CacheKey.StudyDataKey,
    //       cacheType: cacheType
    //     })
    //     .pipe(
    //       map(response => {
    //         if (
    //           response.hasOwnProperty('studyList') &&
    //           response.studyList.hasOwnProperty('studyThumbnail')
    //         ) {
    //           return response.studyList.studyThumbnail;
    //         } else {
    //           return response;
    //         }
    //       })
    //     );
    // }
    /**
     * Gets study tag list
     * @param {?} searchCriteria
     * @param {?=} actionParam
     * @return {?} study tag list
     */
    StudyListService.prototype.getStudyTagList = 
    // /**
    //  * Gets criteria details
    //  * @returns
    //  */
    // GetCriteriaDetails() {
    //   return this.filterDataService.histList.pipe(
    //     map(messages => {
    //       return messages;
    //     })
    //   );
    // }
    // /**
    //  * Gets study list
    //  * @param [criteriName]
    //  * @param [cacheType]
    //  * @returns
    //  */
    // getStudyList(criteriName?: any, cacheType?: CacheType) {
    //   if (!cacheType) {
    //     cacheType = CacheType.sticky;
    //   }
    //   const CriteriNames = criteriName ? criteriName : [];
    //   const tempObject = {
    //     criteriaList: {
    //       value: []
    //     }
    //   };
    //   CriteriNames.forEach(function (value, key) {
    //     tempObject.criteriaList.value.push({
    //       criterionVal: {
    //         params: {
    //           criterionId: value
    //         },
    //         value: 'All'
    //       }
    //     });
    //   });
    //   const moduleInfo = {
    //     moduleName: 'STDLST',
    //     pageName: 'MNGHILST'
    //   };
    //   const studyListPayload = this.payloadCommandService.getCommandDetails(
    //     'GetStudyList',
    //     {},
    //     {},
    //     tempObject,
    //     moduleInfo
    //   );
    //   return this.baseConnectionService
    //     .sendRequest(studyListPayload, {
    //       cacheKey: CacheKey.StudyDataKey,
    //       cacheType: cacheType
    //     })
    //     .pipe(
    //       map(response => {
    //         if (
    //           response.hasOwnProperty('studyList') &&
    //           response.studyList.hasOwnProperty('studyThumbnail')
    //         ) {
    //           return response.studyList.studyThumbnail;
    //         } else {
    //           return response;
    //         }
    //       })
    //     );
    // }
    /**
     * Gets study tag list
     * @param {?} searchCriteria
     * @param {?=} actionParam
     * @return {?} study tag list
     */
    function (searchCriteria, actionParam) {
        var _this = this;
        if (searchCriteria === undefined || searchCriteria === null) {
            searchCriteria = '';
        }
        /** @type {?} */
        var moduleInfo = CTOSUtil.getModuleInfo();
        /** @type {?} */
        var mruStudyListIds = this.userDataService.getMruStudyList();
        /** @type {?} */
        var studyTagsPayload;
        if (actionParam.endPoint) {
            actionParam.url = common_library__WEBPACK_IMPORTED_MODULE_2__["APIEndPoints"].STUDY_TAGS_LIST; // will change
            studyTagsPayload = this.payloadCommandService.getApiRequest(COMMAND.GET_STUDY_TAGS_LIST, null, {
                'mruStudyList': mruStudyListIds,
                'searchCriteria': searchCriteria
            }, moduleInfo);
            return this.baseConnectionService
                .send(studyTagsPayload, actionParam)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.handleStudyTagListRes(response, mruStudyListIds); })));
        }
        else {
            studyTagsPayload = this.payloadCommandService.getCommandDetails(COMMAND.GET_STUDY_TAGS_LIST, {
                'mruStudyList': mruStudyListIds,
                'searchCriteria': searchCriteria
            }, null, null, moduleInfo);
            return this.baseConnectionService
                .sendRequest(studyTagsPayload)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.handleStudyTagListRes(response, mruStudyListIds); })));
        }
    };
    /**
     * @param {?} response
     * @param {?} mruStudyListIds
     * @return {?}
     */
    StudyListService.prototype.handleStudyTagListRes = /**
     * @param {?} response
     * @param {?} mruStudyListIds
     * @return {?}
     */
    function (response, mruStudyListIds) {
        if (response.result === common_library__WEBPACK_IMPORTED_MODULE_2__["COMMON"].RESULT_OK) {
            /** @type {?} */
            var retResponse = {};
            if (response.hasOwnProperty('mruStudyTags')) {
                if (response.mruStudyTags.studyTag instanceof Array) {
                    retResponse['recentListItems'] = response.mruStudyTags.studyTag;
                }
                else if (response.mruStudyTags.studyTag) {
                    retResponse['recentListItems'] = [response.mruStudyTags.studyTag];
                }
                else {
                    retResponse['recentListItems'] = [];
                }
            }
            else {
                retResponse['recentListItems'] = [];
            }
            this.sortMruStudyTags(retResponse['recentListItems'], mruStudyListIds);
            if (response.hasOwnProperty('listOfStudyTags')) {
                if (response.listOfStudyTags.studyTag instanceof Array) {
                    retResponse['allListItems'] = response.listOfStudyTags.studyTag;
                }
                else if (response.listOfStudyTags.studyTag) {
                    retResponse['allListItems'] = [response.listOfStudyTags.studyTag];
                }
                else {
                    retResponse['allListItems'] = [];
                }
            }
            else {
                retResponse['allListItems'] = [];
            }
            retResponse['allListItems'] = this.sortListOfStudyTags(retResponse['allListItems'], 'id');
            return retResponse;
        }
        else {
            return new common_library__WEBPACK_IMPORTED_MODULE_2__["ApplicationError"](response.error.message, response.error.errorCode);
        }
    };
    /**
     * @param {?} itemsArray
     * @param {?} mruStudyListIds
     * @return {?}
     */
    StudyListService.prototype.sortMruStudyTags = /**
     * @param {?} itemsArray
     * @param {?} mruStudyListIds
     * @return {?}
     */
    function (itemsArray, mruStudyListIds) {
        /** @type {?} */
        var sortingArr = mruStudyListIds.split(';').map((/**
         * @param {?} t
         * @return {?}
         */
        function (t) {
            return parseInt(t, 10);
        }));
        return itemsArray.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            return sortingArr.indexOf(a.key) - sortingArr.indexOf(b.key);
        })).reverse();
    };
    /**
     * @param {?} data
     * @return {?}
     */
    StudyListService.prototype.shareStudyKey = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        this.studyKeySubject.next(data.key);
    };
    /**
     * @private
     * @param {?} itemsArray
     * @param {?} attributeName
     * @return {?}
     */
    StudyListService.prototype.sortListOfStudyTags = /**
     * @private
     * @param {?} itemsArray
     * @param {?} attributeName
     * @return {?}
     */
    function (itemsArray, attributeName) {
        return itemsArray.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            /** @type {?} */
            var str1 = a[attributeName].toString().toLowerCase();
            /** @type {?} */
            var str2 = b[attributeName].toString().toLowerCase();
            if (str1 > str2) {
                return 1;
            }
            else if (str1 < str2) {
                return -1;
            }
            else {
                return 0;
            }
        }));
    };
    /**
     * @param {?=} actionParam
     * @return {?}
     */
    StudyListService.prototype.getStudyTags = /**
     * @param {?=} actionParam
     * @return {?}
     */
    function (actionParam) {
        var _this = this;
        /** @type {?} */
        var moduleInfo = CTOSUtil.getModuleInfo();
        if (actionParam.endPoint) {
            actionParam.url = common_library__WEBPACK_IMPORTED_MODULE_2__["APIEndPoints"].STUDY_TAGS; // will change
            // will change
            /** @type {?} */
            var studyTagsPayload = this.payloadCommandService.getApiRequest(COMMAND.GET_STUDY_TAGS, null, null, moduleInfo);
            return this.baseConnectionService
                .send(studyTagsPayload, actionParam)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return _this.handleStudyTagsRes(response); })));
        }
        else {
            /** @type {?} */
            var payload = this.payloadCommandService.getCommandDetails(COMMAND.GET_STUDY_TAGS, null, null, null, moduleInfo);
            return this.baseConnectionService.sendRequest(payload).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                // if (response.result === COMMON.RESULT_OK) {
                //   if (Array.isArray(response.studyTags.studyTag)) {
                //     this.studyTag = response.studyTags.studyTag;
                //   } else {
                //     this.studyTag = [response.studyTags.studyTag];
                //   }
                //   console.log(this.studyTag);
                //   return of([]);
                // }
                _this.handleStudyTagsRes(response);
            })));
        }
    };
    /**
     * @param {?} response
     * @return {?}
     */
    StudyListService.prototype.handleStudyTagsRes = /**
     * @param {?} response
     * @return {?}
     */
    function (response) {
        if (response.result === common_library__WEBPACK_IMPORTED_MODULE_2__["COMMON"].RESULT_OK) {
            if (Array.isArray(response.studyTags.studyTag)) {
                this.studyTag = response.studyTags.studyTag;
            }
            else {
                this.studyTag = [response.studyTags.studyTag];
            }
            console.log(this.studyTag);
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["of"])([]);
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    StudyListService.prototype.getStudyInfoByKey = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var tag = {};
        if (this.studyTag) {
            tag = this.studyTag.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) { return item.key.toString() === key.toString(); }));
        }
        return tag;
    };
    StudyListService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    StudyListService.ctorParameters = function () { return [
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["PayloadCommandService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"] },
        { type: UserDataService }
    ]; };
    /** @nocollapse */ StudyListService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function StudyListService_Factory() { return new StudyListService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["PayloadCommandService"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(UserDataService)); }, token: StudyListService, providedIn: "root" });
    return StudyListService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/plan-dropdown-list/plan-dropdown-list.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PlanDropdownListComponent = /** @class */ (function () {
    function PlanDropdownListComponent(localeAppResourcesService, studyListService, dialogService) {
        this.localeAppResourcesService = localeAppResourcesService;
        this.studyListService = studyListService;
        this.dialogService = dialogService;
        this.planSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    PlanDropdownListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.placeholder = this.localeAppResourcesService.getResource('PLNDT_DROPDOWN_PLACEHOLDER');
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    PlanDropdownListComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.hasOwnProperty('items') && changes.items.currentValue !== undefined) {
            this.setSelectedItem();
        }
    };
    // TODO in progress
    // TODO in progress
    /**
     * @param {?} event
     * @return {?}
     */
    PlanDropdownListComponent.prototype.onPlanSelect = 
    // TODO in progress
    /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        this.canDeactivate().subscribe((/**
         * @param {?} res
         * @return {?}
         */
        function (res) {
            if (res === true) {
                _this.dialogService.isStatusChanged = false;
                _this.selectedPlanKey = event.value;
                _this.setSelectedItem();
                _this.planSelect.emit(_this.selectedPlanListItem);
            }
            else {
                if (event && event.source) {
                    /** @type {?} */
                    var matSelect = event.source;
                    matSelect.writeValue(_this.selectedPlanKey);
                }
            }
        }));
    };
    /**
     * @param {?=} isReset
     * @return {?}
     */
    PlanDropdownListComponent.prototype.canDeactivate = /**
     * @param {?=} isReset
     * @return {?}
     */
    function (isReset) {
        if (isReset === true) {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["of"])(true);
        }
        if (this.dialogService.isStatusChanged === true) {
            return this.dialogService.confirm();
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["of"])(true);
    };
    /**
     * @return {?}
     */
    PlanDropdownListComponent.prototype.setSelectedItem = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.items.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item.key === _this.selectedPlanKey) {
                _this.selectedPlanListItem = item;
            }
            else {
                if (item.hasOwnProperty('briefAdjustPlanList')) {
                    /** @type {?} */
                    var adjItemIndex = item.briefAdjustPlanList.findIndex((/**
                     * @param {?} adjItem
                     * @return {?}
                     */
                    function (adjItem) {
                        return adjItem.key === _this.selectedPlanKey;
                    }));
                    if (adjItemIndex !== -1) {
                        _this.selectedPlanListItem = item.briefAdjustPlanList[adjItemIndex];
                    }
                }
            }
        }));
    };
    /**
     * @return {?}
     */
    PlanDropdownListComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.placeholder = null;
        this.selectedPlanListItem = null;
    };
    PlanDropdownListComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-plan-dropdown-list',
                    template: "<mat-form-field class=\"dropdown-form-field\" floatLabel=\"never\">\r\n  <mat-select [placeholder]=\"placeholder\" disableOptionCentering=\"true\" panelClass=\"plan-dropdown-panel ie-dropdown\" [value]=\"selectedPlanKey\"\r\n    (selectionChange)=\"onPlanSelect($event)\">\r\n    <mat-select-trigger [matTooltip]=\"selectedPlanListItem?.name\" [matTooltipClass]=\"'ctos-tooltip'\">\r\n      <img [src]=\"selectedPlanListItem?.planImageStatus\" class=\"plan-status-icon\" />\r\n      <span [innerHTML]=\"selectedPlanListItem?.name\"></span>\r\n    </mat-select-trigger>\r\n    <ng-container *ngFor=\"let item of items\">\r\n      <mat-option [value]=\"item.key\" class=\"main-item\" [matTooltip]=\"item.name\" [matTooltipClass]=\"'ctos-tooltip'\">\r\n        <img [src]=\"item?.planImageStatus\" class=\"plan-status-icon\" />\r\n        <span [innerHTML]=\"item.name\"></span>\r\n      </mat-option>\r\n      <mat-option *ngFor=\"let subitem of item.briefAdjustPlanList\" [value]=\"subitem.key\" class=\"sub-item\" [matTooltip]=\"subitem.name\" [matTooltipClass]=\"'ctos-tooltip'\">\r\n        <img [src]=\"subitem?.planImageStatus\" class=\"plan-status-icon\" />\r\n        <span [innerHTML]=\"subitem.name\"></span>\r\n      </mat-option>\r\n    </ng-container>\r\n  </mat-select>\r\n</mat-form-field>",
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None
                }] }
    ];
    /** @nocollapse */
    PlanDropdownListComponent.ctorParameters = function () { return [
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["LocaleAppResourcesService"] },
        { type: StudyListService },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["DialogService"] }
    ]; };
    PlanDropdownListComponent.propDecorators = {
        items: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        selectedPlanKey: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        planSelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }]
    };
    return PlanDropdownListComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/trim-pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TrimPipe = /** @class */ (function () {
    function TrimPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    TrimPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value) {
            return value.toString().trim();
        }
        return '';
    };
    TrimPipe.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"], args: [{ name: 'trim' },] }
    ];
    return TrimPipe;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/cue-card/cue-card.enum.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var CueCard = {
    SourceTargets: "SourceTargets",
    StudyTargets: "StudyTargets",
    Worldwide: "Worldwide",
    ParentPlan: "ParentPlan",
    Actuals: "Actuals",
    Projections: "Projections",
    Country: "Country",
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/cue-card/cue-card.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CueCardService = /** @class */ (function () {
    /**
   * Creates an instance of cue card service.
   * @param localeAppResourcesService
   */
    function CueCardService(localeAppResourcesService) {
        this.localeAppResourcesService = localeAppResourcesService;
    }
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    CueCardService.prototype.getResouce = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.localeAppResourcesService.getResource(key);
    };
    /**
     * @return {?}
     */
    CueCardService.prototype.getCueCardHeader = /**
     * @return {?}
     */
    function () {
        return this.getResouce('REF_CARD_HEAD');
    };
    /**
     * @return {?}
     */
    CueCardService.prototype.getCueCardResources = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var resource = {};
        resource.SourceTargets = this.getResouce(CueCard.SourceTargets);
        resource.StudyTargets = this.getResouce(CueCard.StudyTargets);
        resource.Worldwide = this.getResouce(CueCard.Worldwide);
        resource.ParentPlan = this.getResouce(CueCard.ParentPlan);
        resource.Actuals = this.getResouce(CueCard.Actuals);
        resource.Projections = this.getResouce(CueCard.Projections);
        resource.Country = this.getResouce(CueCard.Country);
        return resource;
    };
    CueCardService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"] }
    ];
    /** @nocollapse */
    CueCardService.ctorParameters = function () { return [
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["LocaleAppResourcesService"] }
    ]; };
    return CueCardService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/cue-card/cue-card.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CueCardComponent = /** @class */ (function () {
    function CueCardComponent(cueCardService, localeAppResourcesService) {
        this.cueCardService = cueCardService;
        this.localeAppResourcesService = localeAppResourcesService;
        this.rowElements = [];
        this.headElements = [];
        this.extraElements = [];
        this.headerElements = [];
        this.NaToolTip = NA_TOOLTIP;
        this.referenceCardHeading = this.cueCardService.getCueCardHeader();
    }
    /**
     * @return {?}
     */
    CueCardComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CueCardComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        /** @type {?} */
        var cueDetails = changes.cueCardDetails;
        this.cueCardDetails = cueDetails.currentValue;
        if (this.cueCardDetails !== undefined) {
            this.getHeadElements();
            this.getRowElements();
        }
    };
    /*Extracting the row names from the cue card details.
    Here, extracting the row names from the object, specified in headerElements
    */
    /*Extracting the row names from the cue card details.
      Here, extracting the row names from the object, specified in headerElements
      */
    /**
     * @return {?}
     */
    CueCardComponent.prototype.getRowElements = /*Extracting the row names from the cue card details.
      Here, extracting the row names from the object, specified in headerElements
      */
    /**
     * @return {?}
     */
    function () {
        this.rowElements = [];
        if (this.headElements.length !== 0) {
            for (var key = 1; key < this.headElements.length; key++) {
                if (this.cueCardDetails[key - 1][this.headElements[key]]) {
                    this.extraElements = Object.keys(this.cueCardDetails[key - 1][this.headElements[key]]);
                }
                else {
                    this.extraElements = [];
                }
                /** @type {?} */
                var i = 0;
                while (i < this.extraElements.length) {
                    if (this.rowElements.indexOf(this.extraElements[i]) === -1) {
                        this.rowElements.push(this.extraElements[i]);
                    }
                    i++;
                }
            }
        }
    };
    /**
     * @private
     * @param {?} key
     * @return {?}
     */
    CueCardComponent.prototype.getCueCardResource = /**
     * @private
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.localeAppResourcesService.getResource(key);
    };
    Object.defineProperty(CueCardComponent.prototype, "cueCardResources", {
        get: /**
         * @private
         * @return {?}
         */
        function () {
            return {
                actuals: this.getCueCardResource('ACTUALS_CUECARD'),
                approvedPlan: this.getCueCardResource('APPROVEDPLAN_CUECARD')
            };
        },
        enumerable: true,
        configurable: true
    });
    /*Extracting the column names from the cueCardDetails
      Object.keys() method returns the keys of the object
    */
    /*Extracting the column names from the cueCardDetails
        Object.keys() method returns the keys of the object
      */
    /**
     * @return {?}
     */
    CueCardComponent.prototype.getHeadElements = /*Extracting the column names from the cueCardDetails
        Object.keys() method returns the keys of the object
      */
    /**
     * @return {?}
     */
    function () {
        this.headerElements = [];
        if (this.cueCardDetails !== null || this.cueCardDetails.length !== 0) {
            this.headerElements = this.cueCardDetails.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                return Object.keys(value);
            }));
            this.headElements = this.headerElements.slice();
            this.headElements.unshift(' ');
            console.log('this.headElements', this.headElements);
            if (this.headElements[5][0] !== this.cueCardResources.actuals && this.headElements[5][0] !== this.cueCardResources.approvedPlan) {
                this.referenceCardHeading = this.headElements[5][0];
                // this.headElements[4][0] = this.headElements[4][0].toLowerCase()
                //   .split(' ')
                //   .map((s) => s.charAt(0).toUpperCase() + s.substring(1))
                //   .join(' ');
            }
            else {
                this.referenceCardHeading = this.cueCardService.getCueCardHeader();
            }
        }
    };
    /**
     * @param {?} key
     * @return {?}
     */
    CueCardComponent.prototype.getHeaderLabel = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.cueCardService.getCueCardResources()[key] || key;
    };
    /**
     * @return {?}
     */
    CueCardComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.cueCardDetails = [];
    };
    CueCardComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-cue-card',
                    template: "<div class=\"cue-card-container-div\">\r\n  <h5 class=\"ctos-card-header ctos-card-title\">{{referenceCardHeading}}</h5>\r\n  <table class=\"table table-borderless\">\r\n    <thead>\r\n      <tr>\r\n        <th *ngFor=\"let head of headElements; let item = index\" class=\"col-header\"\r\n          [matTooltip]=\"((item == 4 || item == 5) && getHeaderLabel(head) != 'approved Plan' &&  getHeaderLabel(head) != 'Actuals') ? getHeaderLabel(head) : ''\" \r\n          matTooltipClass=\"tool-tip-capitlize\"\r\n          [ngClass]=\"{'boldHeader': (item == 4 || item == 5) && getHeaderLabel(head) != 'approved Plan' &&  getHeaderLabel(head) != 'Actuals'}\">\r\n          {{getHeaderLabel(head)}}\r\n        </th>\r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr *ngFor=\"let row of rowElements; let item = index\" class=\"row-data\">\r\n        <td>{{row}}</td>\r\n        <td *ngFor=\"let head of headerElements; let index = index\">\r\n          <span [matTooltip]=\"cueCardDetails[index][head][row] == 'N/A' ? NaToolTip : ''\">\r\n            {{cueCardDetails[index][head][row] | ctosDateCustomPipe}}\r\n          </span>\r\n        </td>\r\n      </tr>\r\n    </tbody>\r\n  </table>\r\n</div>",
                    providers: [CueCardService]
                }] }
    ];
    /** @nocollapse */
    CueCardComponent.ctorParameters = function () { return [
        { type: CueCardService },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["LocaleAppResourcesService"] }
    ]; };
    CueCardComponent.propDecorators = {
        cueCardDetails: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
    };
    return CueCardComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/dropdown/dropdown.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DropdownComponent = /** @class */ (function () {
    function DropdownComponent() {
        this.items = new _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormControl"]();
        this.classes = 'ctos-so-dropdown';
        this.isDisable = false;
        this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    DropdownComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        if (this.config && this.config.subject) {
            this.classes = 'ctos-so-dropdown create-plan';
        }
        else {
            this.classes = 'ctos-so-dropdown sort-options';
        }
    };
    // tslint:disable-next-line: use-life-cycle-interface
    // tslint:disable-next-line: use-life-cycle-interface
    /**
     * @param {?} changes
     * @return {?}
     */
    DropdownComponent.prototype.ngOnChanges = 
    // tslint:disable-next-line: use-life-cycle-interface
    /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        for (var propName in changes) {
            if (propName && propName === 'config') {
                /** @type {?} */
                var change = changes[propName];
                if (change.currentValue) {
                    // this.setPlanInfo(change.currentValue);
                    // this.config.disa
                    this.isDisable = change.currentValue.disabled;
                }
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    DropdownComponent.prototype.onSelect = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.selectionChange.emit(event.value);
    };
    /**
     * @param {?} op1
     * @param {?} op2
     * @return {?}
     */
    DropdownComponent.prototype.compareFn = /**
     * @param {?} op1
     * @param {?} op2
     * @return {?}
     */
    function (op1, op2) {
        return op1[this['id']] === op2[this['id']];
    };
    DropdownComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-dropdown',
                    template: "<mat-form-field [ngClass]=\"{'create-plan': config?.subject ? true: false}\" appearance=\"outline\" class=\"ctos-so-dropdown\" #matSelect>\r\n  <mat-select class=\"ctos-drop-down\"\r\n    [formControl]=\"items\"\r\n    [id]=\"config.keyField\"\r\n    (selectionChange)=\"onSelect($event)\"\r\n    [(ngModel)]=\"config.selectedItem\"\r\n    [compareWith]=\"compareFn\"\r\n    [panelClass]=\"classes\"\r\n    [disableOptionCentering]=\"true\"\r\n    [placeholder]=\"config.noSelectLabel\"\r\n    [disabled]=\"isDisable\"\r\n  >\r\n    <mat-select-trigger>\r\n      <span\r\n        *ngIf=\"config.selectedItem\" class=\"ctos-drop-down-content\"\r\n        >{{ config?.resources.prefixLabel + ' '}}{{\r\n          config.selectedItem[config.keyField]\r\n        }}\r\n      </span>\r\n    </mat-select-trigger>\r\n    <mat-option\r\n      *ngFor=\"let item of list\"\r\n      [value]=\"item\"\r\n      [matTooltip]=\"item[config.keyField]\"\r\n      [matTooltipPosition]=\"config.tooltipPosition\"\r\n    >\r\n      {{ item[config.keyField] }}</mat-option\r\n    >\r\n  </mat-select>\r\n</mat-form-field>\r\n",
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None
                }] }
    ];
    /** @nocollapse */
    DropdownComponent.ctorParameters = function () { return []; };
    DropdownComponent.propDecorators = {
        list: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        config: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }]
    };
    return DropdownComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/study-list-input.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StudyListInput = /** @class */ (function () {
    function StudyListInput() {
    }
    return StudyListInput;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/app-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AppDataService = /** @class */ (function () {
    /**
     * Creates an instance of app data service.
     * @param payloadCommandService
     * @param baseConnectionService
     */
    function AppDataService(payloadCommandService, baseConnectionService, localeAppResourcesService) {
        this.payloadCommandService = payloadCommandService;
        this.baseConnectionService = baseConnectionService;
        this.localeAppResourcesService = localeAppResourcesService;
    }
    /**
     * Gets app data
     * It will load the application data.
     * @param [actionParam]
     * @returns
     *
     */
    /**
     * Gets app data
     * It will load the application data.
     * @param {?=} actionParam
     * @return {?}
     *
     */
    AppDataService.prototype.getAppData = /**
     * Gets app data
     * It will load the application data.
     * @param {?=} actionParam
     * @return {?}
     *
     */
    function (actionParam) {
        var _this = this;
        actionParam = !actionParam ? (/** @type {?} */ ({})) : actionParam;
        actionParam.cacheKey = common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].GetAppDataKey;
        actionParam.cacheType = common_library__WEBPACK_IMPORTED_MODULE_2__["CacheType"].sticky;
        actionParam.storeType = common_library__WEBPACK_IMPORTED_MODULE_2__["StoreType"].Session;
        actionParam.encryption = common_library__WEBPACK_IMPORTED_MODULE_2__["EncryptionAction"].encrypt;
        actionParam.cmdName = ''; // reset cmd name
        actionParam.xmlRequest = '';
        /** @type {?} */
        var moduleInfo = {
            moduleName: 'NEWPLANTAB'
        };
        /** @type {?} */
        var queryParams = {
            'appType': 'SOMAIN'
        };
        if (actionParam.endPoint) {
            actionParam.url = common_library__WEBPACK_IMPORTED_MODULE_2__["APIEndPoints"].APP_DATA;
        }
        /** @type {?} */
        var stargetAppData;
        if (actionParam.endPoint) {
            stargetAppData = this.payloadCommandService.getApiRequest(APP_DATA, queryParams, null, moduleInfo);
            return this.baseConnectionService.send(stargetAppData, actionParam)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data.result === common_library__WEBPACK_IMPORTED_MODULE_2__["COMMON"].RESULT_OK) {
                    _this.appDataResponse = data;
                    return _this.appDataResponse;
                }
                else if (data.result === common_library__WEBPACK_IMPORTED_MODULE_2__["COMMON"].RESULT_ERROR) {
                    console.log(data.error.message);
                    return data.error.message;
                }
            })));
        }
        else {
            stargetAppData = this.payloadCommandService.getCommandDetails(APP_DATA, null, null, null, moduleInfo);
            return this.baseConnectionService.sendRequest(stargetAppData, actionParam)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                if (data.result === common_library__WEBPACK_IMPORTED_MODULE_2__["COMMON"].RESULT_OK) {
                    _this.appDataResponse = data;
                    return _this.appDataResponse;
                }
                else if (data.result === common_library__WEBPACK_IMPORTED_MODULE_2__["COMMON"].RESULT_ERROR) {
                    console.log(data.error.message);
                    return data.error.message;
                }
            })));
        }
    };
    /**
     * @return {?}
     */
    AppDataService.prototype.getConfiguredRateLabel = /**
     * @return {?}
     */
    function () {
        if (this.appDataResponse && this.appDataResponse.appMetadata) {
            if (this.appDataResponse.appMetadata.isSRAvailable) {
                return this.localeAppResourcesService.getResource('Screening');
            }
            else if (!this.appDataResponse.appMetadata.isSRAvailable) {
                return this.localeAppResourcesService.getResource('Randomization');
            }
        }
    };
    /**
     * @param {?} reportingPeriod
     * @return {?}
     */
    AppDataService.prototype.getReportingFreqDefByName = /**
     * @param {?} reportingPeriod
     * @return {?}
     */
    function (reportingPeriod) {
        if (this.appDataResponse && this.appDataResponse.appMetadata && reportingPeriod) {
            /** @type {?} */
            var reportingFreqDef = this.appDataResponse.appMetadata.reportingFrequency.reportingFreqDef.find((/**
             * @param {?} reportingFreqItem
             * @return {?}
             */
            function (reportingFreqItem) {
                return reportingFreqItem.Name === reportingPeriod;
            }));
            return reportingFreqDef;
        }
    };
    /**
     * @return {?}
     */
    AppDataService.prototype.isSRAvailable = /**
     * @return {?}
     */
    function () {
        if (this.appDataResponse && this.appDataResponse.appMetadata) {
            return this.appDataResponse.appMetadata.isSRAvailable;
        }
        return false;
    };
    /**
     * @return {?}
     */
    AppDataService.prototype.getCurveColors = /**
     * @return {?}
     */
    function () {
        if (this.appDataResponse.appMetadata && this.appDataResponse.appMetadata.curveColorsList
            && this.appDataResponse.appMetadata.curveColorsList.curveColors) {
            return this.appDataResponse.appMetadata.curveColorsList.curveColors;
        }
    };
    /**
     * @return {?}
     */
    AppDataService.prototype.isCountryLockEnabled = /**
     * @return {?}
     */
    function () {
        if (this.appDataResponse && this.appDataResponse.appMetadata && this.appDataResponse.appMetadata.isCountryLockEnable) {
            return this.appDataResponse.appMetadata.isCountryLockEnable;
        }
        return false;
    };
    /**
     * @return {?}
     */
    AppDataService.prototype.isProjectedRatesEnabled = /**
     * @return {?}
     */
    function () {
        if (this.appDataResponse && this.appDataResponse.appMetadata && this.appDataResponse.appMetadata.isEnableProjRates) {
            return this.appDataResponse.appMetadata.isEnableProjRates;
        }
        return false;
    };
    AppDataService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    AppDataService.ctorParameters = function () { return [
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["PayloadCommandService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["LocaleAppResourcesService"] }
    ]; };
    /** @nocollapse */ AppDataService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function AppDataService_Factory() { return new AppDataService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["PayloadCommandService"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["LocaleAppResourcesService"])); }, token: AppDataService, providedIn: "root" });
    return AppDataService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/filter-data.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FilterDataService = /** @class */ (function () {
    /**
     * Creates an instance of filter data service.
     * @param payloadCommandService
     * @param baseConnectionService
     */
    function FilterDataService(payloadCommandService, baseConnectionService) {
        this.payloadCommandService = payloadCommandService;
        this.baseConnectionService = baseConnectionService;
        this.filterDataResponse = null;
        this.iscro = false;
        this.histStudiesFilterCriteriaList = [];
        this.standardCriteriaList = [];
        this.customCriteriaList = [];
        this.displayColumnList = [];
        this.multipleSolarKeys = '';
        this.displayColumListCustom = [];
        this.histList = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
    }
    /**
     * Gets filter data
     * @param params
     * @param [cacheType]
     * @returns
     */
    /**
     * Gets filter data
     * @param {?=} params
     * @param {?=} actionParam
     * @return {?}
     */
    FilterDataService.prototype.getFilterData = /**
     * Gets filter data
     * @param {?=} params
     * @param {?=} actionParam
     * @return {?}
     */
    function (params, actionParam) {
        if (!params) {
            params = FILTER_PARAMS.commandName;
        }
        /** @type {?} */
        var baseParam = {};
        if (!actionParam) {
            baseParam.cacheKey = common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].FilterDataKey;
            actionParam = baseParam;
        }
        /** @type {?} */
        var moduleInfo = CTOSUtil.getModuleInfo();
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var response;
        /** @type {?} */
        var filterDataPayload = that.payloadCommandService.getCommandDetails(params, null, null, null, moduleInfo);
        return that.baseConnectionService.sendRequest(filterDataPayload, actionParam)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            response = data;
            if (response.result === common_library__WEBPACK_IMPORTED_MODULE_2__["COMMON"].RESULT_OK) {
                that.filterDataResponse = response;
                that.getHistStudiesFilterCriteriaList();
                return response.result;
            }
            else {
                return response.error.message;
            }
        })));
    };
    /**
     * Gets hist studies filter criteria list
     *
     * There are two type of filter criteria metadata STDY (Studies) and Historical Studies (HSTDY)
     * This method loop the entire critieria and check the HSTDY meta data condition, and call the
     * getStandardCustomCriteriaList and setCriteriaMetaDataMap method for each criteria.
     * getStandardCustomCriteriaList method set the value in displayColumnList, displayColumListCustom,
     * customCriteriaList and standardCriteriaList varibles.
     * setCriteriaMetaDataMap set the isCro information on historical list.
     */
    /**
     * Gets hist studies filter criteria list
     *
     * There are two type of filter criteria metadata STDY (Studies) and Historical Studies (HSTDY)
     * This method loop the entire critieria and check the HSTDY meta data condition, and call the
     * getStandardCustomCriteriaList and setCriteriaMetaDataMap method for each criteria.
     * getStandardCustomCriteriaList method set the value in displayColumnList, displayColumListCustom,
     * customCriteriaList and standardCriteriaList varibles.
     * setCriteriaMetaDataMap set the isCro information on historical list.
     * @return {?}
     */
    FilterDataService.prototype.getHistStudiesFilterCriteriaList = /**
     * Gets hist studies filter criteria list
     *
     * There are two type of filter criteria metadata STDY (Studies) and Historical Studies (HSTDY)
     * This method loop the entire critieria and check the HSTDY meta data condition, and call the
     * getStandardCustomCriteriaList and setCriteriaMetaDataMap method for each criteria.
     * getStandardCustomCriteriaList method set the value in displayColumnList, displayColumListCustom,
     * customCriteriaList and standardCriteriaList varibles.
     * setCriteriaMetaDataMap set the isCro information on historical list.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var criteriaMetaDataList;
        if (that.filterDataResponse !== null) {
            criteriaMetaDataList = that.filterDataResponse.filterCriteriaMetadata.criterionMetadataList;
            for (var i = 0; i < criteriaMetaDataList.length; i++) {
                if (criteriaMetaDataList[i].filterType === 'HSTDY') {
                    that.histStudiesFilterCriteriaList = criteriaMetaDataList[i].criterion;
                    // console.dir(that.histStudiesFilterCriteriaList);
                    that.getStandardCustomCriteriaList();
                    that.setCriteriaMetaDataMap();
                    break;
                }
            }
            this.histList.next(that.histStudiesFilterCriteriaList);
        }
    };
    /**
     * Sets criteria meta data map
     *
     * setCriteriaMetaDataMap set the isCro information on historical list.
     * @returns
     */
    /**
     * Sets criteria meta data map
     *
     * setCriteriaMetaDataMap set the isCro information on historical list.
     * @return {?}
     */
    FilterDataService.prototype.setCriteriaMetaDataMap = /**
     * Sets criteria meta data map
     *
     * setCriteriaMetaDataMap set the isCro information on historical list.
     * @return {?}
     */
    function () {
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var criterion = that.histStudiesFilterCriteriaList;
        /** @type {?} */
        var criterionLength = criterion.length;
        /** @type {?} */
        var i;
        /** @type {?} */
        var item;
        if (criterionLength > 0) {
            that.criterionMetadataMap = {};
            for (i = 0; i < criterionLength; i++) {
                item = criterion[i];
                that.criterionMetadataMap[item.id] = item;
                // To check CRO avilability
                if (item.id === 'CRO') {
                    that.iscro = true;
                }
            }
        }
        return that.criterionMetadataMap;
    };
    /**
     * Gets standard custom criteria list
     *
     * It loop the entire historical criteria list and
     * check the each criteria,  parentFilterCritieriaID property, if it is undefined then
     * it will check the isCustom property, if it is true then check the isFilter & isDisplayFiled property , if
     * isFilter property is true then push the criteria object data in customCriteria array. If isDisplayFiled property is
     * true push the criteria object data in displayColumListCustom array.
     * If isCustom property is false then  check the isFilter & isDisplayFiled property , if
     * isFilter property is true then push the criteria object data in standardCriteriaList array. If isDisplayFiled property is
     * true push the criteria object data in displayColumnList array.
     *
     */
    /**
     * Gets standard custom criteria list
     *
     * It loop the entire historical criteria list and
     * check the each criteria,  parentFilterCritieriaID property, if it is undefined then
     * it will check the isCustom property, if it is true then check the isFilter & isDisplayFiled property , if
     * isFilter property is true then push the criteria object data in customCriteria array. If isDisplayFiled property is
     * true push the criteria object data in displayColumListCustom array.
     * If isCustom property is false then  check the isFilter & isDisplayFiled property , if
     * isFilter property is true then push the criteria object data in standardCriteriaList array. If isDisplayFiled property is
     * true push the criteria object data in displayColumnList array.
     *
     * @return {?}
     */
    FilterDataService.prototype.getStandardCustomCriteriaList = /**
     * Gets standard custom criteria list
     *
     * It loop the entire historical criteria list and
     * check the each criteria,  parentFilterCritieriaID property, if it is undefined then
     * it will check the isCustom property, if it is true then check the isFilter & isDisplayFiled property , if
     * isFilter property is true then push the criteria object data in customCriteria array. If isDisplayFiled property is
     * true push the criteria object data in displayColumListCustom array.
     * If isCustom property is false then  check the isFilter & isDisplayFiled property , if
     * isFilter property is true then push the criteria object data in standardCriteriaList array. If isDisplayFiled property is
     * true push the criteria object data in displayColumnList array.
     *
     * @return {?}
     */
    function () {
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var criteriaLength = that.histStudiesFilterCriteriaList.length;
        for (var i = 0; i < criteriaLength; i++) {
            if (typeof that.histStudiesFilterCriteriaList[i].parentFilterCriteriaID === 'undefined') {
                if (that.histStudiesFilterCriteriaList[i].isCustom === true) {
                    if (that.histStudiesFilterCriteriaList[i].isFilterField === true) {
                        that.customCriteriaList.push(that.histStudiesFilterCriteriaList[i]);
                    }
                    if (that.histStudiesFilterCriteriaList[i].isDisplayField === true) {
                        that.displayColumListCustom.push(that.histStudiesFilterCriteriaList[i]);
                    }
                }
                else {
                    if (that.histStudiesFilterCriteriaList[i].isFilterField === true) {
                        that.standardCriteriaList.push(that.histStudiesFilterCriteriaList[i]);
                    }
                    if (that.histStudiesFilterCriteriaList[i].isDisplayField === true) {
                        that.displayColumnList.push(that.histStudiesFilterCriteriaList[i]);
                    }
                }
            }
            else {
                if (that.multipleSolarKeys === '') {
                    that.multipleSolarKeys = that.histStudiesFilterCriteriaList[i].solrID;
                }
                else {
                    that.multipleSolarKeys = that.multipleSolarKeys + '_' + that.histStudiesFilterCriteriaList[i].solrID;
                }
            }
        }
    };
    /**
     * This method will return the array which contain the criteria object information.
     *
     * Get the criteria object value by id.
     * Iterate the historical criteria list and check the id property if the parameter the object.id is
     * equal to criteria.id then push the criteria object in arrFilterCriteriaById array.
     *
     * @param criteriaInfo
     * @returns
     */
    /**
     * This method will return the array which contain the criteria object information.
     *
     * Get the criteria object value by id.
     * Iterate the historical criteria list and check the id property if the parameter the object.id is
     * equal to criteria.id then push the criteria object in arrFilterCriteriaById array.
     *
     * @param {?} criteriaInfo
     * @return {?}
     */
    FilterDataService.prototype.getCriteriaById = /**
     * This method will return the array which contain the criteria object information.
     *
     * Get the criteria object value by id.
     * Iterate the historical criteria list and check the id property if the parameter the object.id is
     * equal to criteria.id then push the criteria object in arrFilterCriteriaById array.
     *
     * @param {?} criteriaInfo
     * @return {?}
     */
    function (criteriaInfo) {
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var arrFilterCriteriaById = [];
        /** @type {?} */
        var isIdCheck = false;
        /** @type {?} */
        var _criterionMetadataMap = that.criterionMetadataMap;
        for (var criteriaKey in _criterionMetadataMap) {
            if (criteriaKey) {
                /** @type {?} */
                var criteriaVal = _criterionMetadataMap[criteriaKey];
                if (!isIdCheck) {
                    if (criteriaVal.id === criteriaInfo.id) {
                        isIdCheck = true;
                        arrFilterCriteriaById.push(criteriaVal);
                    }
                }
            }
        }
        return arrFilterCriteriaById;
    };
    /**
     * Gets criteria values by keys
     *
     * CriteriaData is the single criteria object which contain the following information
                {
            "dataType": "TEXT",
            "displaySeq": 5,
            "displayType": "MSLIST",
            "id": "TST",
            "isCustom": false,
            "isDisplayField": true,
            "isFilterField": true,
            "isSortable": true,
            "jsonFieldValue": "sampleData",
            "name": "TSTSample",
            "solrID": "sampleKey",
            "sortFilterSolrField": "sampleValue",
            "data": [
                {
                "code": "sampleA",
                "key": 11,
                "value": "sampleA"
                },
                {
                "code": "SampelB",
                "key": 12,
                "value": "SampelB"
                },
            ]
            }
     * `
     * criteriaInfo is the list of key value pair arrary like
            [  {key :'1', value : null},
            {key :'11', value : null},
            {key :'10', value : null},
            {key :'14', value : null},
            ]
    * Iterate the criteriaData.data array, check the data property of criteriaInfo if it is defined then iterate the
    * critieriaInfo and check the criteriaData data property if it is array then check the criteriaData.data[i].key equal to
    * criteriaInfo.data[i].key if it is equal then set push the value in arrFilterCriteriaByKey  array.
    * Sorting the array and return it.
     * @param criteriaInfo
     * @param criteriaData
     * @returns
     */
    /**
     * Gets criteria values by keys
     *
     * CriteriaData is the single criteria object which contain the following information
     * {
     * "dataType": "TEXT",
     * "displaySeq": 5,
     * "displayType": "MSLIST",
     * "id": "TST",
     * "isCustom": false,
     * "isDisplayField": true,
     * "isFilterField": true,
     * "isSortable": true,
     * "jsonFieldValue": "sampleData",
     * "name": "TSTSample",
     * "solrID": "sampleKey",
     * "sortFilterSolrField": "sampleValue",
     * "data": [
     * {
     * "code": "sampleA",
     * "key": 11,
     * "value": "sampleA"
     * },
     * {
     * "code": "SampelB",
     * "key": 12,
     * "value": "SampelB"
     * },
     * ]
     * }
     * `
     * criteriaInfo is the list of key value pair arrary like
     * [  {key :'1', value : null},
     * {key :'11', value : null},
     * {key :'10', value : null},
     * {key :'14', value : null},
     * ]
     * Iterate the criteriaData.data array, check the data property of criteriaInfo if it is defined then iterate the
     * critieriaInfo and check the criteriaData data property if it is array then check the criteriaData.data[i].key equal to
     * criteriaInfo.data[i].key if it is equal then set push the value in arrFilterCriteriaByKey  array.
     * Sorting the array and return it.
     * @param {?} criteriaInfo
     * @param {?} criteriaData
     * @return {?}
     */
    FilterDataService.prototype.getCriteriaValuesByKeys = /**
     * Gets criteria values by keys
     *
     * CriteriaData is the single criteria object which contain the following information
     * {
     * "dataType": "TEXT",
     * "displaySeq": 5,
     * "displayType": "MSLIST",
     * "id": "TST",
     * "isCustom": false,
     * "isDisplayField": true,
     * "isFilterField": true,
     * "isSortable": true,
     * "jsonFieldValue": "sampleData",
     * "name": "TSTSample",
     * "solrID": "sampleKey",
     * "sortFilterSolrField": "sampleValue",
     * "data": [
     * {
     * "code": "sampleA",
     * "key": 11,
     * "value": "sampleA"
     * },
     * {
     * "code": "SampelB",
     * "key": 12,
     * "value": "SampelB"
     * },
     * ]
     * }
     * `
     * criteriaInfo is the list of key value pair arrary like
     * [  {key :'1', value : null},
     * {key :'11', value : null},
     * {key :'10', value : null},
     * {key :'14', value : null},
     * ]
     * Iterate the criteriaData.data array, check the data property of criteriaInfo if it is defined then iterate the
     * critieriaInfo and check the criteriaData data property if it is array then check the criteriaData.data[i].key equal to
     * criteriaInfo.data[i].key if it is equal then set push the value in arrFilterCriteriaByKey  array.
     * Sorting the array and return it.
     * @param {?} criteriaInfo
     * @param {?} criteriaData
     * @return {?}
     */
    function (criteriaInfo, criteriaData) {
        /** @type {?} */
        var arrFilterCriteriaByKey = [];
        if (criteriaData !== undefined) {
            criteriaData.data.map((/**
             * @param {?} criteriaVal
             * @return {?}
             */
            function (criteriaVal) {
                /** @type {?} */
                var isKeyCheck = false;
                if (criteriaInfo.data !== undefined) {
                    criteriaInfo.data.options.map((/**
                     * @param {?} criteriaInfoVal
                     * @return {?}
                     */
                    function (criteriaInfoVal) {
                        if (!isKeyCheck) {
                            if (!Array.isArray(criteriaData.data)) {
                                if (criteriaData.data.key.toString() === criteriaInfoVal.key) {
                                    if (!common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].checkElementExistsInArray(arrFilterCriteriaByKey, criteriaData.data)) {
                                        arrFilterCriteriaByKey.push({ 'key': criteriaData.data.key, 'value': criteriaData.data.value });
                                        isKeyCheck = true;
                                    }
                                }
                            }
                            else {
                                if (criteriaVal.key.toString() === criteriaInfoVal.key) {
                                    if (!common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].checkElementExistsInArray(arrFilterCriteriaByKey, criteriaVal)) {
                                        arrFilterCriteriaByKey.push({ 'key': criteriaVal.key, 'value': criteriaVal.value });
                                        isKeyCheck = true;
                                    }
                                }
                            }
                        }
                    }));
                }
            }));
        }
        if (arrFilterCriteriaByKey.length > 0) {
            arrFilterCriteriaByKey = this.sortByAsc(arrFilterCriteriaByKey);
        }
        return arrFilterCriteriaByKey;
    };
    /**
     * Sorts by asc
     * @param array
     * @returns
     */
    /**
     * Sorts by asc
     * @param {?} array
     * @return {?}
     */
    FilterDataService.prototype.sortByAsc = /**
     * Sorts by asc
     * @param {?} array
     * @return {?}
     */
    function (array) {
        /** @type {?} */
        var result = [];
        result = array.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            return a.value.localeCompare(b.value);
        }));
        return result;
    };
    /**
     * Gets criteria by name
     * @returns
     */
    /**
     * Gets criteria by name
     * @return {?}
     */
    FilterDataService.prototype.getCriteriaByName = /**
     * Gets criteria by name
     * @return {?}
     */
    function () {
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var arrFilterCriteriaByName = [];
        /** @type {?} */
        var arrFilterData = that.histStudiesFilterCriteriaList;
        arrFilterCriteriaByName = arrFilterData.map((/**
         * @param {?} name
         * @return {?}
         */
        function (name) { return name.id; }));
        return arrFilterCriteriaByName;
    };
    /**
     * @param {?} filterName
     * @param {?} filterValue
     * @return {?}
     */
    FilterDataService.prototype.getCriteriaIdByFilterName = /**
     * @param {?} filterName
     * @param {?} filterValue
     * @return {?}
     */
    function (filterName, filterValue) {
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var arrFilterData = that.histStudiesFilterCriteriaList;
        /** @type {?} */
        var filterData = arrFilterData.find((/**
         * @param {?} citeriaData
         * @return {?}
         */
        function (citeriaData) { return citeriaData.id === filterName; }));
        if (filterData.data) {
            /** @type {?} */
            var data = filterData.data.find((/**
             * @param {?} resp
             * @return {?}
             */
            function (resp) { return resp.value === filterValue; }));
            return data.key;
        }
    };
    FilterDataService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    FilterDataService.ctorParameters = function () { return [
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["PayloadCommandService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"] }
    ]; };
    /** @nocollapse */ FilterDataService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function FilterDataService_Factory() { return new FilterDataService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["PayloadCommandService"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"])); }, token: FilterDataService, providedIn: "root" });
    return FilterDataService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/approve-plan/approve-plan.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ApprovePlanComponent = /** @class */ (function () {
    function ApprovePlanComponent(dialogRef, data, approvePlanFB) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.approvePlanFB = approvePlanFB;
        this.approvePlanForm = this.approvePlanFB.group({
            planName: [data.name, _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required],
            planDescription: [data.description],
            approvalComments: ['', _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required]
        });
    }
    /**
     * @return {?}
     */
    ApprovePlanComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @return {?}
     */
    ApprovePlanComponent.prototype.onPlanNameBlur = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newValue = this.approvePlanForm.get('planName').value
            ? this.approvePlanForm.get('planName').value.trim()
            : '';
        this.approvePlanForm.get('planName').setValue(newValue);
    };
    /**
     * @return {?}
     */
    ApprovePlanComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.dialogRef.close({ action: 'Cancel' });
    };
    /**
     * @return {?}
     */
    ApprovePlanComponent.prototype.ok = /**
     * @return {?}
     */
    function () {
        if (this.approvePlanForm.valid) {
            this.dialogRef.close({ action: this.data.labels.APPROVE_PLAN_OK, form: this.approvePlanForm.value });
        }
        else {
            console.error('Form values are not valid');
        }
    };
    ApprovePlanComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-approve-plan',
                    template: "<form class=\"approve-plan-form-container\" [formGroup]=\"approvePlanForm\" (ngSubmit)=\"ok()\">\r\n  <h1 mat-dialog-title>{{data.labels?.APPROVE_PLAN}}</h1>\r\n  <div mat-dialog-content>\r\n    <div>\r\n      {{data.labels?.APPROVE_PLAN_APPROVER}}<span class=\"approver-name\">{{ data.approver }}</span>\r\n      <br />\r\n    </div>\r\n    <label> <span class=\"required\">*</span>{{data.labels?.APPROVE_PLAN_NAME}}</label>\r\n    <input type=\"text\" class=\"form-control\" placeholder=\"Enter Plan Name\" formControlName=\"planName\" (blur)=\"onPlanNameBlur()\"\r\n      [attr.disabled]=\"data.isPlan || null\" required [matTooltipClass]=\"'warn ctos-tooltip'\" [matTooltip]=\"data.labels?.APPROVE_PLAN_REQ_MSG\"\r\n      matTooltipPosition=\"right\" [matTooltipDisabled]=\"!(approvePlanForm.get('planName').touched &&\r\n      approvePlanForm.get('planName').hasError('required'))\" />\r\n    <br />\r\n    <!-- <mat-error\r\n      *ngIf=\"\r\n        approvePlanForm.get('planName').touched &&\r\n        approvePlanForm.get('planName').hasError('required')\r\n      \"\r\n      >This field is mendatory.</mat-error\r\n    > -->\r\n    <label> {{data.labels?.APPROVE_PLAN_DESCR}}</label>\r\n    <textarea rows=\"4\" class=\"form-control\" placeholder=\"Enter Plan Description\" formControlName=\"planDescription\"\r\n      [attr.disabled]=\"data.isPlan || null\"></textarea>\r\n    <br />\r\n\r\n    <label> <span class=\"required\">*</span>{{data.labels?.APPROVE_PLAN_COMMENTS}}</label>\r\n    <textarea rows=\"4\" class=\"form-control\" placeholder=\"Enter Approval Comments\" formControlName=\"approvalComments\"\r\n      required [matTooltipClass]=\"'warn ctos-tooltip'\" [matTooltip]=\"data.labels?.APPROVE_PLAN_REQ_MSG\"\r\n      matTooltipPosition=\"right\" [matTooltipDisabled]=\"!(approvePlanForm.get('approvalComments').touched &&\r\n      approvePlanForm.get('approvalComments').hasError('required'))\"></textarea>\r\n    <br />\r\n    <!-- <mat-error\r\n      *ngIf=\"\r\n        approvePlanForm.get('approvalComments').touched &&\r\n        approvePlanForm.get('approvalComments').hasError('required')\r\n      \"\r\n      >This field is mendatory.</mat-error\r\n    > -->\r\n  </div>\r\n  <div mat-dialog-actions>\r\n    <button mat-button type=\"button\" class=\"cancel-btn\" (click)=\"cancel()\">{{data.labels?.APPROVE_PLAN_CANCEL}}</button>\r\n    <button mat-button type=\"submit\" class=\"ok-btn\" [disabled]=\"!approvePlanForm.valid\">\r\n      {{data.labels?.APPROVE_PLAN_OK}}\r\n    </button>\r\n  </div>\r\n</form>"
                }] }
    ];
    /** @nocollapse */
    ApprovePlanComponent.ctorParameters = function () { return [
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatDialogRef"] },
        { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_material__WEBPACK_IMPORTED_MODULE_4__["MAT_DIALOG_DATA"],] }] },
        { type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormBuilder"] }
    ]; };
    return ApprovePlanComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/copy-plan/copy-plan.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CopyPlanComponent = /** @class */ (function () {
    function CopyPlanComponent(dialogRef, data, copyPlanFB) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.copyPlanFB = copyPlanFB;
        this.isSearchListOn = true;
        this.toggleArrowFlag = false;
        this.labels = {
            required: this.data.labels.COPY_PLAN_REQ_MSG,
            maxLength: this.data.labels.COPY_PLAN_MAX_LENGTH_MSG
        };
        this.copyPlanForm = this.copyPlanFB.group({
            copyToPlanName: [data.name, [
                    _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required,
                    _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].maxLength(MIN_MAX_RANGE.MAX_CHAR)
                ]],
            editPlanDescription: [data.description],
            studySearchFormGroup: this.copyPlanFB.group({
                searchListControl: [''],
                filterListControl: ['']
            })
        });
    }
    /**
     * @return {?}
     */
    CopyPlanComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    /**
     * @param {?} selectedStudyItem
     * @return {?}
     */
    CopyPlanComponent.prototype.studySelected = /**
     * @param {?} selectedStudyItem
     * @return {?}
     */
    function (selectedStudyItem) {
        console.log(selectedStudyItem);
    };
    /**
     * @return {?}
     */
    CopyPlanComponent.prototype.onPlanNameBlur = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newValue = this.copyPlanForm.get('copyToPlanName').value
            ? this.copyPlanForm.get('copyToPlanName').value.trim()
            : '';
        this.copyPlanForm.get('copyToPlanName').setValue(newValue);
    };
    /**
     * @return {?}
     */
    CopyPlanComponent.prototype.cancel = /**
     * @return {?}
     */
    function () {
        this.dialogRef.close({ action: 'Cancel' });
    };
    /**
     * @return {?}
     */
    CopyPlanComponent.prototype.ok = /**
     * @return {?}
     */
    function () {
        console.log('isFormValid...' + this.copyPlanForm.valid);
        if (this.copyPlanForm.valid) {
            this.dialogRef.close({ action: this.data.labels.COPY_PLAN_OK, form: this.copyPlanForm.value });
        }
        else {
            console.error('Form values are not valid');
        }
    };
    /**
     * @return {?}
     */
    CopyPlanComponent.prototype.getTooltipMessage = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var tooltipMsg = '';
        /** @type {?} */
        var control = this.copyPlanForm.get('copyToPlanName');
        if (control.errors) {
            if (control.errors.required) {
                tooltipMsg = this.labels.required;
            }
            else if (control.errors.maxlength) {
                tooltipMsg = common_library__WEBPACK_IMPORTED_MODULE_2__["StringUtil"].interpolate(this.labels.maxLength, [MIN_MAX_RANGE.MAX_CHAR.toString()]);
            }
        }
        return tooltipMsg;
    };
    /**
     * @return {?}
     */
    CopyPlanComponent.prototype.hasTooltipMessage = /**
     * @return {?}
     */
    function () {
        return this.getTooltipMessage().length > 0;
    };
    CopyPlanComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-copy-plan',
                    template: "<form\r\n  class=\"copy-plan-form-container\"\r\n  [formGroup]=\"copyPlanForm\"\r\n  (ngSubmit)=\"ok()\"\r\n>\r\n  <h1 mat-dialog-title>{{data.labels?.COPY_PLAN}}</h1>\r\n  <div mat-dialog-content>\r\n    <label><span class=\"required\">*</span>{{data.labels?.COPY_PLAN_STUDY}}</label>\r\n    <fieldset formArrayName=\"studySearchFormGroup\">\r\n      <ctos-search-list\r\n        [searchListFormGroupName]=\"copyPlanForm.get('studySearchFormGroup')\"\r\n        [searchListInput]=\"data.studyListInput\"\r\n        [labels]=\"labels\"\r\n        (itemSelect)=\"studySelected($event)\"\r\n        [isSearchListOn]=\"isSearchListOn\"\r\n      >\r\n      </ctos-search-list>\r\n    </fieldset>\r\n    <br/>\r\n    <label><span class=\"required\">*</span>{{data.labels?.COPY_PLAN_NAME}}</label>\r\n    <input\r\n      type=\"text\"\r\n      class=\"form-control\"\r\n      placeholder=\"Enter Plan Name\"\r\n      formControlName=\"copyToPlanName\"\r\n      required\r\n      (blur)=\"onPlanNameBlur()\"\r\n      [matTooltipClass]=\"'warn ctos-tooltip'\"\r\n      [matTooltip]=\"getTooltipMessage()\"\r\n      matTooltipPosition=\"right\"\r\n      [matTooltipDisabled]=\"!hasTooltipMessage()\"\r\n    />\r\n    <br/>\r\n    <!-- <mat-error\r\n      *ngIf=\"\r\n        copyPlanForm.get('copyToPlanName').touched &&\r\n        copyPlanForm.get('copyToPlanName').hasError('required')\r\n      \"\r\n      >This field is mendatory.</mat-error\r\n    > -->\r\n\r\n    <label>{{data.labels?.COPY_PLAN_DESCR}}</label>\r\n    <textarea\r\n      class=\"form-control\"\r\n      rows=\"4\"\r\n      placeholder=\"Enter Plan Description\"\r\n      formControlName=\"editPlanDescription\"\r\n    ></textarea>\r\n    <br/>\r\n  </div>\r\n  <div mat-dialog-actions>\r\n    <button mat-button type=\"button\" class=\"cancel-btn ctos-btn-secondary\" (click)=\"cancel()\">\r\n      {{data.labels?.COPY_PLAN_CANCEL}}\r\n    </button>\r\n    <button [disabled]=\"!copyPlanForm.valid\"\r\n      mat-button [ngClass]=\"{'disabled-button': !this.copyPlanForm.valid}\"\r\n      type=\"submit\"\r\n      class=\"ok-btn ctos-btn-primary\"\r\n    >\r\n    {{data.labels?.COPY_PLAN_OK}}\r\n    </button>\r\n  </div>\r\n</form>\r\n",
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None
                }] }
    ];
    /** @nocollapse */
    CopyPlanComponent.ctorParameters = function () { return [
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatDialogRef"] },
        { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_material__WEBPACK_IMPORTED_MODULE_4__["MAT_DIALOG_DATA"],] }] },
        { type: _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormBuilder"] }
    ]; };
    return CopyPlanComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/plan-options/plan-status.enum.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @enum {string} */
var PlanStatus = {
    VALID: "VALID",
    INVALID: "INVALID",
    APPROVED: "APPROVED",
    PREVAPPROVED: "PREVAPPROVED",
    BASEVALID: "status-valid",
    BASEAPPROVED: "status-approved",
    BASEINVALID: "status-invalid",
    ADJVALID: "status-adjustment-valid",
    ADJINVALID: "status-adjustment-invalid",
    ADJPREVAPPROVED: "status-adjustment-previously-approved",
    BASEPREAPPROVED: "status-preapproved",
    BASEPREVAPPROVED: "status-previously-approved",
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/plan-options/plan-options.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function ApprovePlanLabels() { }
if (false) {}
/**
 * @record
 */
function CopyPlanLabels() { }
if (false) {}
/**
 * PlanOptionsService is used to perform common functionality that is required on plan options click.
 * Plan options examples: Edit, Delete, Duplicate, Approve Plan.
 * There are some more options e.g. Create template, Create adjustment, Update cost.
 * To make plan options available in multiple places related to plan, we have this service to perform common operations.
 */
var PlanOptionsService = /** @class */ (function () {
    /**
     * This constructor function is used to inject common providers like below.
     * It also instantiates responseData and responseObservable$.
     */
    function PlanOptionsService(route, baseConnectionService, payloadCommandService, localeAppResourcesService, errorTermsService, dialog, filterDataService, studyListService, snackBar, userDataService, appDataService, spinnerService, dialogService) {
        this.route = route;
        this.baseConnectionService = baseConnectionService;
        this.payloadCommandService = payloadCommandService;
        this.localeAppResourcesService = localeAppResourcesService;
        this.errorTermsService = errorTermsService;
        this.dialog = dialog;
        this.filterDataService = filterDataService;
        this.studyListService = studyListService;
        this.snackBar = snackBar;
        this.userDataService = userDataService;
        this.appDataService = appDataService;
        this.spinnerService = spinnerService;
        this.dialogService = dialogService;
        this.userActionData = null;
        this.navigateAwaySelection$ = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        this.responseData = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        this.responseObservable$ = this.responseData.asObservable();
        this.planApproved = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        this.planApproved$ = this.planApproved.asObservable();
    }
    /**
     * Gets plan actions for user
     * @returns plan actions for user
     * current page will remove relevant option from plan actions as we are currently doing that action.
     */
    /**
     * Gets plan actions for user
     * @param {?} planData
     * @param {?} milestone
     * @return {?} plan actions for user
     * current page will remove relevant option from plan actions as we are currently doing that action.
     */
    PlanOptionsService.prototype.getPlanActions = /**
     * Gets plan actions for user
     * @param {?} planData
     * @param {?} milestone
     * @return {?} plan actions for user
     * current page will remove relevant option from plan actions as we are currently doing that action.
     */
    function (planData, milestone) {
        var _this = this;
        /** @type {?} */
        var planActionLabels = this.getPlanOptionLabels();
        /** @type {?} */
        var planActions = [];
        /** @type {?} */
        var userPrivileges = this.userDataService.getUserPrivilegesForModule(MODULE_CONSTANTS.MODULE_PLANNING);
        /** @type {?} */
        var tooltipMsgs = this.getTooltipLabels();
        /** @type {?} */
        var approvePrivilege = this.checkModulePrivilege(userPrivileges, APPROVE);
        /** @type {?} */
        var editPrivilege = this.checkModulePrivilege(userPrivileges, EDIT);
        /** @type {?} */
        var allPlanActions = this.getAllPlanActions();
        if (planData) {
            /** @type {?} */
            var planStatus_1 = planData.planStatus['value'] || planData.planStatus;
            allPlanActions.forEach((/**
             * @param {?} planAction
             * @return {?}
             */
            function (planAction) {
                if (planAction.name === planActionLabels.COPY_PLAN) {
                    planAction.isEnabled = editPrivilege;
                }
                else if (planAction.name === planActionLabels.DELETE_PLAN) {
                    planAction.isEnabled = editPrivilege && planData.isDeletable;
                }
                else if (planAction.name === planActionLabels.APPROVE_PLAN) {
                    planAction.isEnabled =
                        approvePrivilege && _this.isPlanApprovable(planData);
                }
                else if (planAction.name === planActionLabels.CREATE_ADJUSTMENT) {
                    /** @type {?} */
                    var studyMilestoneAchieved = _this.studyMilestonesAchieved(milestone);
                    planAction.isEnabled =
                        editPrivilege &&
                            planData.isPlan &&
                            studyMilestoneAchieved &&
                            planStatus_1 === PlanStatus.APPROVED;
                    if (planStatus_1 === PlanStatus.APPROVED && !studyMilestoneAchieved) {
                        planAction.tooltipMsg = tooltipMsgs.createAdjustmentCheckMilestone;
                    }
                }
                if (planAction.isVisible === true) {
                    planActions.push(planAction);
                }
            }));
        }
        return planActions;
    };
    /**
     * This function has a switch case based on param actionItem, and acts based on that.
     * e.g. it will open a delete dialog using dialog service with help of ConfirmationDialogComponent.
     * and it will also subscribe to the dialog afterClose event to capture and define what happens on dialog close.
     */
    /**
     * This function has a switch case based on param actionItem, and acts based on that.
     * e.g. it will open a delete dialog using dialog service with help of ConfirmationDialogComponent.
     * and it will also subscribe to the dialog afterClose event to capture and define what happens on dialog close.
     * @param {?} actionItem
     * @param {?} labels
     * @param {?} planInfo
     * @param {?=} studyListInput
     * @return {?}
     */
    PlanOptionsService.prototype.onPlanActionClicked = /**
     * This function has a switch case based on param actionItem, and acts based on that.
     * e.g. it will open a delete dialog using dialog service with help of ConfirmationDialogComponent.
     * and it will also subscribe to the dialog afterClose event to capture and define what happens on dialog close.
     * @param {?} actionItem
     * @param {?} labels
     * @param {?} planInfo
     * @param {?=} studyListInput
     * @return {?}
     */
    function (actionItem, labels, planInfo, studyListInput) {
        var _this = this;
        switch (actionItem) {
            case labels.PLAN_ACTION_LABELS.COPY_PLAN:
                this.dialogService.isProceed = true;
                /** @type {?} */
                var copyPlanLabels_1 = this.getCopyPlanLabels();
                if (this.dialogService.isStatusChanged &&
                    this.dialogService.isStatusChanged === true) {
                    this.confirmUnSavedChanges();
                    this.subscription = this.navigateAwaySelection$
                        .asObservable()
                        .subscribe((/**
                     * @param {?} event
                     * @return {?}
                     */
                    function (event) {
                        if (event) {
                            _this.openCopyPlanDialog(actionItem, planInfo, studyListInput, copyPlanLabels_1);
                        }
                        _this.subscription.unsubscribe();
                    }));
                }
                else {
                    this.openCopyPlanDialog(actionItem, planInfo, studyListInput, copyPlanLabels_1);
                }
                break;
            case labels.PLAN_ACTION_LABELS.CREATE_ADJUSTMENT:
                planInfo && planInfo.key
                    ? this.route.navigate(['/plans', 'plandetails', planInfo.key, 'plan-properties'], {
                        queryParams: { type: 'adj' }
                    })
                    : this.route.navigate(['/plans', 'plandetails', 'invalid']);
                break;
            case labels.PLAN_ACTION_LABELS.DELETE_PLAN:
                // this.isDeleteConfirm = true;
                /** @type {?} */
                var deleteDialogRef = this.dialog.open(common_library__WEBPACK_IMPORTED_MODULE_2__["ConfirmationDialogComponent"], {
                    width: DIALOG_CONFIG.DELETE_PLAN.WIDTH,
                    height: DIALOG_CONFIG.DELETE_PLAN.HEIGHT,
                    data: this.getDeletePlanProp(),
                    panelClass: DIALOG_CONFIG.DELETE_PLAN.PANEL_CLASS,
                    id: DIALOG_CONFIG.DELETE_PLAN.ID
                });
                deleteDialogRef.afterClosed().subscribe((/**
                 * @param {?} eventObject
                 * @return {?}
                 */
                function (eventObject) {
                    if (eventObject && eventObject.action === _this.getDeletePlanProp().okLabel) {
                        /** @type {?} */
                        var deletePlanPayload = _this.getDeletePlanPayload(planInfo);
                        _this.deletePlan(actionItem, deletePlanPayload);
                    }
                }));
                break;
            case labels.PLAN_ACTION_LABELS.APPROVE_PLAN:
                if (this.dialogService.isStatusChanged &&
                    this.dialogService.isStatusChanged === true) {
                    this.confirmUnSavedChanges();
                    this.subscription = this.navigateAwaySelection$
                        .asObservable()
                        .subscribe((/**
                     * @param {?} event
                     * @return {?}
                     */
                    function (event) {
                        if (event) {
                            _this.openApprovePlanDialog(actionItem, planInfo);
                        }
                        _this.subscription.unsubscribe();
                    }));
                }
                else {
                    this.openApprovePlanDialog(actionItem, planInfo);
                }
                break;
        }
    };
    /**
     * @param {?} actionItem
     * @param {?} planInfo
     * @return {?}
     */
    PlanOptionsService.prototype.openApprovePlanDialog = /**
     * @param {?} actionItem
     * @param {?} planInfo
     * @return {?}
     */
    function (actionItem, planInfo) {
        var _this = this;
        if (planInfo.plsr !== undefined && planInfo.plsr !== null && planInfo.plsr !== '') {
            /** @type {?} */
            var approvePlanLabels_1 = this.getApprovePlanLabels();
            /** @type {?} */
            var approvePlanDialogRef = this.dialog.open(ApprovePlanComponent, {
                width: DIALOG_CONFIG.APPROVE_PLAN.WIDTH,
                data: {
                    name: planInfo.name,
                    approver: planInfo.approver,
                    description: planInfo.description,
                    labels: approvePlanLabels_1,
                    isPlan: planInfo.isPlan,
                    planDesign: planInfo.isCohortPlan
                },
                panelClass: DIALOG_CONFIG.APPROVE_PLAN.PANEL_CLASS,
                id: DIALOG_CONFIG.APPROVE_PLAN.ID
            });
            approvePlanDialogRef.afterClosed().subscribe((/**
             * @param {?} eventObject
             * @return {?}
             */
            function (eventObject) {
                if (eventObject && eventObject.action === approvePlanLabels_1.APPROVE_PLAN_OK) {
                    // this.spinnerService.spin$.next(true);
                    /** @type {?} */
                    var approvePlanPayload = _this.getApprovePlanPayload(planInfo, eventObject.form);
                    _this.approvePlan(actionItem, approvePlanPayload, planInfo);
                }
            }));
        }
        else {
            this.openDialog();
        }
    };
    /**
     * @return {?}
     */
    PlanOptionsService.prototype.openDialog = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var propMessage = { heading: EMPTY, message: EMPTY, okLabel: EMPTY, cancelLabel: EMPTY, showCancel: EMPTY };
        propMessage.okLabel = this.localeAppResourcesService.getResource(DIALOG_ACIONS.OK);
        propMessage.heading = this.errorTermsService.getErrorMessage('ApprovePlanTitle');
        propMessage.message = this.errorTermsService.getErrorMessage('ApprovePlanMsg');
        // this.localeAppResourcesService.getResource(ApprovePlanMsg);
        this.dialog.open(common_library__WEBPACK_IMPORTED_MODULE_2__["ConfirmationDialogComponent"], {
            width: DIALOG_CONFIG.APPROVE_PLAN.WIDTH,
            data: propMessage,
            panelClass: DIALOG_CONFIG.APPROVE_PLAN.PANEL_CLASS,
        });
    };
    /**
     * @return {?}
     */
    PlanOptionsService.prototype.getCopyPlanLabels = /**
     * @return {?}
     */
    function () {
        return {
            COPY_PLAN: this.localeAppResourcesService.getResource('COPY_PLAN'),
            COPY_PLAN_STUDY: this.localeAppResourcesService.getResource('COPY_PLAN_STUDY'),
            COPY_PLAN_NAME: this.localeAppResourcesService.getResource('COPY_PLAN_NAME'),
            COPY_PLAN_DESCR: this.localeAppResourcesService.getResource('COPY_PLAN_DESCR'),
            COPY_PLAN_OK: this.localeAppResourcesService.getResource('COPY_PLAN_OK'),
            COPY_PLAN_CANCEL: this.localeAppResourcesService.getResource('COPY_PLAN_CANCEL'),
            COPY_PLAN_REQ_MSG: this.localeAppResourcesService.getResource('COPY_PLAN_REQ_MSG'),
            COPY_PLAN_MAX_LENGTH_MSG: this.errorTermsService.getErrorMessage('maxCharExceedError')
        };
    };
    /**
     * @param {?} actionItem
     * @param {?} planInfo
     * @param {?} studyListInput
     * @param {?} labels
     * @return {?}
     */
    PlanOptionsService.prototype.openCopyPlanDialog = /**
     * @param {?} actionItem
     * @param {?} planInfo
     * @param {?} studyListInput
     * @param {?} labels
     * @return {?}
     */
    function (actionItem, planInfo, studyListInput, labels) {
        var _this = this;
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        /** @type {?} */
        var copyPlanDialogRef = this.dialog.open(CopyPlanComponent, {
            width: DIALOG_CONFIG.COPY_PLAN.WIDTH,
            data: {
                name: planInfo.name + ' - Copy',
                studyListInput: studyListInput,
                description: planInfo.description,
                labels: labels
            },
            panelClass: DIALOG_CONFIG.COPY_PLAN.PANEL_CLASS,
            id: DIALOG_CONFIG.COPY_PLAN.ID
        });
        copyPlanDialogRef.afterClosed().subscribe((/**
         * @param {?} eventObject
         * @return {?}
         */
        function (eventObject) {
            if (eventObject && eventObject.action === labels.COPY_PLAN_OK) {
                _this.dialogService.isProceed = false;
                eventObject.form.copyToPlanName = eventObject.form.copyToPlanName
                    ? eventObject.form.copyToPlanName.trim()
                    : '';
                /** @type {?} */
                var copyPlanPayload = _this.getCopyPlanPayload(planInfo, eventObject.form);
                _this.copyPlan(actionItem, planInfo, copyPlanPayload);
            }
            else {
                _this.dialogService.isProceed = true;
            }
        }));
    };
    /**
     * @param {?} planInfo
     * @param {?} eventObject
     * @return {?}
     */
    PlanOptionsService.prototype.getCopyPlanPayload = /**
     * @param {?} planInfo
     * @param {?} eventObject
     * @return {?}
     */
    function (planInfo, eventObject) {
        return {
            studyKey: this.getLastVisitedStudyKey(),
            destStudyKey: eventObject.studySearchFormGroup.searchListControl.key,
            studyName: this.getLastVisitedStudyName(),
            destStudyName: eventObject.studySearchFormGroup.searchListControl.name ||
                eventObject.studySearchFormGroup.searchListControl.id,
            planKey: planInfo.key,
            name: eventObject.copyToPlanName,
            description: eventObject.editPlanDescription,
            version: planInfo.version,
            isCohortPlan: planInfo.isCohortPlan
        };
    };
    /**
     * @param {?} actionItem
     * @param {?} planInfo
     * @param {?} payload
     * @return {?}
     */
    PlanOptionsService.prototype.copyPlan = /**
     * @param {?} actionItem
     * @param {?} planInfo
     * @param {?} payload
     * @return {?}
     */
    function (actionItem, planInfo, payload) {
        var _this = this;
        /** @type {?} */
        var baseParam = {};
        baseParam.dependencyList = [
            common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].GetPlanListKey + '_' + payload.studyKey,
            common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].GetPlanListKey + '_' + payload.destStudyKey
        ];
        this.callAPI(COMMAND.COPYPLAN, payload, baseParam).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            _this.responseData.next(new Object({
                response: {
                    requestData: {
                        planName: planInfo.name,
                        destPlanName: payload.name,
                        studyKey: payload.studyKey,
                        destStudyKey: payload.destStudyKey,
                        studyName: payload.studyName,
                        destStudyName: payload.destStudyName,
                        isPlan: planInfo.isPlan,
                        parentPlanKey: !planInfo.isPlan ? planInfo.parentPlankey : null
                    },
                    responseData: response
                },
                actionItem: actionItem
            }));
        }));
    };
    /**
     * @return {?}
     */
    PlanOptionsService.prototype.getApprovePlanLabels = /**
     * @return {?}
     */
    function () {
        return {
            APPROVE_PLAN: this.localeAppResourcesService.getResource('APPROVE_PLAN'),
            APPROVE_PLAN_APPROVER: this.localeAppResourcesService.getResource('APPROVE_PLAN_APPROVER'),
            APPROVE_PLAN_NAME: this.localeAppResourcesService.getResource('APPROVE_PLAN_NAME'),
            APPROVE_PLAN_DESCR: this.localeAppResourcesService.getResource('APPROVE_PLAN_DESCR'),
            APPROVE_PLAN_COMMENTS: this.localeAppResourcesService.getResource('APPROVE_PLAN_COMMENTS'),
            APPROVE_PLAN_OK: this.localeAppResourcesService.getResource('APPROVE_PLAN_OK'),
            APPROVE_PLAN_CANCEL: this.localeAppResourcesService.getResource('APPROVE_PLAN_CANCEL'),
            APPROVE_PLAN_REQ_MSG: this.localeAppResourcesService.getResource('APPROVE_PLAN_REQ_MSG')
        };
    };
    /**
     * @param {?} planInfo
     * @param {?} eventObject
     * @return {?}
     */
    PlanOptionsService.prototype.getApprovePlanPayload = /**
     * @param {?} planInfo
     * @param {?} eventObject
     * @return {?}
     */
    function (planInfo, eventObject) {
        /** @type {?} */
        var payload = {
            studyKey: this.getLastVisitedStudyKey(),
            version: planInfo.version
        };
        if (!planInfo.isPlan) {
            payload.newName = eventObject.planName;
            payload.adjustStudyPlanKey = planInfo.key;
            payload.description = eventObject.planDescription;
            payload.approvalComment = eventObject.approvalComments;
        }
        else {
            payload.planKey = planInfo.key;
            payload.planComment = eventObject.approvalComments;
        }
        payload.isCohortPlan = planInfo.isCohortPlan;
        return payload;
    };
    /**
     * @param {?} actionItem
     * @param {?} payload
     * @param {?} planInfo
     * @return {?}
     */
    PlanOptionsService.prototype.approvePlan = /**
     * @param {?} actionItem
     * @param {?} payload
     * @param {?} planInfo
     * @return {?}
     */
    function (actionItem, payload, planInfo) {
        var _this = this;
        /** @type {?} */
        var baseParam = {};
        /** @type {?} */
        var planKey = payload.planKey
            ? payload.planKey
            : payload.adjustStudyPlanKey;
        // baseParam.dependencyList = [
        //   CacheKey.GetPlanListKey + '_' + payload.studyKey,
        //   CacheKey.GetPlanDetails + '_' + payload.studyKey + '_' + planKey,
        //   'GetSourceSummaryKey' + '_' + payload.studyKey
        // ];
        baseParam.dependencyList = [
            common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].GetPlanListKey + '_' + payload.studyKey,
            common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].GetPlanDetails,
            'GetSourceSummaryKey' + '_' + payload.studyKey
        ];
        if (planInfo.isPlan) {
            this.callAPI(COMMAND.APPROVEPLAN, payload, baseParam)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["take"])(1))
                .subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                // this.spinnerService.spin$.next(false);
                _this.responseData.next(new Object({
                    response: response,
                    actionItem: actionItem
                }));
                _this.planApproved.next();
            }));
        }
        else {
            this.callAPI(COMMAND.APPROVEADJUSTMENT, payload, baseParam)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["take"])(1))
                .subscribe((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                // this.spinnerService.spin$.next(false);
                _this.responseData.next(new Object({
                    response: response,
                    actionItem: actionItem
                }));
                _this.planApproved.next();
            }));
        }
    };
    /**
     * @param {?} planInfo
     * @return {?}
     */
    PlanOptionsService.prototype.getDeletePlanPayload = /**
     * @param {?} planInfo
     * @return {?}
     */
    function (planInfo) {
        return {
            studyKey: planInfo.studyKey,
            planKey: planInfo.key,
            version: planInfo.version
        };
    };
    /**
     * This function will also do api call of delete plan with help of baseConnectionService.sendRequest()
     * with params including { studyKey: planInfo.studyKey, planKey: planInfo.key, version: planInfo.version }.
     * It will return Observable of received response.
     */
    /**
     * This function will also do api call of delete plan with help of baseConnectionService.sendRequest()
     * with params including { studyKey: planInfo.studyKey, planKey: planInfo.key, version: planInfo.version }.
     * It will return Observable of received response.
     * @param {?} actionItem
     * @param {?} payload
     * @return {?}
     */
    PlanOptionsService.prototype.deletePlan = /**
     * This function will also do api call of delete plan with help of baseConnectionService.sendRequest()
     * with params including { studyKey: planInfo.studyKey, planKey: planInfo.key, version: planInfo.version }.
     * It will return Observable of received response.
     * @param {?} actionItem
     * @param {?} payload
     * @return {?}
     */
    function (actionItem, payload) {
        var _this = this;
        /** @type {?} */
        var baseParam = {};
        baseParam.dependencyList = [
            common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].GetPlanListKey + '_' + payload.studyKey
        ];
        this.callAPI(COMMAND.DELTEPLAN, payload, baseParam).subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            _this.responseData.next(new Object({
                response: response,
                actionItem: actionItem
            }));
        }));
    };
    /**
     * This function gets delete plan properties to be passed to delete dialog.
     */
    /**
     * This function gets delete plan properties to be passed to delete dialog.
     * @return {?}
     */
    PlanOptionsService.prototype.getDeletePlanProp = /**
     * This function gets delete plan properties to be passed to delete dialog.
     * @return {?}
     */
    function () {
        return {
            heading: this.localeAppResourcesService.getResource('DPTitle'),
            message: this.errorTermsService.getErrorMessage('AreYouSure') +
                ' delete this plan?',
            okLabel: this.localeAppResourcesService.getResource(ALERT_TYPE.OkLabel),
            cancelLabel: this.localeAppResourcesService.getResource(ALERT_TYPE.CancelLabel)
        };
    };
    /**
     */
    /**
     *
     * @return {?}
     */
    PlanOptionsService.prototype.getPlanOptionsResources = /**
     *
     * @return {?}
     */
    function () {
        return {
            PLAN_ACTION_LABELS: this.getPlanOptionLabels(),
            BANNER_LABELS: this.getBannerLabels()
        };
    };
    /**
     * @param {?} planData
     * @return {?}
     */
    PlanOptionsService.prototype.isPlanApprovable = /**
     * @param {?} planData
     * @return {?}
     */
    function (planData) {
        if (planData.planStatus) {
            return (planData.planStatus['value'] === PlanStatus.VALID ||
                planData.planStatus === PlanStatus.VALID) &&
                planData.isReadOnly === false
                ? true
                : false;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} milestone
     * @return {?}
     */
    PlanOptionsService.prototype.studyMilestonesAchieved = /**
     * @param {?} milestone
     * @return {?}
     */
    function (milestone) {
        if (milestone) {
            /** @type {?} */
            var studyFSIAchieved = milestone.FSI !== undefined ? true : false;
            /** @type {?} */
            var studyLSRAchieved = milestone.LSR === undefined ? true : false;
            return studyFSIAchieved && studyLSRAchieved;
        }
        else {
            return false;
        }
    };
    /**
     * @param {?} userPrivilages
     * @param {?} privilageName
     * @return {?}
     */
    PlanOptionsService.prototype.checkModulePrivilege = /**
     * @param {?} userPrivilages
     * @param {?} privilageName
     * @return {?}
     */
    function (userPrivilages, privilageName) {
        var e_1, _a;
        try {
            for (var userPrivilages_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__values"])(userPrivilages), userPrivilages_1_1 = userPrivilages_1.next(); !userPrivilages_1_1.done; userPrivilages_1_1 = userPrivilages_1.next()) {
                var privilage = userPrivilages_1_1.value;
                if (privilage.name === privilageName) {
                    return true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (userPrivilages_1_1 && !userPrivilages_1_1.done && (_a = userPrivilages_1.return)) _a.call(userPrivilages_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return false;
    };
    /**
     * @return {?}
     */
    PlanOptionsService.prototype.getAllPlanActions = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var labels = this.getPlanOptionLabels();
        /** @type {?} */
        var tooltipMsgs = this.getTooltipLabels();
        return [
            {
                name: labels.COPY_PLAN,
                isVisible: true,
                isEnabled: true,
                tooltipMsg: tooltipMsgs.copyPlanToStudy,
                hasDivider: false
            },
            {
                name: labels.CREATE_ADJUSTMENT,
                isVisible: true,
                isEnabled: true,
                tooltipMsg: tooltipMsgs.createAdjustment,
                hasDivider: false
            },
            {
                name: labels.DELETE_PLAN,
                isVisible: true,
                isEnabled: true,
                tooltipMsg: tooltipMsgs.deletePlan,
                hasDivider: false
            },
            {
                name: labels.APPROVE_PLAN,
                isVisible: true,
                isEnabled: true,
                tooltipMsg: tooltipMsgs.approvePlan,
                hasDivider: true
            }
        ];
    };
    /**
     * @return {?}
     */
    PlanOptionsService.prototype.getPlanOptionLabels = /**
     * @return {?}
     */
    function () {
        return {
            COPY_PLAN: this.localeAppResourcesService.getResource('COPY_PLAN'),
            CREATE_ADJUSTMENT: this.localeAppResourcesService.getResource('CREATE_ADJUSTMENT'),
            DELETE_PLAN: this.localeAppResourcesService.getResource('DELETE_PLAN'),
            APPROVE_PLAN: this.localeAppResourcesService.getResource('APPROVE_PLAN')
        };
    };
    /**
     * @return {?}
     */
    PlanOptionsService.prototype.getBannerLabels = /**
     * @return {?}
     */
    function () {
        return {
            SUCCESS: {
                DELETE_PLAN: this.localeAppResourcesService.getResource('SUCCESS_MSG_DELETE_PLAN'),
                APPROVE_PLAN: this.localeAppResourcesService.getResource('SUCCESS_MSG_APPROVE_PLAN'),
                COPY_PLAN: {
                    MODAL_HEADING: this.localeAppResourcesService.getResource('COPY_PLAN_SUCCESS_HEADING'),
                    MODAL_MSG_PART_1: this.localeAppResourcesService.getResource('COPY_PLAN_SUCCESS_PART_1'),
                    MODAL_MSG_PART_2: this.localeAppResourcesService.getResource('COPY_PLAN_SUCCESS_PART_2'),
                    MODAL_MSG_PART_3: this.localeAppResourcesService.getResource('COPY_PLAN_SUCCESS_PART_3'),
                    MODAL_ACTION_STAY: this.localeAppResourcesService.getResource('COPY_PLAN_SUCCESS_STAY'),
                    MODAL_ACTION_GO: this.localeAppResourcesService.getResource('COPY_PLAN_SUCCESS_GO')
                },
                PLAN_DESIGN: {
                    SAVE_PLAN_DESIGN: this.localeAppResourcesService.getResource('SAVE_PLAN_DESIGN')
                }
            }
        };
    };
    /**
     * @param {?} msg
     * @return {?}
     */
    PlanOptionsService.prototype.showSuccessMessage = /**
     * @param {?} msg
     * @return {?}
     */
    function (msg) {
        this.snackBar.openFromComponent(common_library__WEBPACK_IMPORTED_MODULE_2__["DisplayBannerComponent"], {
            data: {
                message: msg,
                icon: 'assets/images/manageplans/icon-positive.png',
                messageType: 'positive'
            },
            panelClass: ['positive-snackbar']
        });
    };
    /**
     * @param {?} resource
     * @return {?}
     */
    PlanOptionsService.prototype.getResource = /**
     * @param {?} resource
     * @return {?}
     */
    function (resource) {
        return this.localeAppResourcesService.getResource(resource);
    };
    /**
     * @return {?}
     */
    PlanOptionsService.prototype.getStudyTagListFunction = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return (/**
         * @param {?} searchCriteria
         * @return {?}
         */
        function (searchCriteria) {
            return _this.studyListService.getStudyTagList(searchCriteria);
        });
    };
    /**
     * @return {?}
     */
    PlanOptionsService.prototype.getLastVisitedStudyKey = /**
     * @return {?}
     */
    function () {
        return this.userDataService.getLastVisitedStudyKey();
    };
    /**
     * @return {?}
     */
    PlanOptionsService.prototype.getLastVisitedStudyName = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var studyTag = this.studyListService.getStudyInfoByKey(this.getLastVisitedStudyKey());
        return studyTag ? studyTag.id : '';
    };
    /**
     * @return {?}
     */
    PlanOptionsService.prototype.getUserName = /**
     * @return {?}
     */
    function () {
        return this.userDataService.getUserName();
    };
    /**
     * @param {?} command
     * @param {?} payload
     * @param {?} baseParam
     * @return {?}
     */
    PlanOptionsService.prototype.callAPI = /**
     * @param {?} command
     * @param {?} payload
     * @param {?} baseParam
     * @return {?}
     */
    function (command, payload, baseParam) {
        return this.baseConnectionService
            .sendRequest(this.payloadCommandService.getCommandDetails(command, payload, null, null, this.userActionData), baseParam)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return response; })));
    };
    /**
     * @param {?} errorCode
     * @param {?} errorSuffix
     * @return {?}
     */
    PlanOptionsService.prototype.getErrorMsg = /**
     * @param {?} errorCode
     * @param {?} errorSuffix
     * @return {?}
     */
    function (errorCode, errorSuffix) {
        /** @type {?} */
        var ErrorCode = errorSuffix + errorCode;
        /** @type {?} */
        var errorDescription = this.errorTermsService.getErrorMessage(ErrorCode);
        if (errorDescription == null || errorDescription === undefined) {
            errorDescription = this.errorTermsService.getErrorMessage(errorCode);
        }
        return errorDescription;
    };
    /**
     * @return {?}
     */
    PlanOptionsService.prototype.confirmUnSavedChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var deleteDialogRef = this.dialog.open(common_library__WEBPACK_IMPORTED_MODULE_2__["ConfirmationDialogComponent"], {
            width: DIALOG_CONFIG.CONFIRM_UNSAVED_DATA.WIDTH,
            data: this.getConfirmProp(),
            panelClass: DIALOG_CONFIG.DELETE_PLAN.PANEL_CLASS,
            id: 'warnDataLossOnNavDialog'
        });
        deleteDialogRef.afterClosed().subscribe((/**
         * @param {?} eventObject
         * @return {?}
         */
        function (eventObject) {
            if (eventObject && eventObject.action === _this.getConfirmProp().okLabel) {
                _this.navigateAwaySelection$.next(true);
            }
            else {
                _this.navigateAwaySelection$.next(false);
            }
        }));
    };
    /**
     * @return {?}
     */
    PlanOptionsService.prototype.getConfirmProp = /**
     * @return {?}
     */
    function () {
        return {
            heading: this.localeAppResourcesService.getResource('unsavedTitle'),
            message: this.localeAppResourcesService.getResource('unsavedMessage'),
            okLabel: this.localeAppResourcesService.getResource(ALERT_TYPE.OkLabel),
            cancelLabel: this.localeAppResourcesService.getResource(ALERT_TYPE.CancelLabel)
        };
    };
    /**
     * @return {?}
     */
    PlanOptionsService.prototype.getTooltipLabels = /**
     * @return {?}
     */
    function () {
        return {
            copyPlanToStudy: '',
            // this.localeAppResourcesService.getResource('TOOLTIP_COPY_PLAN'),
            createAdjustment: this.localeAppResourcesService.getResource('TOOLTIP_CREATE_ADJUSTMENT'),
            createAdjustmentCheckMilestone: this.localeAppResourcesService.getResource('TOOLTIP_CREATE_ADJ_CHECK_MILESTONE'),
            deletePlan: '',
            // this.localeAppResourcesService.getResource('TOOLTIP_DELETE_PLAN'),
            approvePlan: '' // this.localeAppResourcesService.getResource('TOOLTIP_APPROVE_PLAN')
        };
    };
    PlanOptionsService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"] }
    ];
    /** @nocollapse */
    PlanOptionsService.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_10__["Router"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["PayloadCommandService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["LocaleAppResourcesService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["ErrorTermsStoreService"] },
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatDialog"] },
        { type: FilterDataService },
        { type: StudyListService },
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatSnackBar"] },
        { type: UserDataService },
        { type: AppDataService },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["SpinnerService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["DialogService"] }
    ]; };
    return PlanOptionsService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/plan-options/plan-options.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PlanOptionsComponent = /** @class */ (function () {
    function PlanOptionsComponent(planOptionsService, datePipe) {
        this.planOptionsService = planOptionsService;
        this.datePipe = datePipe;
        this.isDisabled = false;
        this.studyListInput = new StudyListInput();
        this.planApprovedEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    Object.defineProperty(PlanOptionsComponent.prototype, "userActionData", {
        set: /**
         * @param {?} userActionObject
         * @return {?}
         */
        function (userActionObject) {
            if (userActionObject) {
                this.planOptionsService.userActionData = userActionObject;
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PlanOptionsComponent.prototype, "planData", {
        set: /**
         * @param {?} plan
         * @return {?}
         */
        function (plan) {
            this._planData = plan;
            this.planOptions = this.planOptionsService.getPlanActions(plan, this.milestone);
            this.studyListInput.selectedItemKey = this.planOptionsService.getLastVisitedStudyKey();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    PlanOptionsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.studyListInput.placeholder = this.planOptionsService.getResource('StudyListSearch');
        this.studyListInput.allListItemsLabel = this.planOptionsService.getResource('AllStudiesView');
        this.studyListInput.studyListHeaderLabel = this.planOptionsService.getResource('StudyListHeader');
        this.studyListInput.optionTemplate = this.studyListOptionTemplate;
        this.studyListInput.searchApi = this.planOptionsService.getStudyTagListFunction();
        this.planOptionsService.planApproved$.subscribe((/**
         * @return {?}
         */
        function () {
            _this.planApprovedEvent.emit();
        }));
    };
    /**
     * @param {?} event
     * @return {?}
     */
    PlanOptionsComponent.prototype.optionClicked = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var planInfo = {
            studyKey: this.planOptionsService.getLastVisitedStudyKey(),
            name: this._planData.name || this._planData.planName,
            key: this._planData.planKey || this._planData.key,
            version: this._planData.version || this._planData.Version,
            description: this._planData.description,
            approver: this.planOptionsService.getUserName(),
            isPlan: this._planData.isPlan,
            isCohortPlan: this.isCohortPlan,
            parentPlankey: !this._planData.isPlan ? this._planData.parentPlankey : null,
            plsr: this.dateFormatter(this._planData)
        };
        this.planOptionsService.onPlanActionClicked(event, this.planOptionsService.getPlanOptionsResources(), planInfo, this.studyListInput);
    };
    /**
     * @param {?} planData
     * @return {?}
     */
    PlanOptionsComponent.prototype.dateFormatter = /**
     * @param {?} planData
     * @return {?}
     */
    function (planData) {
        /** @type {?} */
        var date;
        if (planData.hasOwnProperty('LSR')) {
            date = planData.LSR;
        }
        else if (planData.hasOwnProperty('TLSR')) {
            date = planData.TLSR;
        }
        return date
            ? this.datePipe.transform(date, 'dd') +
                '-' +
                this.datePipe.transform(date, 'MMM') +
                '-' +
                this.datePipe.transform(date, 'yyyy')
            : null;
    };
    Object.defineProperty(PlanOptionsComponent.prototype, "isCohortPlan", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var value;
            if (this._planData) {
                if (this._planData.hasOwnProperty('planDesign')) {
                    value = this._planData.planDesign === 'Cohort' ? 'Y' : 'N';
                }
                else if (this._planData.hasOwnProperty('isCohortPlan')) {
                    value = this._planData.isCohortPlan;
                }
            }
            return value;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * on changes
     * @param changes
     */
    /**
     * on changes
     * @param {?} changes
     * @return {?}
     */
    PlanOptionsComponent.prototype.ngOnChanges = /**
     * on changes
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        for (var propName in changes) {
            if (propName && propName === 'planData') {
                /** @type {?} */
                var change = changes[propName];
                if (change.currentValue) {
                    this.setPlanInfo(change.currentValue);
                }
            }
        }
    };
    /**
     * Sets plan info
     * @param [plan]
     */
    /**
     * Sets plan info
     * @param {?=} plan
     * @return {?}
     */
    PlanOptionsComponent.prototype.setPlanInfo = /**
     * Sets plan info
     * @param {?=} plan
     * @return {?}
     */
    function (plan) {
        this._planData = plan;
        this.planOptions = this.planOptionsService.getPlanActions(plan, this.milestone);
        this.studyListInput.selectedItemKey = this.planOptionsService.getLastVisitedStudyKey();
    };
    PlanOptionsComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-plan-options',
                    template: "<!-- <ctos-context-menu\r\n  #menu\r\n  [options]=\"planOptions\"\r\n  (fireEvent)=\"optionClicked($event)\"\r\n  [ngClass]=\"{ disabled: 'isDisabled' }\"\r\n> -->\r\n<mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\" [class]=\"'context-menu plan-options-menu'\">\r\n  <ng-container *ngFor=\"let item of planOptions\">\r\n    <div [matTooltip]=\"item.tooltipMsg\" matTooltipPosition=\"left\" [matTooltipDisabled]=\"item.isEnabled\">\r\n      <hr *ngIf=\"item.hasDivider\"/>\r\n      <button mat-menu-item [disabled]=\"!item.isEnabled\" (click)=\"optionClicked(item.name)\">\r\n        <span>{{ item.name }}</span>\r\n      </button>\r\n    </div>\r\n  </ng-container>\r\n</mat-menu>\r\n<button mat-icon-button [matMenuTriggerFor]=\"menu\" [disabled]=\"isDisabled\">\r\n  <i class=\"material-icons\">\r\n    more_vert\r\n    </i>\r\n</button>\r\n<ng-template #studyListOptionTemplate let-item>\r\n  <img src=\"assets/images/preScreening.png\" *ngIf=\"item.prescreenInd\" />\r\n  <span [matTooltip]=\"item.id\">&nbsp;{{ item.id }}</span>\r\n</ng-template>\r\n<!-- </ctos-context-menu> -->",
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None
                }] }
    ];
    /** @nocollapse */
    PlanOptionsComponent.ctorParameters = function () { return [
        { type: PlanOptionsService },
        { type: _angular_common__WEBPACK_IMPORTED_MODULE_0__["DatePipe"] }
    ]; };
    PlanOptionsComponent.propDecorators = {
        milestone: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        isDisabled: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        userActionData: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        planData: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        studyListOptionTemplate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: ['studyListOptionTemplate', { static: true },] }],
        planApprovedEvent: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }]
    };
    return PlanOptionsComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ctos-plan-chart/CurveData.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CurveData = /** @class */ (function () {
    function CurveData() {
    }
    return CurveData;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ctos-plan-chart-legend/ctos-plan-chart-legend.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CTOSPlanChartLegendService = /** @class */ (function () {
    function CTOSPlanChartLegendService() {
        this.planKey = -1;
        this.selectedCurves = [];
        this.isDirty = false;
        this.selectedLegend = new rxjs__WEBPACK_IMPORTED_MODULE_11__["BehaviorSubject"](null);
        this.selectedLegend$ = this.selectedLegend.asObservable();
        this.LegendPref = new rxjs__WEBPACK_IMPORTED_MODULE_11__["BehaviorSubject"](null);
        this.LegendPref$ = this.selectedLegend.asObservable();
    }
    /**
     * @param {?} selection
     * @return {?}
     */
    CTOSPlanChartLegendService.prototype.setLegendSelection = /**
     * @param {?} selection
     * @return {?}
     */
    function (selection) {
        this.selectedLegend.next(selection);
    };
    /**
     * @param {?} pref
     * @return {?}
     */
    CTOSPlanChartLegendService.prototype.setLegendPref = /**
     * @param {?} pref
     * @return {?}
     */
    function (pref) {
        this.LegendPref.next(pref);
    };
    CTOSPlanChartLegendService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CTOSPlanChartLegendService.ctorParameters = function () { return []; };
    /** @nocollapse */ CTOSPlanChartLegendService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function CTOSPlanChartLegendService_Factory() { return new CTOSPlanChartLegendService(); }, token: CTOSPlanChartLegendService, providedIn: "root" });
    return CTOSPlanChartLegendService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ctos-plan-chart/MileStonesData.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MileStonesData = /** @class */ (function () {
    function MileStonesData() {
    }
    return MileStonesData;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ctos-plan-chart/TargetMilestone.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$3 = moment__WEBPACK_IMPORTED_MODULE_13__;
var TargetMilestone = /** @class */ (function () {
    function TargetMilestone(name, data, desc, scalex, scaley, val) {
        this.dateFormat = 'DD MMM YYYY';
        this.name = name;
        this.data = data;
        this.description = desc;
        this.scaleX = scalex;
        this.scaleY = scaley;
        this.value = val;
        this.displayText = name + ' : ' + moment$3(data).format(this.dateFormat);
    }
    /**
     * @return {?}
     */
    TargetMilestone.prototype.isTargetLine = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var plannedSite = 'Planned Sites';
        return ['25%', '50%', '90%', plannedSite].indexOf(this.name) > -1 ? true : false;
    };
    /**
     * @return {?}
     */
    TargetMilestone.prototype.color = /**
     * @return {?}
     */
    function () {
        return ((['LSS', 'TLSS', 'PLSS', 'ALSS', 'AFSS', 'PFSS', 'PrLSS', 'UpdPrLSS', 'FroPrLSS'].indexOf(this.name) > -1) ? '#a9e8b4' :
            (['LSR', 'TLSR', 'PLSR', 'ALSR', 'PrLSR', 'UpdPrLSR', 'FroPrLSR', 'StudyPrLSR',
                'Study PrLSR'].indexOf(this.name) > -1 ? '#7eb1fb' :
                (['Today'].indexOf(this.name) > -1) ? '#ffb84d' : '#bf80ce'));
    };
    /**
     * @return {?}
     */
    TargetMilestone.prototype.isTargetLineSubjectAxis = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var plannedScreening = 'Planned Screening';
        /** @type {?} */
        var maximumScreening = 'Maximum Screening';
        /** @type {?} */
        var maximumRandomization = 'Maximum Randomization';
        return [plannedScreening, maximumRandomization, maximumScreening]
            .indexOf(this.name) > -1 ? true : false;
    };
    /**
     * @return {?}
     */
    TargetMilestone.prototype.seedNumber = /**
     * @return {?}
     */
    function () {
        return this.isTargetLine() || this.isTargetLineSubjectAxis() ? 1 : 0;
    };
    /**
     * @return {?}
     */
    TargetMilestone.prototype.width = /**
     * @return {?}
     */
    function () {
        return this.name.length * 7;
    };
    return TargetMilestone;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ctos-plan-chart/ctos-plan-chart.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$4 = moment__WEBPACK_IMPORTED_MODULE_13__;
var CTOSPlanChartComponent = /** @class */ (function () {
    function CTOSPlanChartComponent(chartElement, lgdServ, renderer) {
        var _this = this;
        this.chartElement = chartElement;
        this.lgdServ = lgdServ;
        this.renderer = renderer;
        // remove it, not used
        this.activate = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.deactivate = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.roundDomains = false;
        this.schemeType = 'ordinal';
        this.curve = d3_shape__WEBPACK_IMPORTED_MODULE_16__["curveLinear"];
        this.activeEntries = [];
        this.yOrientLeft = 'left';
        this.yOrientRight = 'right';
        // legend vars
        this.showGridLines = false;
        // variables
        this.margin = [0, 20, 0, 20];
        // NGX graph options
        this.showXAxisLabel = true;
        this.xAxisLabel = 'Enrollment Period';
        this.showYAxisLabel = true;
        this.yAxisLabel = '';
        this.y2AxisLabel = '';
        this.scaleType = 'linear';
        this.xAxisHeight = 0;
        this.yAxisWidth = 0;
        this.manualRefresh = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.targetMileStoneX = new Array();
        this.targetMileStoneY = new Array();
        this.dateFormat = 'DD MMM YYYY';
        this.collisionSafety = 110;
        this.colisionYfactor = 17;
        this.markers = new Array();
        this.markerPlots = new Array();
        this.markerRadius = 12;
        this.milestoneKey = 'Tar';
        this.markerKey = 'Mil';
        this.widthMargin = 0;
        this.heightMargin = 0;
        this.sliderTop = -32;
        this.graphRendered = false;
        this.allMilestones = [];
        this.milestonesForCopyOnly = {
            FSI: true,
            FroPrLSS: true,
            FroPrLSR: true,
            AppPSI: true,
            AppPFSI: true,
            BasPSI: true,
            BasPFSI: true,
            AdjPSI: true,
            AdjPFSI: true,
            CurPrSI: true,
            CurPrFSI: true,
            UpdPrSI: true,
            UpdPrFSI: true,
            FroPrSI: true,
            FroPrFSI: true,
            ActFSI: true
        };
        this.sizeChanged = false;
        this.dataChanged = false;
        this.tempPlannedSite = 'Planned Sites';
        this.tempPlannedScreening = 'Planned Screening';
        this.tempMaximumScreening = 'Maximum Screening';
        this.tempMaximumRandomization = 'Maximum Randomization';
        this.aheadBehindData = [];
        this.pinnedObjects = {};
        this.withoutDateMarkerPlots = [];
        this.subscriptions = new Array();
        this.subscriptions.push(this.lgdServ.selectedLegend$.subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.preferredCurves = data;
            if (_this.preferredCurves) {
                _this.ngOnChanges(null);
            }
        })));
    }
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.manualRefresh.emit();
        console.log('type =>' + this.type);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.axisLabels) {
            this.yAxisLabel = this.axisLabels.subjects;
            this.y2AxisLabel = this.axisLabels.sites;
        }
        this.graphRendered = false;
        this.deepCopySegregate();
        this.heightMargin = 100;
        this.widthMargin = 120;
        this.render();
        this.todaysDateMilestone = {
            axis: 'date',
            name: 'date',
            id: 'today',
            markers: [new TargetMilestone('Today', moment$4(new Date()).format('MM/DD/YYYY'), 'Today\'s Date', this.xScaleLine(new Date()), 0, 'NA')]
        };
        this.plotMilestones();
        this.plotMarkers();
        this.collisionDetectionNew();
        this.adjustGraph();
        if (changes && changes.refresh) {
            this.sizeChanged = !this.sizeChanged;
            this.pinnedObjects = this.singlePinnedPoints;
        }
        else if (changes && !changes.refresh) {
            this.dataChanged = !this.dataChanged;
            this.pinnedObjects = {};
            this.singlePinnedPoints = {};
        }
    };
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.adjustGraph = /**
     * @return {?}
     */
    function () {
        var _this = this;
        window.setTimeout((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var dimstmp = _this.getContainerDims();
            if (_this.chartElement.nativeElement.querySelectorAll('.ngx-charts-outer')
                && _this.chartElement.nativeElement.querySelectorAll('.ngx-charts')
                && _this.chartElement.nativeElement.querySelectorAll('.ngx-charts-outer')[0]
                && _this.chartElement.nativeElement.querySelectorAll('.ngx-charts')[0]
                && dimstmp) {
                _this.renderer.setStyle(_this.chartElement.nativeElement.querySelectorAll('.ngx-charts-outer')[0], 'width', dimstmp.width + 'px');
                _this.renderer.setAttribute(_this.chartElement.nativeElement.querySelectorAll('.ngx-charts')[0], 'width', dimstmp.width);
                _this.renderer.setAttribute(_this.chartElement.nativeElement.querySelectorAll('.ngx-charts')[0], 'height', dimstmp.height);
            }
            _this.graphRendered = true;
            _this.sliderTop = -32;
        }), 10);
    };
    // not used as of now, remove it.
    // not used as of now, remove it.
    /**
     * @param {?} $event
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.onResize = 
    // not used as of now, remove it.
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /** @type {?} */
        var oldMin = this.minValue;
        /** @type {?} */
        var oldMix = this.maxValue;
        this.ngOnChanges(null);
        this.minValue = oldMin;
        this.maxValue = oldMix;
        this.filterData(this.minValue, this.maxValue);
        this.xDomainLine = [this.minValue, this.maxValue];
        this.xScaleLine = this.getXScaleLine(this.xDomainLine, this.dims.width);
        this.plotMilestones();
        this.plotMarkers();
        this.collisionDetectionNew();
    };
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.subscriptions.forEach((/**
         * @param {?} subscription
         * @return {?}
         */
        function (subscription) {
            subscription.unsubscribe();
        }));
    };
    ////////////////////////////////////
    //  ngx graph special funcs
    ///////////////////////////////////
    ////////////////////////////////////
    //  ngx graph special funcs
    ///////////////////////////////////
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.render = 
    ////////////////////////////////////
    //  ngx graph special funcs
    ///////////////////////////////////
    /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var dimstmp = this.getContainerDims();
        if (dimstmp) {
            this.width = dimstmp.width - this.widthMargin;
            this.height = dimstmp.height - this.heightMargin;
        }
        this.dims = Object(_swimlane_ngx_charts_release__WEBPACK_IMPORTED_MODULE_15__["calculateViewDimensions"])({
            width: this.width,
            height: this.height,
            margins: this.margin,
            xAxisHeight: this.xAxisHeight,
            yAxisWidth: this.yAxisWidth,
            showXLabel: this.showXAxisLabel,
            showYLabel: this.showYAxisLabel,
            legendType: this.schemeType,
        });
        this.view = [this.dims.width, this.dims.height];
        this.xDomainLine = this.getXDomainLine();
        this.yDomainLine = this.getYDomainLine();
        this.seriesDomain = this.getSeriesDomain();
        this.ySiteDomainLine = this.getYSiteDomainLine();
        this.xScaleLine = this.getXScaleLine(this.xDomainLine, this.dims.width);
        this.yScaleLine = this.getYScaleLine(this.yDomainLine, this.dims.height);
        this.ySiteScaleLine = this.getYSiteScaleLine(this.ySiteDomainLine, this.dims.height);
        this.setColors();
        this.transform = "translate(80,15)";
        this.options = {
            stepsArray: this.dateRange.map((/**
             * @param {?} date
             * @return {?}
             */
            function (date) {
                return { value: date.getTime() };
            })),
            translate: (/**
             * @param {?} value
             * @param {?} label
             * @return {?}
             */
            function (value, label) {
                return new Date(value).toDateString();
            })
        };
    };
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.createDateRange = /**
     * @return {?}
     */
    function () {
        this.dateRange = [];
        /** @type {?} */
        var strtDate = new Date(this.minValue);
        /** @type {?} */
        var endDate = new Date(this.maxValue);
        /** @type {?} */
        var moveDate = new Date(this.minValue);
        /** @type {?} */
        var i = 0;
        while (moveDate < endDate) {
            moveDate = new Date(this.minValue);
            moveDate.setDate(moveDate.getDate() + i);
            this.dateRange.push(moveDate);
            i++;
        }
    };
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getXDomainLine = /**
     * @return {?}
     */
    function () {
        var e_1, _a, e_2, _b, e_3, _c, e_4, _d, e_5, _e;
        /** @type {?} */
        var values = [];
        try {
            for (var _f = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__values"])(this.chartData), _g = _f.next(); !_g.done; _g = _f.next()) {
                var curve = _g.value;
                try {
                    for (var _h = (e_2 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__values"])(curve.series)), _j = _h.next(); !_j.done; _j = _h.next()) {
                        var d = _j.value;
                        if (values.indexOf(d.name) === -1) {
                            values.push(d.name);
                        }
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (_j && !_j.done && (_b = _h.return)) _b.call(_h);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_g && !_g.done && (_a = _f.return)) _a.call(_f);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _k = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__values"])(this.centerInitData), _l = _k.next(); !_l.done; _l = _k.next()) {
                var curve = _l.value;
                try {
                    for (var _m = (e_4 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__values"])(curve.series)), _o = _m.next(); !_o.done; _o = _m.next()) {
                        var d = _o.value;
                        if (values.indexOf(d.name) === -1) {
                            values.push(d.name);
                        }
                    }
                }
                catch (e_4_1) { e_4 = { error: e_4_1 }; }
                finally {
                    try {
                        if (_o && !_o.done && (_d = _m.return)) _d.call(_m);
                    }
                    finally { if (e_4) throw e_4.error; }
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_l && !_l.done && (_c = _k.return)) _c.call(_k);
            }
            finally { if (e_3) throw e_3.error; }
        }
        /** @type {?} */
        var tm = this.getXTMilestone();
        if (tm) {
            try {
                for (var tm_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__values"])(tm), tm_1_1 = tm_1.next(); !tm_1_1.done; tm_1_1 = tm_1.next()) {
                    var d = tm_1_1.value;
                    if (values.indexOf(d.date) === -1) {
                        values.push(new Date(d.date));
                    }
                }
            }
            catch (e_5_1) { e_5 = { error: e_5_1 }; }
            finally {
                try {
                    if (tm_1_1 && !tm_1_1.done && (_e = tm_1.return)) _e.call(tm_1);
                }
                finally { if (e_5) throw e_5.error; }
            }
        }
        this.scaleType = this.getScaleType(values);
        /** @type {?} */
        var domain = [];
        if (values.length === 0) {
            this.dateRange = values;
            return [];
        }
        if (this.scaleType === 'time') {
            // [Gaurav] Sort is mandatory for axis values to be in order for correct span on tooltip area
            // reference function, findClosestPointIndex, in file, tooltip-area.component.js
            values = values.slice().sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                /** @type {?} */
                var aDate = a.getTime();
                /** @type {?} */
                var bDate = b.getTime();
                if (aDate > bDate) {
                    return 1;
                }
                if (bDate > aDate) {
                    return -1;
                }
                return 0;
            }));
            this.minValue = new Date(values[0]).getTime();
            this.maxValue = new Date(values[values.length - 1]).getTime();
            this.createDateRange();
            domain = [this.minValue, this.maxValue];
        }
        else {
            domain = values;
        }
        this.xSet = values;
        return domain;
    };
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getYDomainLine = /**
     * @return {?}
     */
    function () {
        var e_6, _a, e_7, _b, e_8, _c;
        /** @type {?} */
        var domain = [];
        try {
            for (var _d = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__values"])(this.chartData), _e = _d.next(); !_e.done; _e = _d.next()) {
                var curve = _e.value;
                try {
                    for (var _f = (e_7 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__values"])(curve.series)), _g = _f.next(); !_g.done; _g = _f.next()) {
                        var d = _g.value;
                        if (domain.indexOf(d.value) < 0) {
                            domain.push(d.value);
                        }
                        if (d.min !== undefined) {
                            if (domain.indexOf(d.min) < 0) {
                                domain.push(d.min);
                            }
                        }
                        if (d.max !== undefined) {
                            if (domain.indexOf(d.max) < 0) {
                                domain.push(d.max);
                            }
                        }
                    }
                }
                catch (e_7_1) { e_7 = { error: e_7_1 }; }
                finally {
                    try {
                        if (_g && !_g.done && (_b = _f.return)) _b.call(_f);
                    }
                    finally { if (e_7) throw e_7.error; }
                }
            }
        }
        catch (e_6_1) { e_6 = { error: e_6_1 }; }
        finally {
            try {
                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);
            }
            finally { if (e_6) throw e_6.error; }
        }
        /** @type {?} */
        var yt = this.getYSubTMilestone();
        if (yt) {
            try {
                for (var yt_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__values"])(yt), yt_1_1 = yt_1.next(); !yt_1_1.done; yt_1_1 = yt_1.next()) {
                    var d = yt_1_1.value;
                    if (domain.indexOf(d.value) < 0) {
                        domain.push(d.value);
                    }
                }
            }
            catch (e_8_1) { e_8 = { error: e_8_1 }; }
            finally {
                try {
                    if (yt_1_1 && !yt_1_1.done && (_c = yt_1.return)) _c.call(yt_1);
                }
                finally { if (e_8) throw e_8.error; }
            }
        }
        /** @type {?} */
        var min = Math.min.apply(Math, Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(domain));
        /** @type {?} */
        var max = Math.max.apply(Math, Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(domain));
        min = Math.min(0, min);
        return [min, max];
    };
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getYSiteDomainLine = /**
     * @return {?}
     */
    function () {
        var e_9, _a, e_10, _b;
        /** @type {?} */
        var domain = [];
        try {
            for (var _c = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__values"])(this.centerInitData), _d = _c.next(); !_d.done; _d = _c.next()) {
                var curve = _d.value;
                try {
                    for (var _e = (e_10 = void 0, Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__values"])(curve.series)), _f = _e.next(); !_f.done; _f = _e.next()) {
                        var d = _f.value;
                        if (domain.indexOf(d.value) < 0) {
                            domain.push(d.value);
                        }
                        if (d.min !== undefined) {
                            if (domain.indexOf(d.min) < 0) {
                                domain.push(d.min);
                            }
                        }
                        if (d.max !== undefined) {
                            if (domain.indexOf(d.max) < 0) {
                                domain.push(d.max);
                            }
                        }
                    }
                }
                catch (e_10_1) { e_10 = { error: e_10_1 }; }
                finally {
                    try {
                        if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
                    }
                    finally { if (e_10) throw e_10.error; }
                }
            }
        }
        catch (e_9_1) { e_9 = { error: e_9_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_9) throw e_9.error; }
        }
        /** @type {?} */
        var min = Math.min.apply(Math, Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(domain));
        /** @type {?} */
        var max = Math.max.apply(Math, Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(domain));
        min = Math.min(0, min);
        /** @type {?} */
        var subjectDomainLine = this.getYDomainLine();
        if (subjectDomainLine[0] < 0) {
            /*const factor = Math.abs(subjectDomainLine[0]) / (subjectDomainLine[1] + Math.abs(subjectDomainLine[0]));
            min = -((max * factor) / (1 - factor));*/
            min = (subjectDomainLine[0] / subjectDomainLine[1]) * max;
        }
        return [min, max];
    };
    /**
     * @param {?} domain
     * @param {?} width
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getXScaleLine = /**
     * @param {?} domain
     * @param {?} width
     * @return {?}
     */
    function (domain, width) {
        /** @type {?} */
        var scale;
        if (this.scaleType === 'time') {
            scale = Object(d3_scale__WEBPACK_IMPORTED_MODULE_17__["scaleTime"])()
                .range([0, this.dims.width])
                .domain(domain);
        }
        else if (this.scaleType === 'linear') {
            scale = Object(d3_scale__WEBPACK_IMPORTED_MODULE_17__["scaleLinear"])()
                .range([0, this.dims.width])
                .domain(domain);
            if (this.roundDomains) {
                scale = scale.nice();
            }
        }
        return scale;
    };
    /**
     * @param {?} domain
     * @param {?} height
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getYScaleLine = /**
     * @param {?} domain
     * @param {?} height
     * @return {?}
     */
    function (domain, height) {
        /** @type {?} */
        var scale = Object(d3_scale__WEBPACK_IMPORTED_MODULE_17__["scaleLinear"])()
            .range([this.dims.height, 0])
            .domain(domain);
        return this.roundDomains ? scale.nice() : scale;
    };
    /**
     * @param {?} domain
     * @param {?} height
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getYSiteScaleLine = /**
     * @param {?} domain
     * @param {?} height
     * @return {?}
     */
    function (domain, height) {
        /** @type {?} */
        var scale = Object(d3_scale__WEBPACK_IMPORTED_MODULE_17__["scaleLinear"])()
            .range([this.dims.height, 0])
            .domain(domain);
        return this.roundDomains ? scale.nice() : scale;
    };
    /**
     * @param {?} values
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getScaleType = /**
     * @param {?} values
     * @return {?}
     */
    function (values) {
        var e_11, _a;
        /** @type {?} */
        var date = true;
        /** @type {?} */
        var num = true;
        try {
            for (var values_1 = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__values"])(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
                var value = values_1_1.value;
                if (!this.isDate(value)) {
                    date = false;
                }
                if (typeof value !== 'number') {
                    num = false;
                }
            }
        }
        catch (e_11_1) { e_11 = { error: e_11_1 }; }
        finally {
            try {
                if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
            }
            finally { if (e_11) throw e_11.error; }
        }
        if (date) {
            return 'time';
        }
        if (num) {
            return 'linear';
        }
        return 'ordinal';
    };
    /**
     * @param {?} value
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.isDate = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (value instanceof Date) {
            return true;
        }
        return false;
    };
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.setColors = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var domain;
        if (this.schemeType === 'ordinal') {
            domain = this.xDomainLine;
        }
        else {
            domain = this.yDomainLine;
        }
        /** @type {?} */
        var colorScheme = {
            domain: ['#de82f6', '#8d8b8e', '#93BDAA', '	#479a75', '#62a3ef', '#ca9bec',
                '#7c93d2', '#ead954', '#f16170']
        };
        this.colors = new _swimlane_ngx_charts_release__WEBPACK_IMPORTED_MODULE_15__["ColorHelper"](colorScheme, this.schemeType, domain, this.centerColor);
    };
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getSeriesDomain = /**
     * @return {?}
     */
    function () {
        this.combinedSeries = this.chartData.slice(0);
        this.combinedSeries.push({
            name: this.yAxisLabel,
            series: this.chartData
        });
        return this.combinedSeries.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.name; }));
    };
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.hideCircles = /**
     * @return {?}
     */
    function () {
        this.hoveredVertical = null;
        this.deactivateAll();
    };
    /**
     * @param {?} item
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.updateHoveredVertical = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.hoveredVertical = item.value;
        this.deactivateAll();
    };
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.deactivateAll = /**
     * @return {?}
     */
    function () {
        var e_12, _a;
        this.activeEntries = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(this.activeEntries);
        try {
            for (var _b = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__values"])(this.activeEntries), _c = _b.next(); !_c.done; _c = _b.next()) {
                var entry = _c.value;
                this.deactivate.emit({ value: entry, entries: [] });
            }
        }
        catch (e_12_1) { e_12 = { error: e_12_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_12) throw e_12.error; }
        }
        this.activeEntries = [];
    };
    /**
     * @param {?} item
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.onActivate = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var idx = this.activeEntries.findIndex((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return d.name === item.name && d.value === item.value && d.series === item.series;
        }));
        if (idx > -1) {
            return;
        }
        this.activeEntries = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])([item], this.activeEntries);
        this.activate.emit({ value: item, entries: this.activeEntries });
    };
    /**
     * @param {?} item
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.onDeactivate = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        /** @type {?} */
        var idx = this.activeEntries.findIndex((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return d.name === item.name && d.value === item.value && d.series === item.series;
        }));
        this.activeEntries.splice(idx, 1);
        this.activeEntries = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(this.activeEntries);
        this.deactivate.emit({ value: item, entries: this.activeEntries });
    };
    // filter data based on window selected
    // filter data based on window selected
    /**
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.filterData = 
    // filter data based on window selected
    /**
     * @param {?} startDate
     * @param {?} endDate
     * @return {?}
     */
    function (startDate, endDate) {
        // this.sliceData(this.data1);
        this.chartData.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            element.series = element.series.filter((/**
             * @param {?} m
             * @return {?}
             */
            function (m) { return new Date(m.name) >= new Date(startDate) && new Date(m.name) <= new Date(endDate); }));
        }));
        this.centerInitData.forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            element.series = element.series.filter((/**
             * @param {?} m
             * @return {?}
             */
            function (m) { return new Date(m.name) >= new Date(startDate) && new Date(m.name) <= new Date(endDate); }));
        }));
    };
    // date slider window selection
    // date slider window selection
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.onSlideValueChange = 
    // date slider window selection
    /**
     * @return {?}
     */
    function () {
        this.deepCopySegregate();
        // following code to invoked after charData changes
        this.filterData(this.minValue, this.maxValue);
        this.xDomainLine = [this.minValue, this.maxValue];
        this.xScaleLine = this.getXScaleLine(this.xDomainLine, this.dims.width);
        this.plotMilestones();
        this.plotMarkers();
        this.collisionDetectionNew();
    };
    /**
     * @private
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.deepCopySegregate = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.chartData = new Array();
        this.centerInitData = new Array();
        this.activeTooltipArea = new Array();
        /** @type {?} */
        var item;
        if (this.combinedData && this.combinedData.length > 0) {
            this.combinedData.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (_this.preferredCurves && _this.checkLegendState(element.code)) {
                    item = new CurveData();
                    item.name = element.name;
                    item.code = element.code;
                    if (item.code.indexOf('SI') > -1) {
                        item.series = Object.assign([], element.series);
                        _this.centerInitData = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(_this.centerInitData, [item]);
                    }
                    else {
                        item.series = Object.assign([], element.series);
                        _this.chartData = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(_this.chartData, [item]);
                    }
                    _this.activeTooltipArea = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(_this.activeTooltipArea, [item]);
                }
            }));
        }
    };
    /**
     * @private
     * @param {?} code
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.checkLegendState = /**
     * @private
     * @param {?} code
     * @return {?}
     */
    function (code) {
        for (var i = 0; i < this.preferredCurves.length; i++) {
            if (code) {
                if (code.indexOf(this.preferredCurves[i]) > -1) {
                    return true;
                }
            }
        }
        return false;
    };
    /**
     * @private
     * @param {?} legendArr
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getSelectedMarkerFromLegend = /**
     * @private
     * @param {?} legendArr
     * @return {?}
     */
    function (legendArr) {
        /** @type {?} */
        var data = new Array();
        if (this.milestoneData) {
            if (this.milestoneData.markers) {
                data = this.milestoneData.markers.filter((/**
                 * @param {?} elm
                 * @return {?}
                 */
                function (elm) { return legendArr.indexOf(elm.id) > -1; }));
            }
        }
        return data;
    };
    /**
     * @private
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.clearMileStoneShapes = /**
     * @private
     * @return {?}
     */
    function () {
        this.targetMileStoneX = [];
        this.targetMileStoneY = [];
    };
    /**
     * @private
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.clearMarkerShapes = /**
     * @private
     * @return {?}
     */
    function () {
        this.markerPlots = [];
    };
    /**
     * @private
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.plotOnlyTodayDateMilestone = /**
     * @private
     * @return {?}
     */
    function () {
        this.markerPlots = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(this.todaysDateMilestone.markers);
    };
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.plotMarkers = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.preferredCurves) {
            if (this.preferredCurves.indexOf(this.markerKey) < 0 && this.preferredCurves.indexOf('today') < 0) {
                this.clearMarkerShapes();
                return;
            }
            else if (this.preferredCurves.indexOf(this.markerKey) < 0 && this.preferredCurves.indexOf('today') > -1) {
                this.plotOnlyTodayDateMilestone();
                return;
            }
        }
        if (this.preferredCurves) {
            this.markers = this.getSelectedMarkerFromLegend(this.preferredCurves);
        }
        this.markerPlots = [];
        if (this.markers && this.markers.length > 0) {
            this.markers.filter((/**
             * @param {?} m
             * @return {?}
             */
            function (m) { return new Date(m.date) >= new Date(_this.minValue) && new Date(m.date) <= new Date(_this.maxValue); })).forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (!_this.milestonesForCopyOnly[element.name]) {
                    /** @type {?} */
                    var color = _this.centerColor.filter((/**
                     * @param {?} m
                     * @return {?}
                     */
                    function (m) { return m.name === element.code; }));
                    if (color) {
                        element.color = color[0].value;
                    }
                    element.scaleX = _this.xScaleLine(new Date(element.date));
                    if (element.name === '25%' || element.name === '50%' || element.name === '90%') {
                        element.scaleX = 0;
                        element.scaleY = _this.ySiteScaleLine(element.value);
                    }
                    else {
                        element.scaleY = 0;
                    }
                    _this.markerPlots.push(new TargetMilestone(element.name, element.date, element.description, element.scaleX, element.scaleY, element.value));
                }
            }));
            this.withoutDateMarkerPlots = [];
            this.markers.filter((/**
             * @param {?} m
             * @return {?}
             */
            function (m) { return m.name === _this.tempPlannedSite || m.name === _this.tempPlannedScreening || m.name === _this.tempMaximumRandomization
                || m.name === _this.tempMaximumScreening; })).forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (element.axis === 'subject') {
                    if (_this.yScaleLine.domain()[1] < element.value) {
                        element.scaleY = 0;
                    }
                    else {
                        element.scaleY = _this.yScaleLine(element.value);
                    }
                    element.scaleX = _this.dims.width + 1;
                }
                else if (element.axis === 'site') {
                    if (_this.ySiteScaleLine.domain()[1] < element.value) {
                        element.scaleY = 0;
                    }
                    else {
                        element.scaleY = _this.ySiteScaleLine(element.value);
                    }
                    element.scaleX = 0;
                }
                // element.name = element.name.replace(/_/g, ' ');
                _this.withoutDateMarkerPlots.push(new TargetMilestone(element.name, ' ', element.description, element.scaleX, element.scaleY, element.value));
            }));
            if (this.preferredCurves.indexOf('today') > -1) {
                this.markerPlots = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(this.withoutDateMarkerPlots, this.todaysDateMilestone.markers, this.markerPlots);
            }
            else {
                this.markerPlots = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(this.withoutDateMarkerPlots, this.markerPlots);
            }
        }
    };
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.isMileStoneSelected = /**
     * @return {?}
     */
    function () {
        if (this.preferredCurves) {
            if (this.preferredCurves.indexOf(this.milestoneKey) > 0) {
                return true;
            }
        }
        return false;
    };
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.plotMilestones = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var mileStnData = new Array();
        if (this.milestoneData && this.milestoneData.targetMileStone) {
            mileStnData = this.milestoneData.targetMileStone;
        }
        if (!this.isMileStoneSelected()) {
            this.clearMileStoneShapes();
            return;
        }
        this.targetMileStoneX = [];
        this.targetMileStoneY = [];
        if (mileStnData) {
            mileStnData.filter((/**
             * @param {?} m
             * @return {?}
             */
            function (m) { return m.axis === 'date' && new Date(m.date) >= new Date(_this.minValue) && new Date(m.date) <= new Date(_this.maxValue); })).forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.targetMileStoneX.push(new TargetMilestone(element.name, element.date, element.description, _this.xScaleLine(new Date(element.date)), 0, -1));
            }));
            this.targetMileStoneX.sort((/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            function (a, b) {
                return new Date(a.data).getTime() - new Date(b.data).getTime();
            }));
            mileStnData.filter((/**
             * @param {?} m
             * @return {?}
             */
            function (m) { return m.axis === 'subject' && m.value >= _this.yDomainLine[0] && m.value <= _this.yDomainLine[1]; })).forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.targetMileStoneY.push(new TargetMilestone(element.description, element.value, element.description, _this.dims.width - 40, _this.yScaleLine(element.value), element.value));
            }));
        }
    };
    /**
     * @param {?} name
     * @param {?} desc
     * @param {?} value
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getMileStoneRTTooltipData = /**
     * @param {?} name
     * @param {?} desc
     * @param {?} value
     * @return {?}
     */
    function (name, desc, value) {
        /** @type {?} */
        var result = desc + '\n ' + value;
        return result;
    };
    /**
     * @param {?} name
     * @param {?} desc
     * @param {?} date
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getMileStoneTooltipData = /**
     * @param {?} name
     * @param {?} desc
     * @param {?} date
     * @return {?}
     */
    function (name, desc, date) {
        return desc + '\n' + ' (' + moment$4(date).format(this.dateFormat) + ')';
    };
    /**
     * @param {?} name
     * @param {?} desc
     * @param {?} date
     * @param {?} value
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getMarkerTooltipData = /**
     * @param {?} name
     * @param {?} desc
     * @param {?} date
     * @param {?} value
     * @return {?}
     */
    function (name, desc, date, value) {
        return desc + '\n\n' + ' (' + moment$4(date).format(this.dateFormat) + ')';
    };
    /**
     * @param {?} desc
     * @param {?} value
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getTargetLineTooltipData = /**
     * @param {?} desc
     * @param {?} value
     * @return {?}
     */
    function (desc, value) {
        return desc + ' (' + value + ')';
    };
    /**
     * @param {?} event
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.onActivateDeactivate = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        console.log('in onActivateDeactivate');
    };
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getContainerDims = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var width;
        /** @type {?} */
        var height;
        /** @type {?} */
        var hostElem = this.chartElement.nativeElement;
        if (hostElem.parentNode !== null) { // Get the container dimensions
            // Get the container dimensions
            /** @type {?} */
            var dims = hostElem.parentNode.getBoundingClientRect();
            width = dims.width;
            height = dims.height;
        }
        if (width && height) {
            return { width: width, height: height };
        }
        return null;
    };
    /**
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.collisionDetectionNew = /**
     * @return {?}
     */
    function () {
        this.allMilestones = [];
        this.allMilestones = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(this.targetMileStoneY, this.targetMileStoneX, this.markerPlots);
        this.allMilestones.sort((/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        function (a, b) {
            // return b.seedNumber() - a.seedNumber();
            if (b.seedNumber() - a.seedNumber() > 0) {
                return 1;
            }
            else if (b.seedNumber() === a.seedNumber() && b.seedNumber() > 0 && b.value > a.value) {
                return 1;
            }
            else if (b.seedNumber() === a.seedNumber() && b.seedNumber() > 0 && b.value < a.value) {
                return -1;
            }
            else if (b.seedNumber() !== a.seedNumber() && b.seedNumber() > 0) {
                return 1;
            }
            else if (b.seedNumber() !== a.seedNumber() && a.seedNumber() > 0) {
                return -1;
            }
            return 0;
        }));
        for (var i = 0; i < this.allMilestones.length; i++) {
            this.allMilestones[i].x = this.allMilestones[i].scaleX - this.collisionSafety / 2;
            this.allMilestones[i].y = this.allMilestones[i].scaleY;
            if (this.allMilestones[i].scaleX < this.collisionSafety / 2) {
                this.allMilestones[i].x = 0;
            }
            else if (this.allMilestones[i].scaleX > this.dims.width - this.collisionSafety / 2) {
                this.allMilestones[i].x = this.dims.width - this.collisionSafety;
            }
            if (!this.allMilestones[i].isTargetLine() && !this.allMilestones[i].isTargetRandomization()
                && !this.allMilestones[i].isTargetScreening()) {
                for (var j = 0; j < i; j++) {
                    if ((this.allMilestones[j].isTargetLine() || this.allMilestones[j].isTargetRandomization()
                        || this.allMilestones[j].isTargetScreening())
                        && Math.abs(this.allMilestones[j].y - this.allMilestones[i].y) < this.colisionYfactor
                        && Math.abs(this.allMilestones[j].x - this.allMilestones[i].x) < this.collisionSafety) {
                        // potential infinite loop avoided by + 1
                        this.allMilestones[i].y = this.allMilestones[j].y + this.colisionYfactor + 1;
                        this.allMilestones[i].scaleY = this.allMilestones[i].y;
                        j = 0;
                    }
                    else if (Math.abs(this.allMilestones[i].x - this.allMilestones[j].x) < this.collisionSafety
                        && Math.abs(this.allMilestones[j].y - this.allMilestones[i].y) < this.colisionYfactor) {
                        // potential infinite loop avoided by + 1
                        this.allMilestones[i].y = this.allMilestones[j].y + this.colisionYfactor + 1;
                        this.allMilestones[i].scaleY = this.allMilestones[i].y;
                        j = 0;
                    }
                }
            }
            else {
                for (var j = 0; j < i; j++) {
                    if (this.allMilestones[j].isTargetLine() && this.allMilestones[i].isTargetLine()
                        && Math.abs(this.allMilestones[j].y - this.allMilestones[i].y) < this.colisionYfactor) {
                        this.allMilestones[i].x = this.allMilestones[j].x + this.allMilestones[j].width();
                    }
                    else if (this.allMilestones[j].isTargetRandomization() && this.allMilestones[i].isTargetRandomization()
                        && Math.abs(this.allMilestones[j].y - this.allMilestones[i].y) < this.colisionYfactor) {
                        this.allMilestones[i].y = this.allMilestones[j].y - 10;
                    }
                    else if (this.allMilestones[j].isTargetScreening() && this.allMilestones[i].isTargetScreening()
                        && Math.abs(this.allMilestones[j].y - this.allMilestones[i].y) < this.colisionYfactor) {
                        this.allMilestones[i].y = this.allMilestones[j].y - 10;
                    }
                    else if (!this.allMilestones[j].isTargetLine() && !this.allMilestones[i].isTargetLine()
                        && Math.abs(this.allMilestones[j].y - this.allMilestones[i].y) < this.colisionYfactor) {
                        this.allMilestones[i].x = this.allMilestones[j].x - 5
                            - this.allMilestones[i].width();
                    }
                }
            }
        }
        this.plotAheadBehindData(this.allMilestones);
    };
    /**
     * @private
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getXTMilestone = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.milestoneData && this.milestoneData.targetMileStone) {
            /** @type {?} */
            var xAxisArr = this.milestoneData.targetMileStone.filter((/**
             * @param {?} m
             * @return {?}
             */
            function (m) { return m.axis === 'date'; }));
            return xAxisArr;
        }
        return null;
    };
    /**
     * @private
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.getYSubTMilestone = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.milestoneData && this.milestoneData.targetMileStone) {
            /** @type {?} */
            var xAxisArr = this.milestoneData.targetMileStone.filter((/**
             * @param {?} m
             * @return {?}
             */
            function (m) { return m.axis === 'subject'; }));
            return xAxisArr;
        }
        return null;
    };
    /**
     * @param {?} tick
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.toInt = /**
     * @param {?} tick
     * @return {?}
     */
    function (tick) {
        return parseInt(tick, 0);
    };
    /**
     * @param {?} markersData
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.plotAheadBehindData = /**
     * @param {?} markersData
     * @return {?}
     */
    function (markersData) {
        /** @type {?} */
        var tempToday;
        /** @type {?} */
        var tempPlsr;
        /** @type {?} */
        var tempTlsr;
        /** @type {?} */
        var tempAheadBehindColor;
        /** @type {?} */
        var width;
        /** @type {?} */
        var tempAheadBehindObj = [];
        markersData.filter((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return m.name === 'PLSR' || m.name === 'TLSR' || m.name === 'Today'; })).forEach((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (element.name === 'Today') {
                tempToday = element.scaleX;
            }
            else if (element.name === 'PLSR') {
                tempPlsr = element.scaleX;
            }
            else if (element.name === 'TLSR') {
                tempTlsr = element.scaleX;
            }
        }));
        if (tempPlsr && tempTlsr && this.preferredCurves.indexOf('aheadBehind') > -1) {
            if ((tempPlsr - tempTlsr) > 0) {
                tempAheadBehindColor = '#F6D7DB'; // behind-pink
                width = tempPlsr - tempTlsr;
            }
            else {
                tempAheadBehindColor = '#b9ccec'; // ahead-blue
                width = tempTlsr - tempPlsr;
            }
            tempAheadBehindObj.push({
                color: tempAheadBehindColor,
                x: (tempPlsr - tempTlsr) > 0 ? tempTlsr : tempPlsr,
                y: 0,
                width: width,
                height: this.dims.height
            });
        }
        if (tempToday && this.preferredCurves.indexOf('today') > -1
            && (this.xScaleLine(this.xDomainLine[1]) - tempToday) > 0) {
            tempAheadBehindObj.push({
                color: '#e69e26',
                x: tempToday,
                y: 0,
                width: this.xScaleLine(this.xDomainLine[1]) - tempToday,
                height: this.dims.height
            });
        }
        this.aheadBehindData = tempAheadBehindObj;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CTOSPlanChartComponent.prototype.collectPins = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /*for (const prop in $event) {
          if (this.singlePinnedPoints !== undefined) {
            this.singlePinnedPoints[prop] = $event[prop];
          }
        }*/
        this.singlePinnedPoints = $event;
    };
    CTOSPlanChartComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-plan-chart',
                    template: "<ngx-charts-chart\r\n [view]=\"view\" *ngIf=\"activeTooltipArea.length > 0\">\r\n  <svg:g\r\n  [attr.transform]=\"transform\" \r\n  class=\"line-chart chart \">\r\n    <svg:g ngx-charts-x-axis \r\n    [xScale]=\"xScaleLine\" \r\n    [dims]=\"dims\" \r\n    [showGridLines]=\"showGridLines\" \r\n    [showLabel]=\"showXAxisLabel\">\r\n    </svg:g>\r\n    <svg:g ngx-charts-y-axis \r\n    [yScale]=\"yScaleLine\" \r\n    [dims]=\"dims\" \r\n    [yOrient]=\"yOrientRight\" \r\n    [showLabel]=\"showYAxisLabel\"\r\n      [labelText]=\"yAxisLabel\">\r\n    </svg:g>\r\n    <svg:g ngx-charts-y-axis \r\n    [yScale]=\"ySiteScaleLine\"\r\n    [tickFormatting]=\"toInt\"\r\n    [dims]=\"dims\" \r\n    [yOrient]=\"yOrientLeft\" \r\n      [showLabel]=\"showYAxisLabel\" \r\n      [labelText]=\"y2AxisLabel\">\r\n    </svg:g>\r\n    \r\n    <svg:g [ngClass]=\"type\">\r\n\r\n    </svg:g>\r\n\r\n    <svg:g>\r\n      <g *ngFor=\"let item of aheadBehindData\">\r\n        <rect [attr.x] = \"item.x\" [attr.y] = \"item.y\" [attr.width] = \"item.width\" [attr.height] = \"item.height\"\r\n        [attr.fill] = \"item.color\" opacity=\"0.2\" stroke-width=\"0.5px\" />\r\n      </g>\r\n    </svg:g>\r\n\r\n    <svg:g>\r\n      <svg:g *ngFor=\"let series of chartData\">\r\n        <svg:g extended-ngx-charts-line-series \r\n        [xScale]=\"xScaleLine\" \r\n        [yScale]=\"yScaleLine\" \r\n        [colors]=\"colors\" \r\n        [data]=\"series\" \r\n        [scaleType]=\"scaleType\"\r\n          [curve]=\"curve\" />\r\n      </svg:g>\r\n      <svg:g *ngFor=\"let series of centerInitData\">\r\n        <svg:g extended-ngx-charts-line-series \r\n        [xScale]=\"xScaleLine\" \r\n        [yScale]=\"ySiteScaleLine\" \r\n        [colors]=\"colors\" \r\n        [data]=\"series\" \r\n        [scaleType]=\"scaleType\"\r\n          [curve]=\"curve\" />\r\n      </svg:g>\r\n      <svg:g app-extended-ngx-tooltip-area\r\n      [sizeChanged] = \"sizeChanged\"\r\n      [dataChanged] = \"dataChanged\"\r\n      [dims]=\"dims\" \r\n      [xSet]=\"xSet\" \r\n      [xScale]=\"xScaleLine\" \r\n      [results]=\"activeTooltipArea\" \r\n      [colors]=\"colors\"\r\n        (hover)=\"updateHoveredVertical($event)\" />\r\n      <svg:g *ngFor=\"let series of chartData\">\r\n        <svg:g app-extended-ngx-charts-circle-series\r\n        [pinnedObject] = \"pinnedObjects\"\r\n        [sizeChanged] = \"sizeChanged\"\r\n        [dataChanged] = \"dataChanged\"\r\n        [xScale]=\"xScaleLine\" \r\n        [yScale]=\"yScaleLine\" \r\n        [colors]=\"colors\" \r\n        [data]=\"series\" \r\n        [scaleType]=\"scaleType\"\r\n          [visibleValue]=\"hoveredVertical\" \r\n          [activeEntries]=\"activeEntries\" (activate)=\"onActivate($event)\" (deactivate)=\"onDeactivate($event)\"\r\n          (collectPins)=\"collectPins($event)\"\r\n        />\r\n      </svg:g>\r\n      <svg:g *ngFor=\"let series of centerInitData\">\r\n        <svg:g app-extended-ngx-charts-circle-series\r\n        [pinnedObject] = \"pinnedObjects\"\r\n        [sizeChanged] = \"sizeChanged\"\r\n        [dataChanged] = \"dataChanged\"\r\n        [xScale]=\"xScaleLine\" \r\n        [yScale]=\"ySiteScaleLine\" \r\n        [colors]=\"colors\" \r\n        [data]=\"series\" \r\n        [scaleType]=\"scaleType\"\r\n          [visibleValue]=\"hoveredVertical\" \r\n          [activeEntries]=\"activeEntries\" (activate)=\"onActivate($event)\" (deactivate)=\"onDeactivate($event)\" \r\n          (collectPins)=\"collectPins($event)\"\r\n        />\r\n      </svg:g>\r\n    </svg:g>\r\n\r\n    <svg:g class='milestones'>\r\n        <g class=\"milestone-x\" *ngFor=\"let milestone of targetMileStoneX; let i = index\">\r\n          <g>\r\n            <rect style=\"cursor:pointer\" [attr.x]=\"(milestone.x)\" [attr.y]=\"(milestone.y - 15)\" width=\"110\" height=\"15\" \r\n              [attr.rx] = \"3\" [attr.ry] = \"3\"\r\n              [attr.fill]=\"milestone.color()\" opacity=\"0.2\" stroke-width=\"0.5px\" [matTooltipClass]=\"'ctos-text-centered-tooltip'\"\r\n              [matTooltip]=\"getMileStoneTooltipData(milestone.name, milestone.description,milestone.data)\"\r\n              />\r\n            <text\r\n              fill=\"black\" stroke-width=\".01px\"\r\n              [attr.x]=\"(milestone.x + 5)\"\r\n              [attr.y]=\"(milestone.y - 3)\"\r\n              style=\"pointer-events: none;font-size: 9px;\">{{milestone.displayText}}\r\n            </text>\r\n            <line [attr.x1]=\"milestone.scaleX\" [attr.y1]=\"milestone.scaleY\" \r\n              [attr.x2]=\"milestone.scaleX\" [attr.y2]=\"this.dims.height\" [attr.stroke]=\"milestone.color()\" stroke-width=\"0.5\"  />\r\n          </g>\r\n        </g>\r\n  \r\n       <g class=\"milestone-y\"\r\n           *ngFor=\"let milestone of targetMileStoneY; let i = index\">\r\n            <text\r\n              fill=\"black\" stroke=\"white\" stroke-width=\".01px\"\r\n              [attr.x]=\"(milestone.x)\"\r\n              [attr.y]=\"(milestone.y - 3)\"\r\n              style=\"font-size: 9px;\">{{milestone.description}} ({{milestone.data}})\r\n              <title [ngClass] = \"'ctos-text-centered-tooltip'\">{{milestone.description}} ({{milestone.data}})</title>\r\n            </text>\r\n            <line [attr.x1]=\"0\" [attr.y1]=\"milestone.scaleY\" [attr.x2]=\"this.dims.width\" [attr.y2]=\"milestone.scaleY\" stroke=\"gray\" stroke-width=\"0.5\"  />\r\n         </g>\r\n    </svg:g>\r\n\r\n    <svg:g class=\"markers\">\r\n      <g class=\"marker\" \r\n        style=\"cursor:pointer\" \r\n        *ngFor=\"let markerPlot of markerPlots; let i = index\">\r\n        <rect *ngIf=\"!markerPlot.isTargetLine() && !markerPlot.isTargetRandomization()  && !markerPlot.isTargetScreening()\" [attr.x]=\"markerPlot.x\" [attr.y]=\"(markerPlot.scaleY - 15)\" width=\"110\" height=\"15\" \r\n          [attr.rx] = \"3\" [attr.ry] = \"3\"\r\n          [attr.fill]=\"markerPlot.color()\" opacity=\"0.2\" stroke-width=\"0.5px\" [matTooltipClass]=\"'ctos-text-centered-tooltip'\"\r\n          [matTooltip]=\"getMarkerTooltipData(markerPlot.name, markerPlot.description,markerPlot.data,markerPlot.value)\"/>\r\n        <text *ngIf=\"!markerPlot.isTargetLine() && !markerPlot.isTargetRandomization()  && !markerPlot.isTargetScreening()\"\r\n          fill=\"black\" stroke-width=\".01px\"\r\n          [attr.x]=\"(markerPlot.x + 5)\"\r\n          [attr.y]=\"(markerPlot.scaleY - 3)\"\r\n          style=\"pointer-events: none;font-size: 9px;\">{{markerPlot.displayText}}\r\n        </text>\r\n        <line *ngIf=\"!markerPlot.isTargetLine() && !markerPlot.isTargetRandomization()  && !markerPlot.isTargetScreening()\" [attr.x1]=\"markerPlot.scaleX\" [attr.y1]=\"markerPlot.scaleY\" \r\n        [attr.x2]=\"markerPlot.scaleX\" [attr.y2]=\"this.dims.height\" [attr.stroke]=\"markerPlot.color()\" stroke-width=\"0.5\"  />\r\n        \r\n        <!--Target line on Site axis-->\r\n        <text *ngIf=\"markerPlot.isTargetLine() && !markerPlot.isTargetRandomization() && !markerPlot.isTargetScreening()\"\r\n          fill=\"black\" stroke=\"white\" stroke-width=\".01px\"\r\n          [attr.x]=\"(markerPlot.x)\"\r\n          [attr.y]=\"(markerPlot.y - 3)\"\r\n          style=\"font-size: 9px;\">{{markerPlot.name}} ({{markerPlot.value}})\r\n          <title [ngClass] = \"'ctos-text-centered-tooltip'\">{{markerPlot.description}} ({{markerPlot.value}})</title>\r\n        </text>\r\n        <line *ngIf=\"markerPlot.isTargetLine() && !markerPlot.isTargetRandomization()  && !markerPlot.isTargetScreening()\" [attr.x1]=\"0\" [attr.y1]=\"markerPlot.scaleY\" [attr.x2]=\"this.dims.width\" [attr.y2]=\"markerPlot.scaleY\" stroke=\"gray\" stroke-width=\"0.5\"  />\r\n\r\n        <!--Target line on subject axis-->\r\n        <text *ngIf=\"(markerPlot.isTargetRandomization() || markerPlot.isTargetScreening()) && !markerPlot.isTargetLine()\"\r\n          fill=\"black\" stroke=\"white\" stroke-width=\".01px\"\r\n          [attr.x]=\"(markerPlot.x)\"\r\n          [attr.y]=\"(markerPlot.y - 3)\"\r\n          style=\"font-size: 9px;\">{{markerPlot.name}} ({{markerPlot.value}})\r\n          <title [ngClass] = \"'ctos-text-centered-tooltip'\">{{markerPlot.description}} ({{markerPlot.value}})</title>\r\n        </text>\r\n        <line *ngIf=\"(markerPlot.isTargetRandomization() || markerPlot.isTargetScreening()) && !markerPlot.isTargetLine()\" [attr.x1]=\"0\" [attr.y1]=\"markerPlot.scaleY\"\r\n         [attr.x2]=\"this.dims.width\" [attr.y2]=\"markerPlot.scaleY\" stroke=\"green\" stroke-width=\"0.5\"/>\r\n      </g>\r\n    </svg:g>\r\n  </svg:g>\r\n</ngx-charts-chart>\r\n<ng5-slider [ngStyle]=\"{'top': sliderTop+10 +'px'}\" *ngIf='activeTooltipArea.length > 0 && graphRendered' \r\n  [manualRefresh]=\"manualRefresh\" \r\n  [(value)]=\"minValue\" \r\n  [(highValue)]=\"maxValue\" \r\n  [options]=\"options\"\r\n  (userChangeEnd)='onSlideValueChange()'></ng5-slider>\r\n<div *ngIf='activeTooltipArea.length == 0' style='text-align: center;width:100%;position: relative; top: 100px'>\r\n  No Data to display\r\n</div>",
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                    styles: [".ngx-charts{float:right;overflow:visible}.ngx-charts .arc,.ngx-charts .bar,.ngx-charts .circle{cursor:pointer}.ngx-charts .data-circle{stroke-width:2px;stroke:#9e54b0;fill:#fff}.ngx-charts .perc-text{font-size:9px;font-weight:700}.ngx-charts .arc.active,.ngx-charts .arc:hover,.ngx-charts .bar.active,.ngx-charts .bar:hover,.ngx-charts .card.active,.ngx-charts .card:hover,.ngx-charts .cell.active,.ngx-charts .cell:hover{opacity:.8;-webkit-transition:opacity .1s ease-in-out;transition:opacity .1s ease-in-out}.ngx-charts .arc:focus,.ngx-charts .bar:focus,.ngx-charts .card:focus,.ngx-charts .cell:focus,.ngx-charts g:focus{outline:0}.ngx-charts g .line-series>path.line{stroke-width:2px}.ngx-charts .area-series.inactive,.ngx-charts .line-series-range.inactive,.ngx-charts .line-series.inactive{-webkit-transition:opacity .1s ease-in-out;transition:opacity .1s ease-in-out;opacity:.2}.ngx-charts .line-highlight{display:none}.ngx-charts .line-highlight.active{display:block}.ngx-charts .area{opacity:.6}.ngx-charts .circle:hover{cursor:pointer}.ngx-charts .label{font-size:12px;font-weight:400}.ngx-charts .tooltip-anchor{fill:#000}.ngx-charts .gridline-path{stroke:#ddd;stroke-width:1;fill:none}.ngx-charts .grid-panel rect{fill:none}.ngx-charts .grid-panel.odd rect{fill:rgba(0,0,0,.05)}#isMilesonesVisible{margin:7px}.card{border:none;box-shadow:0 4px 20px rgba(0,0,0,.5);display:inline-block}.areaGenerator{opacity:.35}.zoom{cursor:move;fill:none;pointer-events:all}.ng5-slider{margin:0!important;left:20px;width:90%!important;top:100px}.ng5-slider-expanded{width:85%!important}.ng5-slider .ng5-slider-bubble{font-size:11px!important}.ng5-slider .ng5-slider-pointer{width:18px!important;height:18px!important;top:-7px!important;z-index:1!important}.ng5-slider .ng5-slider-pointer:after{top:3px!important;left:3px!important;margin:2px}"]
                }] }
    ];
    /** @nocollapse */
    CTOSPlanChartComponent.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] },
        { type: CTOSPlanChartLegendService },
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Renderer2"] }
    ]; };
    CTOSPlanChartComponent.propDecorators = {
        combinedData: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        width: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        height: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        centerColor: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        milestoneData: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        refresh: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        type: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        axisLabels: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        activate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
        deactivate: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
        hideCircles: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"], args: ['mouseleave',] }]
    };
    return CTOSPlanChartComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ctos-plan-chart-legend/ctos-plan-chart-legend.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CTOSPlanChartLegendComponent = /** @class */ (function () {
    function CTOSPlanChartLegendComponent(lgdServ) {
        this.lgdServ = lgdServ;
        this.approved = ['AppPSR', 'AppPSI', 'AppPSS',
            'ActPSR', 'ActSI', 'ActSS', 'ActSF', 'ActDO',
            'UpdPrSI', 'UpdPrSR', 'UpdPrSS',
            'Act', 'Tar', 'Mil'
        ];
        this.adjustment = ['AdjPSR', 'AdjPSI', 'AdjPSS',
            'ActPSR', 'ActSI', 'ActSS', 'ActSF', 'ActDO',
            'UpdPrSI', 'UpdPrSR', 'UpdPrSS',
            'Act', 'Tar', 'Mil'
        ];
        this.previous = ['AppPSR', 'AppPSI', 'AppPSS',
            'ActPSR', 'ActSI', 'ActSS', 'ActSF', 'ActDO',
            'UpdPrSI', 'UpdPrSR', 'UpdPrSS',
            'Act', 'Tar', 'Mil'
        ];
        this.base = ['BasPSR', 'BasPSI', 'BasPSS',
            'ActPSR', 'ActSI', 'ActSS', 'ActSF', 'ActDO',
            'UpdPrSI', 'UpdPrSR', 'UpdPrSS',
            'Act', 'Tar', 'Mil'
        ];
        this.ExpandCollapse = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        this.TriggerChange = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
        this.isExpand = false;
        this.pressed = false;
        this.presentCurves = {};
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    CTOSPlanChartLegendComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var forceEmit = false;
        if (changes && changes.preference) {
            this.lgdServ.selectedCurves = this.preference;
        }
        this.lgdServ.isDirty = false;
        this.presentCurves = {};
        if (this.lgdServ.selectedCurves && this.lgdServ.selectedCurves.length > 0 && this.chartData instanceof Array) {
            this.chartData.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.presentCurves[element.code] = true;
            }));
            this.addOtherCurves();
            // to take care of default updated projection checking if present
            /*if (this.presentCurves['UpdPr'])  {
                this.lgdServ.selectedCurves = [...this.lgdServ.selectedCurves, ...['UpdPrSI', 'UpdPrSR', 'UpdPrSS', 'UpdPr']];
            }*/
            this.groups.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                element.value.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    element.checked = false;
                    if (_this.presentCurves[item.value] && !item.hasOwnProperty('dependOn')) {
                        item['disabled'] = false;
                        item['checked'] = (_this.lgdServ.selectedCurves.indexOf(item.value) > -1) ? true : false;
                    }
                    else if (_this.presentCurves[item.value] && item.hasOwnProperty('dependOn')) {
                        if (_this.lgdServ.selectedCurves.indexOf(item.dependOn) > -1
                            && _this.lgdServ.selectedCurves.indexOf(item.value) < 0) {
                            _this.lgdServ.selectedCurves.push(item.value);
                        }
                        item['disabled'] = false;
                        item['checked'] = _this.lgdServ.selectedCurves.indexOf(item.value) > -1 ? true : false;
                    }
                    else if (!_this.presentCurves[item.value] && item.hasOwnProperty('dependOn')) {
                        /** @type {?} */
                        var idx = _this.lgdServ.selectedCurves.indexOf(item.value);
                        if (idx > -1) {
                            _this.lgdServ.selectedCurves.splice(idx, 1);
                        }
                        item['disabled'] = true;
                        item['checked'] = false;
                    }
                    else {
                        item['disabled'] = true;
                        item['checked'] = false;
                    }
                }));
            }));
            /*if (changes && changes.chartData && changes.chartData.currentValue.length !== changes.chartData.previousValue.length) {
                forceEmit = true;
            }*/
            this.TriggerChange.next(forceEmit);
        }
        else if (this.lgdServ.selectedCurves.length === 0) {
            /** @type {?} */
            var profileArr_1 = [];
            this.presentCurves = {};
            // this.profile = 'Approved';
            switch (this.profile.type) {
                case 'Adjustment': {
                    profileArr_1 = this.adjustment;
                    break;
                }
                case 'Approved': {
                    profileArr_1 = this.approved;
                    break;
                }
                case 'PreviouslyApproved': {
                    profileArr_1 = this.previous;
                    break;
                }
                case 'Base': {
                    profileArr_1 = this.base;
                    break;
                }
            }
            if (profileArr_1.length > 0) {
                // check for present curves and profile to render the legend
                this.lgdServ.selectedCurves = profileArr_1;
                this.preference = profileArr_1;
                if (this.chartData instanceof Array && this.groups) {
                    this.chartData.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    function (element) {
                        _this.presentCurves[element.code] = true;
                    }));
                    this.addOtherCurves();
                    this.groups.forEach((/**
                     * @param {?} element
                     * @return {?}
                     */
                    function (element) {
                        element.value.forEach((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) {
                            element.checked = false;
                            if (_this.presentCurves[item.value]) {
                                item['disabled'] = false;
                                item['checked'] = (profileArr_1.indexOf(item.value) > -1) ? true : false;
                            }
                            else {
                                item['disabled'] = true;
                                item['checked'] = false;
                            }
                        }));
                    }));
                    this.TriggerChange.next(forceEmit);
                }
            }
        }
        this.lgdServ.planKey = this.profile.key;
    };
    /**
     * @return {?}
     */
    CTOSPlanChartLegendComponent.prototype.xpandAllLegend = /**
     * @return {?}
     */
    function () {
        this.pressed = !this.pressed;
        this.ExpandCollapse.next(this.pressed);
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CTOSPlanChartLegendComponent.prototype.changePref = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        // this.lgdServ.selectedCurves = $event;
        this.lgdServ.setLegendSelection(this.preference);
        if (this.preference) {
            this.lgdServ.setLegendPref(this.preference);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CTOSPlanChartLegendComponent.prototype.OnLegendState = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.isExpand = $event;
    };
    /**
     * @return {?}
     */
    CTOSPlanChartLegendComponent.prototype.addOtherCurves = /**
     * @return {?}
     */
    function () {
        // logic to find presence of conf boundaries, line types and extend Proj checkbox
        /** @type {?} */
        var states = ['App', 'Bas', 'Act', 'Adj', 'CurPr', 'UpdPr', 'FroPr', 'CBApp', 'CBBas', 'CBCurPr', 'CBAdj', 'EP', 'Ext'];
        for (var index = 0; index < states.length; index++) {
            for (var key in this.presentCurves) {
                if (key.indexOf(states[index]) > -1) {
                    this.presentCurves[states[index]] = true;
                    break;
                }
            }
        }
        this.presentCurves['Tar'] = true;
        this.presentCurves['Mil'] = true;
        this.presentCurves['today'] = true;
        this.presentCurves['aheadBehind'] = true;
    };
    CTOSPlanChartLegendComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-plan-chart-legend',
                    template: "<div id='legendHolder' class='legendholder'>\r\n    <button class='xpand' (click)='xpandAllLegend()'>{{!isExpand ? 'Expand Legend' : 'Collapse Legend'}}</button>\r\n    <!--ctos-so-plan-chart-legend-item (changeSelection)=\"changePref($event)\" *ngFor='let item of groups' [placeholder]='item.name' [data]='item.value' [id]=\"item.id\" [control]=\"legend\" [parentSubject]=\"parentSubject\"></ctos-so-plan-chart-legend-item-->\r\n    <ctos-so-custom-multiselect [ExpandCollapse]=\"ExpandCollapse\" [data]=\"groups\" (changeSelection)=\"changePref($event)\" [color]=\"color\" [trigger]='TriggerChange'\r\n        (LegendState)=\"OnLegendState($event)\"></ctos-so-custom-multiselect>\r\n</div>",
                    // styleUrls: ['./ctos-plan-chart-legend.component.scss'],
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None
                }] }
    ];
    /** @nocollapse */
    CTOSPlanChartLegendComponent.ctorParameters = function () { return [
        { type: CTOSPlanChartLegendService }
    ]; };
    CTOSPlanChartLegendComponent.propDecorators = {
        chartData: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        groups: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        profile: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        preference: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
    };
    return CTOSPlanChartLegendComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/pipes/ctos-date-custom-pipe.pipe.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 *  The following pipe checks if the element received is a number or a string.
 * @param value matches [^[0-9]{4}-[0-1][0-9]-[0-3][0-9]] then is applies angular pipe and returns the value
 * else if \@param value is a number it returns the value as it is.
 */
var DateCustomPipe = /** @class */ (function () {
    function DateCustomPipe() {
    }
    /**
     * @param {?} value
     * @return {?}
     */
    DateCustomPipe.prototype.transform = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        if (!value) {
            return value;
        }
        if (!isNaN(value)) {
            return value;
        }
        /** @type {?} */
        var result = value.match('^[0-9]{4}-[0-1][0-9]-[0-3][0-9]');
        if (result) {
            /** @type {?} */
            var pipe = new _angular_common__WEBPACK_IMPORTED_MODULE_0__["DatePipe"]('en-US');
            return pipe.transform(value, 'dd-MMM-yyyy');
        }
        else {
            return value;
        }
    };
    DateCustomPipe.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Pipe"], args: [{ name: 'ctosDateCustomPipe' },] }
    ];
    return DateCustomPipe;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ctos-plan-chart-legend/ctos-plan-chart-legend-item.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CTOSPlanChartLegendItemComponent = /** @class */ (function () {
    function CTOSPlanChartLegendItemComponent() {
        this.changeSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.disableRipple = true;
        this.selected = [];
    }
    /**
     * @return {?}
     */
    CTOSPlanChartLegendItemComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.parentSubject.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // called when the notifyChildren method is
            // called in the parent component
            console.log('In subscribe function -> ' + event);
            if (event) {
                document.getElementById('legendHolder').style.height = '300px';
                _this.mySelect.open(CTOSPlanChartLegendItemComponent, { panelClass: 'myapp-no-padding-dialog' });
            }
            else {
                document.getElementById('legendHolder').style.height = '40px';
                _this.mySelect.close();
            }
        }));
        /*this.selected = [];
        this.data.forEach(item => {
            if (item.checked) {
                this.selected.push(item.value);
            }
        });*/
        // this.changeSelection.emit({ 'id': this.id, 'selection': this.selected});
        this.selectAllStateSet();
    };
    /**
     * @return {?}
     */
    CTOSPlanChartLegendItemComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // needed if child gets re-created (eg on some model changes)
        // note that subsequent subscriptions on the same subject will fail
        // so the parent has to re-create parentSubject on changes
        this.parentSubject.unsubscribe();
    };
    /**
     * @return {?}
     */
    CTOSPlanChartLegendItemComponent.prototype.ngOnChanges = /**
     * @return {?}
     */
    function () {
        // this.mySelect.value = this.selected;
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CTOSPlanChartLegendItemComponent.prototype.onChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        this.selected = [];
        this.data.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            // item.selected = (!item.disabled && $event.checked ? true : false);
            if ($event.checked && !item.disabled) {
                _this.selected.push(item.value);
                item.checked = true;
            }
            else {
                item.checked = false;
            }
        }));
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CTOSPlanChartLegendItemComponent.prototype.onSelectionChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        this.data.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if ($event.value.indexOf(item.value) > -1) {
                item.checked = true;
            }
            else {
                item.checked = false;
            }
        }));
        // this.selectAllStateSet();
        this.changeSelection.emit({
            'id': this.id,
            'selection': $event.value
        });
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CTOSPlanChartLegendItemComponent.prototype.openDropdown = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        /*console.log('In open dropdown');
        */
    };
    /**
     * @private
     * @return {?}
     */
    CTOSPlanChartLegendItemComponent.prototype.selectAllStateSet = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var totCount = this.data.length;
        /** @type {?} */
        var selectedCount = 0;
        this.selected = [];
        this.data.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            if (item.disabled) {
                totCount = totCount - 1;
            }
            else if (item.checked) {
                selectedCount = selectedCount + 1;
                _this.selected.push(item.value);
            }
        }));
        if (totCount > 0 && totCount === selectedCount) {
            this.indeterminate = false;
            this.checked = true;
        }
        else if (totCount > 0 && selectedCount > 0 && totCount > selectedCount) {
            this.indeterminate = true;
            this.checked = false;
        }
        else {
            this.indeterminate = false;
            this.checked = false;
        }
    };
    CTOSPlanChartLegendItemComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-plan-chart-legend-item',
                    template: "<span>\r\n    <mat-checkbox [id]='placeholder' (ngModelChange)='onChange($event)' [(ngModel)]=\"checked\"\r\n    [(indeterminate)]=\"indeterminate\" [disableRipple]='disableRipple' [formControl]=\"control\"></mat-checkbox>\r\n    {{checked}}\r\n    {{indeterminate}}\r\n    <mat-form-field class=\"legendItems\">\r\n        <mat-select #legendItem [placeholder]=\"placeholder\" [(value)]=\"selected\" [formControl]=\"control\" multiple (selectionChange)='onSelectionChange($event)'\r\n        (openedChange)=\"openDropdown($event)\" [panelClass]='panelClass'>\r\n            <mat-option *ngFor=\"let item of data\" [value]=\"item.value\" [disabled]='item.disabled'>{{item.checked}}</mat-option>\r\n        </mat-select>\r\n    </mat-form-field>\r\n</span>",
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None,
                    styles: [".legendItems{padding:2px 7px}.myapp-no-padding-dialog{padding:0}"]
                }] }
    ];
    CTOSPlanChartLegendItemComponent.propDecorators = {
        placeholder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        data: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        control: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        id: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        changeSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
        selectionChange: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
        parentSubject: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        mySelect: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: ['legendItem', { static: true },] }],
        myCheck: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: ['c', { static: true },] }]
    };
    return CTOSPlanChartLegendItemComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/gojs-canvas/gojs-canvas.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GojsCanvasComponent = /** @class */ (function () {
    //  @Input() set cohortNode(cohortNodes: any) {
    //     this.cohortListArray = cohortNodes;
    //     this.refreshCanvas(this.cohortListArray);
    //   }
    function GojsCanvasComponent() {
        var _this = this;
        this.diagram = new gojs__WEBPACK_IMPORTED_MODULE_20__["Diagram"]();
        this.myModel = new gojs__WEBPACK_IMPORTED_MODULE_20__["Model"]();
        this.modelChanged = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.nodeSelected = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        // Place GoJS license key here:
        // (go as any).licenseKey = '4300138342';
        /* tslint:disable */
        ((/** @type {?} */ (gojs__WEBPACK_IMPORTED_MODULE_20__["Diagram"]))).licenseKey = '73f041e4b21c28c702d95d76423d6cbc5cf07f21de824aa3595016a7b85f6a122b99e17102d6dfd2c2fc1dac1d7d978a8a953c2bc24c5533e236d1d417e7d4fbe73726b5110b13dda70773949bf92ba7fb7077fa91b025f28e7c8ce0fbae96cc5ae8a18449d81eb828780e2e5f61af42';
        /* tslint:disable */
        this.goJsObj = gojs__WEBPACK_IMPORTED_MODULE_20__["GraphObject"].make;
        this.diagram = new gojs__WEBPACK_IMPORTED_MODULE_20__["Diagram"]();
        this.diagram.initialContentAlignment = gojs__WEBPACK_IMPORTED_MODULE_20__["Spot"].LeftCenter;
        // this.diagram.allowDrop = true;
        // new go.Binding('location', 'loc', go.Point.parse).makeTwoWay(go.Point.stringify),
        this.diagram.allowCopy = false;
        this.diagram.allowMove = true;
        this.diagram.defaultCursor = 'default';
        this.diagram.undoManager.isEnabled = true;
        this.diagram.animationManager.isEnabled = false;
        this.diagram.animationManager.stopAnimation();
        this.diagram.addDiagramListener('ChangedSelection', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var node = e.diagram.selection.first();
            // e.diagram.select(e.diagram.findNodeForData(e.diagram.model.nodeDataArray[0]));
            _this.nodeSelected.emit(node instanceof gojs__WEBPACK_IMPORTED_MODULE_20__["Node"] ? node : null);
        }));
        this.diagram.addModelChangedListener((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.isTransactionFinished
            && _this.modelChanged.emit(e); })); // && this.diagram.select(this.diagram.findNodeForData(this.diagram.model.nodeDataArray[0]))
        // this.diagram.addDiagramListener('InitialLayoutCompleted', function(e) {
        //   this.modelChanged.emit();
        //   // pick a random node data
        //   // find the corresponding Node
        //   const node = e.diagram.selection.first();
        //   // and center it and select it
        //   this.diagram.select(node);
        // });
    }
    Object.defineProperty(GojsCanvasComponent.prototype, "model", {
        set: /**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            this.diagram.model = val;
            this.nodeList = val.nodeDataArray;
            this.dataIndex = 0;
            if (this.selectedNode && Object.keys(this.selectedNode).length > 0 && this.nodeList) {
                for (var i = 0; i < this.nodeList.length; i++) {
                    if (this.selectedNode.category === 'cohort' && this.nodeList[i].cohortKey === this.selectedNode.key) {
                        this.dataIndex = i;
                    }
                    if (this.selectedNode.category === 'dependency' && this.nodeList[i].dependencyKey === this.selectedNode.key) {
                        this.dataIndex = i;
                    }
                }
            }
            this.diagram.select(this.diagram.findNodeForData(val.nodeDataArray[this.dataIndex]));
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GojsCanvasComponent.prototype, "isApprovedPlan", {
        set: /**
         * @param {?} flag
         * @return {?}
         */
        function (flag) {
            this.diagram.isReadOnly = flag;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    GojsCanvasComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /* tslint:disable */
        // (go as any).licenseKey = '73f041e4b21c28c702d95d76423d6cbc5cf07f21de824aa3595016a7b85f6a122b99e17102d6dfd2c2fc1dac1d7d978a8a953c2bc24c5533e236d1d417e7d4fbe73726b5110b13dda70773949bf92ba7fb7077fa91b025f28e7c8ce0fbae96cc5ae8a18449d81eb828780e2e5f61af42';
        /* tslint:disable */
        this.diagram.div = this.diagramRef.nativeElement;
        this.diagram.linkTemplate = this.goJsObj(gojs__WEBPACK_IMPORTED_MODULE_20__["Link"], { relinkableFrom: false, relinkableTo: false }, this.goJsObj(gojs__WEBPACK_IMPORTED_MODULE_20__["Shape"], { strokeWidth: .5 }, new gojs__WEBPACK_IMPORTED_MODULE_20__["Binding"]('stroke', 'fromNode', (/**
         * @param {?} n
         * @return {?}
         */
        function (n) { return n.data.category; }))
            .ofObject()), 
        /*   this.goJsObj(go.Shape,
             { toArrow: 'OpenTriangle', fill: '#fefefe' }),*/
        new gojs__WEBPACK_IMPORTED_MODULE_20__["Binding"]('deletable', 'isEditable'));
        /**
         * @param {?} fromnode
         * @param {?} fromport
         * @param {?} tonode
         * @param {?} toport
         * @return {?}
         */
        function sameCategory(fromnode, fromport, tonode, toport) {
            return fromnode.data.category !== tonode.data.category;
        }
        this.diagram.toolManager.linkingTool.linkValidation = sameCategory;
        // this.diagram.toolManager.relinkingTool.linkValidation = sameCategory;
        /** @type {?} */
        var cohortMap = this.goJsObj(gojs__WEBPACK_IMPORTED_MODULE_20__["Node"], 'Auto', 
        // new go.Binding('location', 'loc', go.Point.parse),
        //  { locationSpot: go.Spot.Center },
        new gojs__WEBPACK_IMPORTED_MODULE_20__["Binding"]('location', 'loc', gojs__WEBPACK_IMPORTED_MODULE_20__["Point"].parse).makeTwoWay(gojs__WEBPACK_IMPORTED_MODULE_20__["Point"].stringify), this.goJsObj(gojs__WEBPACK_IMPORTED_MODULE_20__["Shape"], 'RoundedRectangle', {
            stroke: 'gray', strokeWidth: .5, width: 180,
            fill: '#fefefe',
            // the default fill, if there is no data-binding
            portId: '', cursor: 'pointer',
            // the Shape is the port, not the whole Node
            // allow all kinds of links from and to this port
            fromLinkable: true, fromLinkableSelfNode: false, fromLinkableDuplicates: false,
            toLinkable: true, toLinkableSelfNode: false, toLinkableDuplicates: false,
            fromSpot: gojs__WEBPACK_IMPORTED_MODULE_20__["Spot"].RightSide,
            // coming out from right side
            toSpot: gojs__WEBPACK_IMPORTED_MODULE_20__["Spot"].LeftSide
        }, new gojs__WEBPACK_IMPORTED_MODULE_20__["Binding"]('fill', 'color')), this.goJsObj(gojs__WEBPACK_IMPORTED_MODULE_20__["TextBlock"], {
            width: 140,
            font: 'bold 12px sans-serif',
            stroke: '#111',
            margin: 5,
            isMultiline: false,
            // don't allow newlines in text
            editable: false,
            // allow in-place editing by user
            textAlign: 'left',
            cursor: 'grab',
            verticalAlignment: gojs__WEBPACK_IMPORTED_MODULE_20__["Spot"].Center,
            text: 'textAlign: "left"'
        }, new gojs__WEBPACK_IMPORTED_MODULE_20__["Binding"]('text', 'cohortName').makeTwoWay()), new gojs__WEBPACK_IMPORTED_MODULE_20__["Binding"]('deletable', 'isEditable'), this.goJsObj(gojs__WEBPACK_IMPORTED_MODULE_20__["Picture"], {
            width: 22, height: 22, source: './assets/images/enrollmentPause.svg',
            alignment: new gojs__WEBPACK_IMPORTED_MODULE_20__["Spot"](1, 0, -17, 1), opacity: 0.0
        }, new gojs__WEBPACK_IMPORTED_MODULE_20__["Binding"]('opacity', 'isIAPresent', (/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return v ? 1.0 : 0.0; }))));
        /** @type {?} */
        var dependencyMap = this.goJsObj(gojs__WEBPACK_IMPORTED_MODULE_20__["Node"], 'Auto', 
        // { locationSpot: go.Spot.Center },
        new gojs__WEBPACK_IMPORTED_MODULE_20__["Binding"]('location', 'loc', gojs__WEBPACK_IMPORTED_MODULE_20__["Point"].parse).makeTwoWay(gojs__WEBPACK_IMPORTED_MODULE_20__["Point"].stringify), this.goJsObj(gojs__WEBPACK_IMPORTED_MODULE_20__["Picture"], { width: 40, height: 40, source: './assets/images/dependency.png' }, {
            cursor: 'pointer', portId: '',
            fromLinkable: true, fromLinkableSelfNode: false, fromLinkableDuplicates: false,
            toLinkable: true, toLinkableSelfNode: false, toLinkableDuplicates: false
        }), this.goJsObj(gojs__WEBPACK_IMPORTED_MODULE_20__["TextBlock"], {
            font: 'bold 11px sans-serif',
            stroke: '#111',
            margin: 2,
            isMultiline: false,
            // don't allow newlines in text
            editable: false,
            // allow in-place editing by user
            textAlign: 'left'
        }, new gojs__WEBPACK_IMPORTED_MODULE_20__["Binding"]('text', 'dependencyName')), new gojs__WEBPACK_IMPORTED_MODULE_20__["Binding"]('deletable', 'isEditable'));
        /** @type {?} */
        var templmap = new gojs__WEBPACK_IMPORTED_MODULE_20__["Map"]();
        templmap.add('cohort', cohortMap);
        templmap.add('dependency', dependencyMap);
        this.diagram.nodeTemplateMap = templmap;
        this.diagram.validCycle = gojs__WEBPACK_IMPORTED_MODULE_20__["Diagram"].CycleNotDirected;
        // this.diagram.isReadOnly = true;
        //  this.myModel.nodeDataArray = this.cohortListArray;
        // this.diagram.model = this.myModel;
    };
    GojsCanvasComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-gojs-canvas',
                    template: "\r\n<div #diagramDiv class=\"diagramDiv\"></div>"
                }] }
    ];
    /** @nocollapse */
    GojsCanvasComponent.ctorParameters = function () { return []; };
    GojsCanvasComponent.propDecorators = {
        diagramRef: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: ['diagramDiv', { static: true },] }],
        selectedNode: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        model: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        modelChanged: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
        nodeSelected: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
        isApprovedPlan: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
    };
    return GojsCanvasComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ctos-plan-chart-legend/ctos-so-custom-multiselect.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CTOSCustomMultiSelectComponent = /** @class */ (function () {
    function CTOSCustomMultiSelectComponent(lgdServ) {
        this.lgdServ = lgdServ;
        this.changeSelection = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.LegendState = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.legendColor = {};
        this.isExpanded = false;
        this.multimode = [];
    }
    /**
     * @return {?}
     */
    CTOSCustomMultiSelectComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        console.log('In custom legend - ngOnInit');
        this.ExpandCollapse.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            _this.isExpanded = !_this.isExpanded;
            if (_this.isExpanded) {
                document.getElementById('legendHolder').style.height = '300px';
                _this.openCloseDropdowns(document.getElementsByClassName('dropdown-content'), 'open');
            }
            else {
                document.getElementById('legendHolder').style.height = '40px';
                _this.openCloseDropdowns(document.getElementsByClassName('dropdown-content'), 'remove');
            }
            _this.LegendState.emit(_this.isExpanded);
        }));
        this.trigger.subscribe((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            // this.data = event;
            _this.ngOnChanges(null);
        }));
        if (this.color) {
            this.color.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                _this.legendColor[element.name] = element.value;
            }));
            this.legendColor['UpdPrSI'] = '#E44686';
            this.legendColor['UpdPrSR'] = '#BFD8FF';
            this.legendColor['UpdPrSS'] = '#FFAC38';
        }
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CTOSCustomMultiSelectComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        this.selectedCurves = [];
        this.collectMultiModalProps();
        this.updateStateOfAcrossTypes();
        this.selectAllStatusCheck();
        this.changeSelection.emit(this.selectedCurves);
    };
    /**
     * @param {?} list
     * @param {?} action
     * @return {?}
     */
    CTOSCustomMultiSelectComponent.prototype.openCloseDropdowns = /**
     * @param {?} list
     * @param {?} action
     * @return {?}
     */
    function (list, action) {
        if (action === 'open') {
            for (var i = 0; i < list.length; i++) {
                list[i].classList.add('show');
            }
        }
        else {
            for (var i = 0; i < list.length; i++) {
                list[i].classList.remove('show');
            }
        }
    };
    /**
     * @return {?}
     */
    CTOSCustomMultiSelectComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.ExpandCollapse.unsubscribe();
        this.trigger.unsubscribe();
    };
    /**
     * @param {?} id
     * @return {?}
     */
    CTOSCustomMultiSelectComponent.prototype.openDropDown = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        document.getElementById(id).classList.toggle('show');
        if (document.getElementsByClassName('dropdown-content show').length === 0) {
            document.getElementById('legendHolder').style.height = '40px';
            this.isExpanded = false;
            this.LegendState.emit(this.isExpanded);
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    CTOSCustomMultiSelectComponent.prototype.onCheckboxChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if (this.multimode.indexOf($event.target.value) > -1) {
            this.setStateOfAcrossTypes($event.target.value, $event.target.checked);
        }
        else {
            /** @type {?} */
            var index = this.lgdServ.selectedCurves.indexOf($event.target.value);
            if (this.lgdServ.selectedCurves && index > -1) {
                this.lgdServ.selectedCurves.splice(index, 1);
            }
            else {
                this.lgdServ.selectedCurves.push($event.target.value);
            }
        }
        // to ensure line types shows correct status
        this.updateStateOfAcrossTypes();
        this.selectAllStatusCheck();
        this.changeSelection.emit(this.selectedCurves);
    };
    // re-write due to preference save
    // re-write due to preference save
    /**
     * @param {?} $event
     * @return {?}
     */
    CTOSCustomMultiSelectComponent.prototype.onSelectAllChange = 
    // re-write due to preference save
    /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        var _this = this;
        /** @type {?} */
        var id = $event.srcElement.value;
        for (var i = 0; i < this.data.length; i++) {
            if (id === this.data[i].id && !this.data[i].hasOwnProperty('multimode')) {
                /** @type {?} */
                var listItems = this.data[i];
                listItems.value.forEach((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) {
                    if (!item.disabled) {
                        item.checked = $event.srcElement.checked;
                        /** @type {?} */
                        var idx = _this.lgdServ.selectedCurves.indexOf(item.value);
                        if ($event.srcElement.checked && idx === -1) {
                            _this.lgdServ.selectedCurves.push(item.value);
                        }
                        else if (!$event.srcElement.checked && idx > -1) {
                            _this.lgdServ.selectedCurves.splice(idx, 1);
                        }
                    }
                    // modify the selected Curves
                    if (item.checked && _this.selectedCurves.indexOf(item.value) < 0) {
                        _this.selectedCurves.push(item.value);
                    }
                    else if (!item.checked && _this.selectedCurves.indexOf(item.value) > -1) {
                        _this.selectedCurves.splice(_this.selectedCurves.indexOf(item.value), 1);
                    }
                }));
                break;
            }
            else if (id === this.data[i].id && this.data[i].hasOwnProperty('multimode')) { // lines select all check box clicked
                this.selectedCurves = [];
                // loop til line types, hence index 4/i
                for (var j = 0; j < 4; j++) {
                    /** @type {?} */
                    var listItems = this.data[j].value;
                    this.data[j].checked = $event.srcElement.checked;
                    for (var k = 0; k < listItems.length; k++) {
                        if (!listItems[k].disabled) {
                            listItems[k].checked = $event.srcElement.checked;
                            /** @type {?} */
                            var idx = this.lgdServ.selectedCurves.indexOf(listItems[k].value);
                            if ($event.srcElement.checked && idx === -1) {
                                this.lgdServ.selectedCurves.push(listItems[k].value);
                            }
                            else if (!$event.srcElement.checked && idx > -1) {
                                this.lgdServ.selectedCurves.splice(idx, 1);
                            }
                        }
                        // to main selected curves
                        if ($event.srcElement.checked && !this.data[j].hasOwnProperty('multimode')) {
                            this.selectedCurves.push(listItems[k].value);
                        }
                    }
                }
                break;
            }
        }
        // to ensure line types shows correct status
        this.updateStateOfAcrossTypes();
        this.selectAllStatusCheck();
        this.changeSelection.emit(this.selectedCurves);
    };
    /**
     * @return {?}
     */
    CTOSCustomMultiSelectComponent.prototype.selectAllStatusCheck = /**
     * @return {?}
     */
    function () {
        this.selectedCurves = [];
        for (var i = 0; i < this.data.length; i++) {
            /** @type {?} */
            var listItems = this.data[i].value;
            this.data[i].checked = true;
            for (var j = 0; j < listItems.length; j++) {
                if (!listItems[j].disabled && !listItems[j].checked) {
                    this.data[i].checked = false;
                }
                else if (listItems[j].checked && !listItems[j].multimode) {
                    this.selectedCurves.push(listItems[j].value);
                }
            }
        }
    };
    /**
     * @return {?}
     */
    CTOSCustomMultiSelectComponent.prototype.collectMultiModalProps = /**
     * @return {?}
     */
    function () {
        this.multimode = [];
        for (var i = 0; i < this.data.length; i++) {
            if (this.data[i].hasOwnProperty('multimode')) {
                /** @type {?} */
                var listItems = this.data[i].value;
                for (var j = 0; j < listItems.length; j++) {
                    this.multimode.push(listItems[j].value);
                }
            }
        }
    };
    /**
     * @param {?} code
     * @param {?} state
     * @return {?}
     */
    CTOSCustomMultiSelectComponent.prototype.setStateOfAcrossTypes = /**
     * @param {?} code
     * @param {?} state
     * @return {?}
     */
    function (code, state) {
        // object iteration til 4 types
        for (var i = 0; i < 4; i++) {
            /** @type {?} */
            var listItems = this.data[i].value;
            for (var j = 0; j < listItems.length; j++) {
                /** @type {?} */
                var idx = listItems[j].value.indexOf(code);
                if (!listItems[j].disabled && idx > -1) {
                    listItems[j].checked = state;
                    /** @type {?} */
                    var prefId = this.lgdServ.selectedCurves.indexOf(listItems[j].value);
                    if (state && idx > -1) {
                        this.selectedCurves.push(listItems[j].value);
                        if (prefId === -1) {
                            this.lgdServ.selectedCurves.push(listItems[j].value);
                        }
                    }
                    else if (!state && idx > -1) {
                        /** @type {?} */
                        var _idx = this.selectedCurves.indexOf(listItems[j].value);
                        if (_idx > -1) {
                            this.selectedCurves.splice(_idx, 1);
                        } // for chart data
                        if (prefId > -1) {
                            this.lgdServ.selectedCurves.splice(prefId, 1);
                        } // for preference
                    }
                }
            }
        }
    };
    /**
     * @return {?}
     */
    CTOSCustomMultiSelectComponent.prototype.updateStateOfAcrossTypes = /**
     * @return {?}
     */
    function () {
        // object iteration til 4 types
        /** @type {?} */
        var masterList = 4;
        /** @type {?} */
        var listItems = this.data[masterList].value;
        for (var type = 0; type < listItems.length; type++) {
            if (!listItems[type].disabled) {
                for (var across = 0; across < masterList; across++) {
                    /** @type {?} */
                    var acrossList = this.data[across].value;
                    for (var inside = 0; inside < acrossList.length; inside++) {
                        if (acrossList[inside].value.indexOf(listItems[type].value) > -1 && !acrossList[inside].disabled) {
                            listItems[type].checked = acrossList[inside].checked;
                            if (listItems[type].checked && this.selectedCurves && this.selectedCurves.indexOf(listItems[type].value) < 0) {
                                this.selectedCurves.push(listItems[type].value);
                            }
                            break;
                        }
                    }
                    if (!listItems[type].checked) {
                        break;
                    }
                }
            }
        }
    };
    CTOSCustomMultiSelectComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-custom-multiselect',
                    template: "<div class=\"dropdown\" *ngFor=\"let item of data\" >\r\n        <span>\r\n                <!--Checkbox for select all-->\r\n                <label class=\"container\">\r\n                        <input type=\"checkbox\" [(ngModel)]=\"item.checked\" [attr.checked]=\"item.checked? 'true':null\" \r\n                                value=\"{{item.id}}\" (change)=\"onSelectAllChange($event)\">\r\n                        <span [attr.class]=\"legendColor[item.id]? 'checkmarkParent' : 'defaultcheckmarkParent'\" [style.border]=\"legendColor[item.id]? '2px solid ' + legendColor[item.id] : '1px solid #ccc'\" [style.background-color]=\"item.checked? legendColor[item.id] : null\"></span>\r\n                </label>\r\n\r\n                <!--Below is the dropdown-->\r\n                <button (click)=\"openDropDown(item.id)\" class=\"dropbtn\">{{item.name}}</button>\r\n                <div id=\"{{item.id}}\" class=\"dropdown-content\" >\r\n                <label class=\"container\" *ngFor=\"let element of item.value\" [attr.class]=\"element.disabled ? 'container disabled':'container'\">{{element.name}}\r\n                        <input type=\"checkbox\" [(ngModel)]=\"element.checked\" [attr.checked]=\"element.checked && !element.disabled? 'true':null\" \r\n                                [attr.disabled]=\"element.disabled ? 'true':null\" value=\"{{element.value}}\" (change)=\"onCheckboxChange($event)\">\r\n                        <span [attr.class]=\"legendColor[element.value]? 'checkmark' : 'defaultcheckmark'\" [style.border]=\"legendColor[element.value]? '2px solid ' + legendColor[element.value] : '1px solid #ccc'\" [style.background-color]=\"element.checked && legendColor[element.value]? legendColor[element.value] : '#fff'\"></span>\r\n                </label>\r\n                </div>\r\n        </span>\r\n</div>",
                    styles: [".container{display:block;position:relative;padding-left:35px;line-height:2;cursor:pointer;font-size:12px;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:100%}.container input{position:absolute;opacity:0;cursor:pointer;height:0;width:0}.checkmarkParent,.defaultcheckmarkParent{position:absolute;top:10px;left:-18px;height:15px;width:15px}.checkmark,.defaultcheckmark{position:absolute;top:5px;left:3px;height:15px;width:15px}.checkmark:after,.checkmarkParent:after,.defaultcheckmark:after,.defaultcheckmarkParent:after{content:\"\";position:absolute;display:none}.container input:checked~.checkmark:after,.container input:checked~.checkmarkParent:after,.container input:checked~.defaultcheckmark:after,.container input:checked~.defaultcheckmarkParent:after{display:block}.container .checkmark:after,.container .checkmarkParent:after{left:4px;top:0;width:5px;height:10px;border:solid #fff;border-width:0 1.5px 1.5px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.container .defaultcheckmark:after,.container .defaultcheckmarkParent:after{left:5px;top:0;width:5px;height:10px;border:solid #7faff8;border-width:0 1.5px 1.5px 0;-webkit-transform:rotate(45deg);transform:rotate(45deg)}.dropbtn{background-color:#fff;color:#595959;font:10pt apollo;padding:6px;text-align:left;outline:0;border:.5px solid #d3d3d3;cursor:pointer;width:100%;margin:2px}.dropdown{position:relative;display:inline-block;margin:0 20px;-webkit-box-flex:1;flex:1}.dropdown-content{display:none;position:absolute;background-color:#fff;min-width:160px;box-shadow:0 8px 16px 0 rgba(0,0,0,.2);z-index:3}.dropdown-content label{color:#000;text-decoration:none}.dropdown-content label.disabled{color:#ccc;text-decoration:none;background-color:#fff}.dropdown-content label:hover{background-color:#ddd}.show{display:block}"]
                }] }
    ];
    /** @nocollapse */
    CTOSCustomMultiSelectComponent.ctorParameters = function () { return [
        { type: CTOSPlanChartLegendService }
    ]; };
    CTOSCustomMultiSelectComponent.propDecorators = {
        ExpandCollapse: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        trigger: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        data: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        color: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        changeSelection: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
        LegendState: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }]
    };
    return CTOSCustomMultiSelectComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ctos-plan-chart/extended/extended-ngx-tooltip-area.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*@Component({
 selector: 'app-extended-ngx-tooltip-area',
 template: `
   <p>
     extended-ngx-tooltip-area works!
   </p>
 `,
 styles: []
})*/
/** @type {?} */
var moment$5 = moment__WEBPACK_IMPORTED_MODULE_13__;
var ExtendedNgxTooltipAreaComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__extends"])(ExtendedNgxTooltipAreaComponent, _super);
    function ExtendedNgxTooltipAreaComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.lastAnchorPoss = [];
        _this.dateFormat = 'DD MMM YYYY';
        _this.anchorPosIndex = -1;
        _this.anchors = {};
        _this.maxTooltipLength = 0;
        _this.getToolTipTextDate = '';
        return _this;
    }
    /**
     * @return {?}
     */
    ExtendedNgxTooltipAreaComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.anchors = {};
        this.anchorPosIndex = -1;
    };
    /**
     * @return {?}
     */
    ExtendedNgxTooltipAreaComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.anchors = null;
        this.anchorPosIndex = -1;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    ExtendedNgxTooltipAreaComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes && changes.sizeChanged && changes.sizeChanged.currentValue !== changes.sizeChanged.previousValue) {
            this.onResize(null);
        }
        else if (changes && changes.dataChanged && changes.dataChanged.currentValue !== changes.dataChanged.previousValue) {
            this.anchors = {};
            this.anchorPosIndex = -1;
            // remove existing pinned obj
            Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolder.nativeElement).selectAll('*').remove();
        }
    };
    /**
     * @return {?}
     */
    ExtendedNgxTooltipAreaComponent.prototype.hideTooltip = /**
     * @return {?}
     */
    function () {
        if (this.tooltipAnchor) {
            _super.prototype.hideTooltip.call(this);
        }
    };
    /**
     * @return {?}
     */
    ExtendedNgxTooltipAreaComponent.prototype.pinTooltip = /**
     * @return {?}
     */
    function () {
        var _this = this;
        console.log('ExtendedNgxTooltipAreaComponent -> pinTooltip');
        if (this.lastAnchorPoss.indexOf(this.anchorPosIndex) < 0 && this.anchorValues.length > 0) {
            this.anchors[this.anchorPosIndex] = this.anchorValues;
            this.maxTooltipLength = 0;
            this.anchorValues.forEach((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                if (_this.maxTooltipLength < item.series.length) {
                    _this.maxTooltipLength = item.series.length;
                }
            }));
            this.createAnchor(this.anchorPosIndex);
            this.lastAnchorPoss.push(this.anchorPosIndex);
            console.log(this.anchorValues);
        }
    };
    /**
     * @param {?} x
     * @return {?}
     */
    ExtendedNgxTooltipAreaComponent.prototype.createAnchor = /**
     * @param {?} x
     * @return {?}
     */
    function (x) {
        /** @type {?} */
        var closestPoint = this.xSet[x];
        /** @type {?} */
        var anchorPos = this.xScale(closestPoint);
        anchorPos = Math.max(0, anchorPos);
        anchorPos = Math.min(this.dims.width, anchorPos);
        /** @type {?} */
        var _that = this;
        // black hairline dragger
        Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolder.nativeElement).append('rect').on('click', (/**
         * @return {?}
         */
        function () { _that.onRemove(this, _that); }))
            .attr('x', anchorPos).attr('class', 'a' + x)
            .attr('width', '2').attr('height', this.dims.height);
        // black tooltip rectangle
        Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolder.nativeElement).append('rect').on('click', (/**
         * @return {?}
         */
        function () { _that.onRemove(this, _that); }))
            .attr('fill', '#000')
            .attr('opacity', 0.7)
            .attr('x', anchorPos + 20).attr('y', this.dims.height / 2)
            .attr('rx', 3)
            .attr('ry', 3)
            .attr('class', 'a' + x)
            .attr('height', 15 * this.anchorValues.length + 15).attr('width', this.maxTooltipLength * 6.5 + 10);
        // color square
        Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolder.nativeElement).selectAll('a' + x)
            .data(this.anchorValues).enter()
            .append('rect').on('click', (/**
         * @return {?}
         */
        function () { _that.onRemove(this, _that); }))
            .attr('rx', 3)
            .attr('ry', 3)
            .attr('x', anchorPos + 23)
            .attr('y', (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        function (d, i) { return (_that.dims.height / 2 + 10 * i + 3 * (i + 1)); }))
            .attr('width', 10)
            .attr('height', 10)
            .style('fill', (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d['color']; }))
            .attr('class', 'a' + x);
        // text
        Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolder.nativeElement).selectAll('a' + x)
            .data(this.anchorValues).enter()
            .append('text').on('click', (/**
         * @return {?}
         */
        function () { _that.onRemove(this, _that); }))
            .text((/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        function (d, i) { return d['series'] + ' : ' + Math.abs(d['value']); }))
            .attr('x', anchorPos + 35).attr('y', (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        function (d, i) { return (_that.dims.height / 2 + 13 * i + 11); }))
            .attr('class', 'a' + x)
            .style('fill', '#fff').style('font-family', 'apollo');
        Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolder.nativeElement)
            .append('text').on('click', (/**
         * @return {?}
         */
        function () { _that.onRemove(this, _that); }))
            .attr('x', anchorPos + 35).attr('y', _that.dims.height / 2 + 13 * _that.anchorValues.length + 11).style('fill', '#fff')
            .attr('class', 'a' + x)
            .text(moment$5(this.anchorValues[0].name).format(this.dateFormat));
    };
    /**
     * @param {?} dis
     * @param {?} that
     * @return {?}
     */
    ExtendedNgxTooltipAreaComponent.prototype.onRemove = /**
     * @param {?} dis
     * @param {?} that
     * @return {?}
     */
    function (dis, that) {
        // dis.remove();
        /** @type {?} */
        var className = '';
        for (var i = 0; i < dis.classList.length; i++) {
            if (dis.classList[i].indexOf('a') > -1) {
                className = dis.classList[i];
                break;
            }
        }
        if (className.length > 1) { // presence of className
            Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolder.nativeElement).selectAll('.' + className).remove();
            for (var i = 0; i < that.lastAnchorPoss.length; i++) {
                if (className.indexOf(that.lastAnchorPoss[i]) > -1) {
                    if (this.anchors[this.lastAnchorPoss[i]]) {
                        delete this.anchors[this.lastAnchorPoss[i]];
                    }
                    this.lastAnchorPoss.splice(i, 1);
                    break;
                }
            }
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    ExtendedNgxTooltipAreaComponent.prototype.mouseMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var xPos = event.pageX - event.target.getBoundingClientRect().left;
        /** @type {?} */
        var closestIndex = this.findClosestPointIndex(xPos);
        this.anchorPosIndex = closestIndex;
        /** @type {?} */
        var closestPoint = this.xSet[closestIndex];
        this.anchorPos = this.xScale(closestPoint);
        this.anchorPos = Math.max(0, this.anchorPos);
        this.anchorPos = Math.min(this.dims.width, this.anchorPos);
        this.anchorValues = this.getValues(closestPoint);
        if (this.anchorPos !== this.lastAnchorPos && this.tooltipAnchor) {
            /** @type {?} */
            var ev = new MouseEvent('mouseleave', { bubbles: false });
            this.tooltipAnchor.nativeElement.dispatchEvent(ev);
            this.anchorOpacity = 0.7;
            this.hover.emit({
                value: closestPoint
            });
            this.showTooltip();
            this.lastAnchorPos = this.anchorPos;
        }
    };
    /**
     * @param {?} tooltipItem
     * @return {?}
     */
    ExtendedNgxTooltipAreaComponent.prototype.getToolTipText = /**
     * @param {?} tooltipItem
     * @return {?}
     */
    function (tooltipItem) {
        /** @type {?} */
        var result = '';
        if (tooltipItem.series !== undefined) {
            result += tooltipItem.series;
        }
        else {
            result += '???';
        }
        result += ': ';
        if (tooltipItem.value !== undefined) {
            result += (tooltipItem.value < 0 ? (tooltipItem.value * -1).toLocaleString() : tooltipItem.value.toLocaleString());
        }
        if (tooltipItem.min !== undefined || tooltipItem.max !== undefined) {
            result += ' (';
            if (tooltipItem.min !== undefined) {
                if (tooltipItem.max === undefined) {
                    result += '≥';
                }
                result += tooltipItem.min.toLocaleString();
                if (tooltipItem.max !== undefined) {
                    result += ' - ';
                }
            }
            else if (tooltipItem.max !== undefined) {
                result += '≤';
            }
            if (tooltipItem.max !== undefined) {
                result += tooltipItem.max.toLocaleString();
            }
            result += ')';
        }
        if (tooltipItem.name !== undefined) {
            this.getToolTipTextDate = moment$5(tooltipItem.name).format(this.dateFormat);
        }
        return result;
    };
    /**
     * @param {?} pinnedObjects
     * @return {?}
     */
    ExtendedNgxTooltipAreaComponent.prototype.retainAnchor = /**
     * @param {?} pinnedObjects
     * @return {?}
     */
    function (pinnedObjects) {
        var e_1, _a;
        /** @type {?} */
        var _that = this;
        try {
            for (var _b = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__values"])(Object.keys(pinnedObjects)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var prop1 = _c.value;
                /** @type {?} */
                var prop = Number(prop1);
                /** @type {?} */
                var closestPoint = this.xSet[prop];
                /** @type {?} */
                var propNum = this.xScale(closestPoint);
                propNum = Math.max(0, propNum);
                propNum = Math.min(this.dims.width, propNum);
                /** @type {?} */
                var val = pinnedObjects[prop];
                // black hairline dragger
                Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolder.nativeElement).append('rect').on('click', (/**
                 * @return {?}
                 */
                function () { _that.onRemove(this, _that); }))
                    .attr('x', propNum).attr('class', 'a' + prop)
                    .attr('width', '2').attr('height', this.dims.height);
                // black tooltip rectangle
                Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolder.nativeElement).append('rect').on('click', (/**
                 * @return {?}
                 */
                function () { _that.onRemove(this, _that); }))
                    .attr('fill', '#000')
                    .attr('opacity', 0.7)
                    .attr('x', propNum + 20).attr('y', this.dims.height / 2)
                    .attr('rx', 3)
                    .attr('ry', 3)
                    .attr('class', 'a' + prop)
                    .attr('height', 15 * val.length + 15).attr('width', this.maxTooltipLength * 6.5 + 10);
                // color square
                Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolder.nativeElement).selectAll('a' + prop)
                    .data(val).enter()
                    .append('rect').on('click', (/**
                 * @return {?}
                 */
                function () { _that.onRemove(this, _that); }))
                    .attr('rx', 3)
                    .attr('ry', 3)
                    .attr('x', propNum + 23)
                    .attr('y', (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (d, i) { return (_that.dims.height / 2 + 10 * i + 3 * (i + 1)); }))
                    .attr('width', 10)
                    .attr('height', 10)
                    .style('fill', (/**
                 * @param {?} d
                 * @return {?}
                 */
                function (d) { return d['color']; }))
                    .attr('class', 'a' + prop);
                // text
                Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolder.nativeElement).selectAll('a' + prop)
                    .data(val).enter()
                    .append('text').on('click', (/**
                 * @return {?}
                 */
                function () { _that.onRemove(this, _that); }))
                    .text((/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (d, i) { return d['series'] + ' : ' + Math.abs(d['value']); }))
                    .attr('x', propNum + 35).attr('y', (/**
                 * @param {?} d
                 * @param {?} i
                 * @return {?}
                 */
                function (d, i) { return (_that.dims.height / 2 + 13 * i + 11); }))
                    .attr('class', 'a' + prop)
                    .style('fill', '#fff').style('font-family', 'apollo');
                Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolder.nativeElement)
                    .append('text').on('click', (/**
                 * @return {?}
                 */
                function () { _that.onRemove(this, _that); }))
                    .attr('x', propNum + 35).attr('y', _that.dims.height / 2 + 13 * val.length + 11).style('fill', '#fff')
                    .attr('class', 'a' + prop)
                    .text(moment$5(val[0].name).format(this.dateFormat));
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    /**
     * @param {?} $event
     * @return {?}
     */
    ExtendedNgxTooltipAreaComponent.prototype.onResize = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolder.nativeElement).selectAll('*').remove();
        this.retainAnchor(this.anchors);
    };
    ExtendedNgxTooltipAreaComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    // tslint:disable-next-line
                    selector: 'g[app-extended-ngx-tooltip-area]',
                    template: "\n   <svg:g (window:resize)=\"onResize($event)\">\n     <svg:rect\n       class=\"tooltip-area\"\n       [attr.x]=\"0\"\n       y=\"0\"\n       [attr.width]=\"dims.width\"\n       [attr.height]=\"dims.height\"\n       style=\"opacity: 0; cursor: 'auto';\"\n       (mousemove)=\"mouseMove($event)\"\n       (mouseleave)=\"hideTooltip()\"\n       (click)=\"pinTooltip()\"\n     />\n     <xhtml:ng-template #defaultTooltipTemplate let-model=\"model\">\n       <xhtml:div class=\"area-tooltip-container\" *ngIf=\"model.length > 0\">\n         <xhtml:div\n           *ngFor=\"let tooltipItem of model\"\n           class=\"tooltip-item\">\n           <span\n             class=\"tooltip-item-color\"\n             [style.background-color]=\"tooltipItem.color\">\n           </span>\n           {{getToolTipText(tooltipItem)}}\n         </xhtml:div>\n         <span>{{getToolTipTextDate}}</span>\n       </xhtml:div>\n     </xhtml:ng-template>\n\n     <g #anchorHolder class='anchorHolder'>\n     </g>\n\n     <svg:rect\n       #tooltipAnchor\n       *ngIf = \"anchorValues.length > 0\"\n       [@animationState]=\"anchorOpacity !== 0 ? 'active' : 'inactive'\"\n       class=\"tooltip-anchor\"\n       [attr.x]=\"anchorPos\"\n       y=\"0\"\n       [attr.width]=\"1\"\n       [attr.height]=\"dims.height\"\n       [style.opacity]=\"anchorOpacity\"\n       [style.pointer-events]=\"'none'\"\n       ngx-tooltip\n       [tooltipDisabled]=\"tooltipDisabled\"\n       [tooltipPlacement]=\"'right'\"\n       [tooltipType]=\"'tooltip'\"\n       [tooltipSpacing]=\"15\"\n       [tooltipTemplate]=\"tooltipTemplate ? tooltipTemplate: defaultTooltipTemplate\"\n       [tooltipContext]=\"anchorValues\"\n       [tooltipImmediateExit]=\"true\"\n     />\n   </svg:g>\n ",
                    changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                    animations: [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["trigger"])('animationState', [
                            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["transition"])('inactive => active', [
                                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({
                                    opacity: 0,
                                }),
                                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["animate"])(250, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({ opacity: 0.7 }))
                            ]),
                            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["transition"])('active => inactive', [
                                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({
                                    opacity: 0.7,
                                }),
                                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["animate"])(250, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({ opacity: 0 }))
                            ])
                        ])
                    ]
                }] }
    ];
    ExtendedNgxTooltipAreaComponent.propDecorators = {
        sizeChanged: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        dataChanged: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        anchorHolder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: ['anchorHolder', { static: true },] }]
    };
    return ExtendedNgxTooltipAreaComponent;
}(_swimlane_ngx_charts__WEBPACK_IMPORTED_MODULE_18__["TooltipArea"]));
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ctos-plan-chart/extended/extended-circle-series.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$6 = moment__WEBPACK_IMPORTED_MODULE_13__;
var ExtendedCircleSeriesComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__extends"])(ExtendedCircleSeriesComponent, _super);
    function ExtendedCircleSeriesComponent() {
        var _this_1 = _super !== null && _super.apply(this, arguments) || this;
        _this_1.collectPins = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        _this_1.dateFormat = 'DD MMM YYYY';
        return _this_1;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ExtendedCircleSeriesComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        _super.prototype.ngOnChanges.call(this, changes);
        if (changes && changes.pinnedObject && changes.pinnedObject.currentValue !== changes.pinnedObject.previousValue) {
            // remove existing pinned obj
            Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolderO.nativeElement).selectAll('*').remove();
            this.onResize();
        }
    };
    /**
     * @param {?} circle
     * @return {?}
     */
    ExtendedCircleSeriesComponent.prototype.pinTooltip = /**
     * @param {?} circle
     * @return {?}
     */
    function (circle) {
        /** @type {?} */
        var maxLen = circle.seriesName.length + 4;
        /** @type {?} */
        var _that = this;
        _that.pinnedObject['c' + circle.value] = { cx: circle.cx,
            cy: circle.cy,
            seriesName: circle.seriesName,
            value: circle.value,
            label: circle.label,
            color: circle.color };
        // black tooltip rectangle
        Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolderO.nativeElement).append('rect').on('click', (/**
         * @return {?}
         */
        function () { _that.onRemove(this, _that); }))
            .attr('fill', '#000').attr('opacity', 0.7)
            .attr('rx', 3).attr('ry', 3)
            .attr('x', circle.cx - 40).attr('y', circle.cy - 50)
            .attr('class', 'c' + Math.abs(circle.value))
            .attr('height', 40).attr('width', maxLen * 6);
        Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolderO.nativeElement).append('circle').on('click', (/**
         * @return {?}
         */
        function () { _that.onRemove(this, _that); }))
            .attr('fill', circle.color)
            .attr('cx', circle.cx).attr('cy', circle.cy)
            .attr('class', 'c' + Math.abs(circle.value))
            .attr('r', 4);
        Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolderO.nativeElement).append('text').text(circle.seriesName + ' : ' + Math.abs(circle.value))
            .attr('x', circle.cx - 30).attr('y', circle.cy - 35).on('click', (/**
         * @return {?}
         */
        function () { _that.onRemove(this, _that); }))
            .attr('class', 'c' + Math.abs(circle.value))
            .style('fill', '#fff');
        Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolderO.nativeElement).append('text').text(moment$6(circle.label).format(this.dateFormat))
            .attr('x', circle.cx - 30).attr('y', circle.cy - 20).on('click', (/**
         * @return {?}
         */
        function () { _that.onRemove(this, _that); }))
            .attr('class', 'c' + Math.abs(circle.value))
            .style('fill', '#fff').style('font-family', 'apollo');
        this.collectPins.emit(_that.pinnedObject);
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    ExtendedCircleSeriesComponent.prototype.getTooltipText = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var label = _a.label, tooltipLabel = _a.tooltipLabel, value = _a.value, seriesName = _a.seriesName, min = _a.min, max = _a.max;
        return "\n        <span class=\"tooltip-label\">" + seriesName + " \u2022 " + moment$6(label).format(this.dateFormat) + "</span>\n        <span class=\"tooltip-val\">" + (value < 0 ? value * -1 : value).toLocaleString() + this.getTooltipMinMaxText(min, max) + "</span>\n      ";
    };
    /**
     * @param {?} dis
     * @param {?} that
     * @return {?}
     */
    ExtendedCircleSeriesComponent.prototype.onRemove = /**
     * @param {?} dis
     * @param {?} that
     * @return {?}
     */
    function (dis, that) {
        // dis.remove();
        /** @type {?} */
        var className = '';
        for (var i = 0; i < dis.classList.length; i++) {
            if (dis.classList[i].indexOf('c') > -1) {
                className = dis.classList[i];
                break;
            }
        }
        if (className.length > 1) { // presence of className
            Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolderO.nativeElement).selectAll('.' + className).remove();
            delete this.pinnedObject[className];
        }
    };
    /**
     * @return {?}
     */
    ExtendedCircleSeriesComponent.prototype.getActiveCircle = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var _this = this;
        /** @type {?} */
        var indexActiveDataPoint = this.data.series.findIndex((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var label = d.name;
            return label && _this.visibleValue && label.toString() === _this.visibleValue.toString() && d.value !== undefined;
        }));
        if (indexActiveDataPoint === -1) {
            // No valid point is 'active/hovered over' at this moment.
            return undefined;
        }
        return this.mapDataPointToCircle(this.data.series[indexActiveDataPoint], indexActiveDataPoint);
    };
    /**
     * @return {?}
     */
    ExtendedCircleSeriesComponent.prototype.onResize = /**
     * @return {?}
     */
    function () {
        var _loop_1 = function (prop) {
            if (this_1.data.name === this_1.pinnedObject[prop].seriesName) {
                /** @type {?} */
                var circle = this_1.pinnedObject[prop];
                /** @type {?} */
                var maxLen = circle.seriesName.length + 4;
                /** @type {?} */
                var cx = this_1.xScale(new Date(circle.label));
                /** @type {?} */
                var cy = this_1.yScale(circle.value);
                /** @type {?} */
                var _that_1 = this_1;
                // black tooltip rectangle
                Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this_1.anchorHolderO.nativeElement).append('rect').on('click', (/**
                 * @return {?}
                 */
                function () { _that_1.onRemove(this, _that_1); }))
                    .attr('fill', '#000').attr('opacity', 0.7)
                    .attr('rx', 3).attr('ry', 3)
                    .attr('x', cx - 40).attr('y', cy - 50)
                    .attr('class', 'c' + Math.abs(circle.value))
                    .attr('height', 40).attr('width', maxLen * 6);
                Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this_1.anchorHolderO.nativeElement).append('circle').on('click', (/**
                 * @return {?}
                 */
                function () { _that_1.onRemove(this, _that_1); }))
                    .attr('fill', circle.color)
                    .attr('cx', cx).attr('cy', cy)
                    .attr('class', 'c' + Math.abs(circle.value))
                    .attr('r', 4);
                Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this_1.anchorHolderO.nativeElement).append('text').text(circle.seriesName + ' : ' + Math.abs(circle.value))
                    .attr('x', cx - 30).attr('y', cy - 35).on('click', (/**
                 * @return {?}
                 */
                function () { _that_1.onRemove(this, _that_1); }))
                    .attr('class', 'c' + Math.abs(circle.value))
                    .style('fill', '#fff');
                Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this_1.anchorHolderO.nativeElement).append('text').text(moment$6(circle.label).format(this_1.dateFormat))
                    .attr('x', cx - 30).attr('y', cy - 20).on('click', (/**
                 * @return {?}
                 */
                function () { _that_1.onRemove(this, _that_1); }))
                    .attr('class', 'c' + Math.abs(circle.value))
                    .style('fill', '#fff').style('font-family', 'apollo');
            }
        };
        var this_1 = this;
        for (var prop in this.pinnedObject) {
            _loop_1(prop);
        }
    };
    ExtendedCircleSeriesComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    // tslint:disable-next-line
                    selector: 'g[app-extended-ngx-charts-circle-series]',
                    template: "\n    <svg:g *ngIf=\"circle\">\n      <defs>\n        <svg:g ngx-charts-svg-linear-gradient\n          orientation=\"vertical\"\n          [name]=\"gradientId\"\n          [stops]=\"circle.gradientStops\"\n        />\n      </defs>\n      <svg:rect\n        *ngIf=\"barVisible && type === 'standard'\"\n        [@animationState]=\"'active'\"\n        [attr.x]=\"circle.cx - circle.radius\"\n        [attr.y]=\"circle.cy\"\n        [attr.width]=\"circle.radius * 2\"\n        [attr.height]=\"circle.height\"\n        [attr.fill]=\"gradientFill\"\n        class=\"tooltip-bar\"\n      />\n      <svg:g ngx-charts-circle\n        class=\"circle\"\n        [cx]=\"circle.cx\"\n        [cy]=\"circle.cy\"\n        [r]=\"circle.radius\"\n        [fill]=\"circle.color\"\n        [class.active]=\"isActive({name: circle.seriesName})\"\n        [pointerEvents]=\"circle.value === 0 ? 'none': 'all'\"\n        [data]=\"circle.value\"\n        [classNames]=\"circle.classNames\"\n        (select)=\"pinTooltip(circle)\"\n        (activate)=\"activateCircle()\"\n        (deactivate)=\"deactivateCircle()\"\n        ngx-tooltip\n        [tooltipDisabled]=\"tooltipDisabled\"\n        [tooltipPlacement]=\"'top'\"\n        [tooltipType]=\"'tooltip'\"\n        [tooltipTitle]=\"tooltipTemplate ? undefined : getTooltipText(circle)\"\n        [tooltipTemplate]=\"tooltipTemplate\"\n        [tooltipContext]=\"circle.data\"\n      />\n    </svg:g>\n    <svg:g #anchorHolderOne>\n  </svg:g>\n  ",
                    changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush,
                    animations: [
                        Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["trigger"])('animationState', [
                            Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["transition"])(':enter', [
                                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({
                                    opacity: 0,
                                }),
                                Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["animate"])(250, Object(_angular_animations__WEBPACK_IMPORTED_MODULE_21__["style"])({ opacity: 1 }))
                            ])
                        ])
                    ]
                }] }
    ];
    ExtendedCircleSeriesComponent.propDecorators = {
        sizeChanged: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        dataChanged: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        pinnedObject: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        collectPins: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
        anchorHolderO: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: ['anchorHolderOne', { static: true },] }]
    };
    return ExtendedCircleSeriesComponent;
}(_swimlane_ngx_charts__WEBPACK_IMPORTED_MODULE_18__["CircleSeriesComponent"]));
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ctos-plan-chart/extended/extended-line-series.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ExtendedLineSeriesComponent = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__extends"])(ExtendedLineSeriesComponent, _super);
    function ExtendedLineSeriesComponent() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @return {?}
     */
    ExtendedLineSeriesComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        this.updateGradients();
        /** @type {?} */
        var dis = this;
        /** @type {?} */
        var data = this.sortData(this.data.series);
        /** @type {?} */
        var lineGen = this.getLineGenerator();
        this.path = lineGen(data) || '';
        if (this.data && this.data.series.length === 1) {
            this.getCircleGenerator(dis);
        }
        else if (!this.data) {
            Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolder.nativeElement).selectAll('*').remove();
        }
        /** @type {?} */
        var areaGen = this.getAreaGenerator();
        this.areaPath = areaGen(data) || '';
        if (this.hasRange) {
            /** @type {?} */
            var range = this.getRangeGenerator();
            this.outerPath = range(data) || '';
        }
        if (this.hasGradient) {
            this.stroke = this.gradientUrl;
            /** @type {?} */
            var values = this.data.series.map((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.value; }));
            /** @type {?} */
            var max = Math.max.apply(Math, Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(values));
            /** @type {?} */
            var min = Math.min.apply(Math, Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(values));
            if (max === min) {
                this.stroke = this.colors.getColor(max);
            }
        }
        else {
            this.stroke = this.colors.getColor(this.data.name);
        }
    };
    /**
     * @return {?}
     */
    ExtendedLineSeriesComponent.prototype.getLineGenerator = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Object(d3_shape__WEBPACK_IMPORTED_MODULE_16__["line"])()
            .x((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var label = d.name;
            /** @type {?} */
            var value;
            if (_this.scaleType === 'time') {
                value = _this.xScale(label);
            }
            else if (_this.scaleType === 'linear') {
                value = _this.xScale(Number(label));
            }
            else {
                value = _this.xScale(label);
            }
            return value;
        }))
            .y((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return _this.yScale(d.value); }))
            .curve(this.curve);
    };
    /**
     * @param {?} dis
     * @return {?}
     */
    ExtendedLineSeriesComponent.prototype.getCircleGenerator = /**
     * @param {?} dis
     * @return {?}
     */
    function (dis) {
        /** @type {?} */
        var points = dis.data.series;
        Object(d3__WEBPACK_IMPORTED_MODULE_14__["select"])(this.anchorHolder.nativeElement).selectAll('dot')
            .data(points)
            .enter().append('circle') // Uses the enter().append() method
            .attr('class', 'dot') // Assign a class for styling
            .attr('cx', (/**
         * @param {?} d
         * @param {?} i
         * @return {?}
         */
        function (d, i) { return dis.xScale(d['name']); }))
            .attr('cy', (/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return dis.yScale(d['value']); }))
            .attr('fill', dis.colors.getColor(dis.data.code))
            .attr('r', 2);
    };
    /**
     * @return {?}
     */
    ExtendedLineSeriesComponent.prototype.getRangeGenerator = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return Object(d3_shape__WEBPACK_IMPORTED_MODULE_16__["area"])()
            .x((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var label = d.name;
            /** @type {?} */
            var value;
            if (_this.scaleType === 'time') {
                value = _this.xScale(label);
            }
            else if (_this.scaleType === 'linear') {
                value = _this.xScale(Number(label));
            }
            else {
                value = _this.xScale(label);
            }
            return value;
        }))
            .y0((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return _this.yScale(typeof d.min === 'number' ? d.min : d.value); }))
            .y1((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return _this.yScale(typeof d.max === 'number' ? d.max : d.value); }))
            .curve(this.curve);
    };
    /**
     * @return {?}
     */
    ExtendedLineSeriesComponent.prototype.getAreaGenerator = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var xProperty = (/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            /** @type {?} */
            var label = d.name;
            return _this.xScale(label);
        });
        return Object(d3_shape__WEBPACK_IMPORTED_MODULE_16__["area"])()
            .x(xProperty)
            .y0((/**
         * @return {?}
         */
        function () { return _this.yScale.range()[0]; }))
            .y1((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return _this.yScale(d.value); }))
            .curve(this.curve);
    };
    /**
     * @param {?} entry
     * @return {?}
     */
    ExtendedLineSeriesComponent.prototype.isActive = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        if (!this.activeEntries) {
            return false;
        }
        /** @type {?} */
        var item = this.activeEntries.find((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return entry.name === d.name;
        }));
        return item !== undefined;
    };
    /**
     * @param {?} entry
     * @return {?}
     */
    ExtendedLineSeriesComponent.prototype.isInactive = /**
     * @param {?} entry
     * @return {?}
     */
    function (entry) {
        if (!this.activeEntries || this.activeEntries.length === 0) {
            return false;
        }
        /** @type {?} */
        var item = this.activeEntries.find((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            return entry.name === d.name;
        }));
        return item === undefined;
    };
    ExtendedLineSeriesComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    // tslint:disable-next-line
                    selector: 'g[extended-ngx-charts-line-series]',
                    template: "\n      <svg:g>\n        <defs>\n          <svg:g ngx-charts-svg-linear-gradient *ngIf=\"hasGradient\"\n            orientation=\"vertical\"\n            [name]=\"gradientId\"\n            [stops]=\"gradientStops\"\n          />\n        </defs>\n        <svg:g ngx-charts-area\n          class=\"line-highlight\"\n          [data]=\"data\"\n          [path]=\"areaPath\"\n          [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n          [opacity]=\"0.25\"\n          [startOpacity]=\"0\"\n          [gradient]=\"true\"\n          [stops]=\"areaGradientStops\"\n          [class.active]=\"isActive(data)\"\n          [class.inactive]=\"isInactive(data)\"\n          [animations]=\"animations\"\n        />\n        <g #anchorHolder class='anchorHolder'>\n        </g>\n        <svg:g ngx-charts-line\n          class=\"line-series\"\n          [data]=\"data\"\n          [path]=\"path\"\n          [stroke]=\"stroke\"\n          [animations]=\"animations\"\n          [class.active]=\"isActive(data)\"\n          [class.inactive]=\"isInactive(data)\"\n        />\n\n       <svg:g ngx-charts-area\n          *ngIf=\"hasRange\"\n          class=\"line-series-range\"\n          [data]=\"data\"\n          [path]=\"outerPath\"\n          [fill]=\"hasGradient ? gradientUrl : colors.getColor(data.name)\"\n          [class.active]=\"isActive(data)\"\n          [class.inactive]=\"isInactive(data)\"\n          [opacity]=\"rangeFillOpacity\"\n          [animations]=\"animations\"\n        />\n      </svg:g>\n    ",
                    changeDetection: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ChangeDetectionStrategy"].OnPush
                }] }
    ];
    ExtendedLineSeriesComponent.propDecorators = {
        anchorHolder: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: ['anchorHolder', { static: true },] }]
    };
    return ExtendedLineSeriesComponent;
}(_swimlane_ngx_charts__WEBPACK_IMPORTED_MODULE_18__["LineSeriesComponent"]));
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/reports/reports.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ReportsService = /** @class */ (function () {
    function ReportsService() {
    }
    /**
     * @param {?} report
     * @param {?} planDetails
     * @param {?} getStudySummary$
     * @param {?} planDetailsService$
     * @param {?} studyKey
     * @param {?} userName
     * @param {?} reportLocaleResources
     * @return {?}
     */
    ReportsService.prototype.generateReport = /**
     * @param {?} report
     * @param {?} planDetails
     * @param {?} getStudySummary$
     * @param {?} planDetailsService$
     * @param {?} studyKey
     * @param {?} userName
     * @param {?} reportLocaleResources
     * @return {?}
     */
    function (report, planDetails, getStudySummary$, planDetailsService$, studyKey, userName, reportLocaleResources) {
        this.getReportsParameters(report, planDetails, getStudySummary$, planDetailsService$, studyKey, userName, reportLocaleResources).then((/**
         * @param {?} params
         * @return {?}
         */
        function (params) {
            if (params) {
                window.open('../report.jsp?'.concat(params), '_blank');
            }
        })).catch((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            console.log('There is a problem while rreturning the promise.....');
            console.log(err);
        }));
    };
    /**
     * @param {?} report
     * @param {?} planDetails
     * @param {?} getStudySummary$
     * @param {?} planDetailsService$
     * @param {?} studyKey
     * @param {?} userName
     * @param {?} reportLocaleResources
     * @return {?}
     */
    ReportsService.prototype.getReportsParameters = /**
     * @param {?} report
     * @param {?} planDetails
     * @param {?} getStudySummary$
     * @param {?} planDetailsService$
     * @param {?} studyKey
     * @param {?} userName
     * @param {?} reportLocaleResources
     * @return {?}
     */
    function (report, planDetails, getStudySummary$, planDetailsService$, studyKey, userName, reportLocaleResources) {
        var _this = this;
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) {
            /** @type {?} */
            var combined$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["combineLatest"])(getStudySummary$, planDetailsService$);
            combined$.subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__read"])(_a, 2), study = _b[0], pd = _b[1];
                console.log(study, planDetails);
                /** @type {?} */
                var qs = '';
                report.parameterList.parameterName.forEach((/**
                 * @param {?} param
                 * @return {?}
                 */
                function (param) {
                    switch (param) {
                        case reportLocaleResources['reportCmdName']: {
                            qs += qs.length > 0 ? '&' : '';
                            qs += param + '=' + report.reportId;
                            break;
                        }
                        case reportLocaleResources['reportStudyId']: {
                            qs += qs.length > 0 ? '&' : '';
                            qs += param + '=' + study.id;
                            break;
                        }
                        case reportLocaleResources['PlanReportStudyKey']: {
                            qs += qs.length > 0 ? '&' : '';
                            qs += param + '=' + studyKey;
                            break;
                        }
                        case reportLocaleResources['PlanReportUserName']: {
                            qs += qs.length > 0 ? '&' : '';
                            // qs += param + '=' + this.userDataService.getUserName();
                            qs += param + '=' + userName;
                            break;
                        }
                        case reportLocaleResources['ReportViewName']: {
                            qs += qs.length > 0 ? '&' : '';
                            qs += param + '=PLAN';
                            break;
                        }
                        case reportLocaleResources['ReportingPeriod']: {
                            qs += qs.length > 0 ? '&' : '';
                            qs += param + '=' + _this.getReportingPeriod(report.reportId);
                            break;
                        }
                        case reportLocaleResources['PlanReportKey']: {
                            qs += qs.length > 0 ? '&' : '';
                            qs += param + '=' + planDetails.planProperties.planKey;
                            break;
                        }
                        case reportLocaleResources['ReportPlanName']: {
                            qs += qs.length > 0 ? '&' : '';
                            qs += param + '=' + planDetails.planProperties.name;
                            break;
                        }
                        case reportLocaleResources['ReportPlanStatus']: {
                            /** @type {?} */
                            var status_1 = planDetails.planProperties.planStatus;
                            qs += qs.length > 0 ? '&' : '';
                            qs +=
                                param +
                                    '=' +
                                    (typeof status_1 === 'string' ? status_1 : status_1.value);
                            break;
                        }
                    }
                }));
                console.log(qs);
                resolve(qs);
            }));
        }));
    };
    /**
     * @param {?} obj
     * @return {?}
     */
    ReportsService.prototype.isJSONEmpty = /**
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        for (var key in obj) {
            if (obj.hasOwnProperty(key)) {
                return false;
            }
        }
        return true;
    };
    /**
     * @param {?} reportId
     * @return {?}
     */
    ReportsService.prototype.getReportingPeriod = /**
     * @param {?} reportId
     * @return {?}
     */
    function (reportId) {
        /** @type {?} */
        var reportingPeriodKey = reportId.substr(reportId.length - 2, 1);
        switch (reportingPeriodKey) {
            case 'Y': {
                return 'YEARLY';
            }
            case 'Q': {
                return 'QUARTERLY';
            }
            case 'M': {
                return 'MONTHLY';
            }
            default: {
                return 'WEEKLY';
            }
        }
    };
    /**
     * @param {?} resName
     * @param {?} reportLocaleResources
     * @return {?}
     */
    ReportsService.prototype.getLocaleResource = /**
     * @param {?} resName
     * @param {?} reportLocaleResources
     * @return {?}
     */
    function (resName, reportLocaleResources) {
        return reportLocaleResources[resName];
    };
    ReportsService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"] }
    ];
    /** @nocollapse */
    ReportsService.ctorParameters = function () { return []; };
    return ReportsService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/reports/reports.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ReportsComponent = /** @class */ (function () {
    function ReportsComponent(reportService) {
        this.reportService = reportService;
    }
    /**
     * @return {?}
     */
    ReportsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.approvedPlanReportWarningMsg = this.reportLocaleResources['Approved_Plan_Report_Warning'];
        this.planDetailsService$.subscribe((/**
         * @param {?} pd
         * @return {?}
         */
        function (pd) {
            _this.planDetails = pd;
            _this.isApprovedPlan = _this.planDetails.planProperties.isPlan && _this.planDetails.planProperties.isPlanApproved;
        }));
    };
    /**
     * @param {?} reportId
     * @return {?}
     */
    ReportsComponent.prototype.generateReport = /**
     * @param {?} reportId
     * @return {?}
     */
    function (reportId) {
        /** @type {?} */
        var reportClicked = this.reportList.filter((/**
         * @param {?} report
         * @return {?}
         */
        function (report) {
            return report.reportId === reportId;
        }));
        if (reportClicked.length > 0) {
            /** @type {?} */
            var report = reportClicked[0];
            this.reportService.generateReport(report, this.planDetails, this.getStudySummary$, this.planDetailsService$, this.studyKey, this.userName, this.reportLocaleResources);
        }
    };
    ReportsComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-reports',
                    template: "<div *ngIf=\"isApprovedPlan\" class=\"ctos-warning\" [innerHTML]=\"approvedPlanReportWarningMsg\"></div>\r\n<!-- <div class=\"report-container\"> -->\r\n<div class=\"ctos-card\" *ngFor=\"let report of reportList; let i = index\">\r\n  <a class=\"ctos-card-header ctos-card-title\" [routerLink]=\"\" (click)=\"generateReport(report.reportId)\"\r\n    [matTooltip]=\"'Export Report'\">\r\n    <!-- <a  for=\"properties\"> -->\r\n    <span>{{ report.name }}</span>\r\n  </a>\r\n  <p>\r\n    {{ report.description }}\r\n  </p>\r\n</div>\r\n<!-- </div> -->",
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None
                }] }
    ];
    /** @nocollapse */
    ReportsComponent.ctorParameters = function () { return [
        { type: ReportsService }
    ]; };
    ReportsComponent.propDecorators = {
        reportLocaleResources: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        reportList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        getStudySummary$: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        planDetailsService$: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        studyKey: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        userName: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
    };
    return ReportsComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/loading-screen.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoadingScreenService = /** @class */ (function () {
    function LoadingScreenService() {
        this._loading = 0;
        this.loadingStatus = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Subject"]();
    }
    Object.defineProperty(LoadingScreenService.prototype, "loading", {
        get: /**
         * @return {?}
         */
        function () {
            return this._loading;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._loading = value;
            this.loadingStatus.next(value);
            if (this._loading > 0) {
                document.body.classList.add('progress-cursor');
            }
            else {
                document.body.classList.remove('progress-cursor');
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    LoadingScreenService.prototype.startLoading = /**
     * @return {?}
     */
    function () {
        this.loading++;
    };
    /**
     * @return {?}
     */
    LoadingScreenService.prototype.stopLoading = /**
     * @return {?}
     */
    function () {
        this.loading--;
    };
    LoadingScreenService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"] }
    ];
    return LoadingScreenService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/loading-screen/loading-screen.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var LoadingScreenComponent = /** @class */ (function () {
    function LoadingScreenComponent(loadingScreenService) {
        this.loadingScreenService = loadingScreenService;
        this.loading = 0;
    }
    /**
     * @return {?}
     */
    LoadingScreenComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.loadingSubscription = this.loadingScreenService.loadingStatus.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["debounceTime"])(200)).subscribe((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.loading = value;
        }));
    };
    /**
     * @return {?}
     */
    LoadingScreenComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.loadingSubscription.unsubscribe();
    };
    LoadingScreenComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-loading-screen',
                    template: "<div class=\"loading-screen-wrapper\" *ngIf=\"loading > 0\">\r\n    <div class=\"sk-circle\">\r\n      <div class=\"sk-circle1 sk-child\"></div>\r\n      <div class=\"sk-circle2 sk-child\"></div>\r\n      <div class=\"sk-circle3 sk-child\"></div>\r\n      <div class=\"sk-circle4 sk-child\"></div>\r\n      <div class=\"sk-circle5 sk-child\"></div>\r\n      <div class=\"sk-circle6 sk-child\"></div>\r\n      <div class=\"sk-circle7 sk-child\"></div>\r\n      <div class=\"sk-circle8 sk-child\"></div>\r\n      <div class=\"sk-circle9 sk-child\"></div>\r\n      <div class=\"sk-circle10 sk-child\"></div>\r\n      <div class=\"sk-circle11 sk-child\"></div>\r\n      <div class=\"sk-circle12 sk-child\"></div>\r\n    </div>\r\n  </div>\r\n  "
                }] }
    ];
    /** @nocollapse */
    LoadingScreenComponent.ctorParameters = function () { return [
        { type: LoadingScreenService }
    ]; };
    return LoadingScreenComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/auth-header/auth-header.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AuthHeaderComponent = /** @class */ (function () {
    function AuthHeaderComponent() {
    }
    /**
     * @return {?}
     */
    AuthHeaderComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () { };
    AuthHeaderComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-auth-header',
                    template: "<ctos-auth-main-header\r\n    [logoUrl]=\"logoUrl\"\r\n    [appInfoUrl]=\"appInfoUrl\"\r\n></ctos-auth-main-header>\r\n"
                }] }
    ];
    /** @nocollapse */
    AuthHeaderComponent.ctorParameters = function () { return []; };
    AuthHeaderComponent.propDecorators = {
        logoUrl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        appInfoUrl: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
    };
    return AuthHeaderComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/worldwide-dropdown/worldwide-dropdown.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var WorldwideDropdownComponent = /** @class */ (function () {
    function WorldwideDropdownComponent(payloadCommandService, baseConnectionService) {
        this.payloadCommandService = payloadCommandService;
        this.baseConnectionService = baseConnectionService;
        this.SORT_KEY = 'name';
        this.optionClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    /**
     * @return {?}
     */
    WorldwideDropdownComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.fetchDropdownItems();
    };
    /**
     * @private
     * @return {?}
     */
    WorldwideDropdownComponent.prototype.fetchDropdownItems = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // const payload = this.payloadCommandService.getCommandDetails(COMMAND.GET_FILTER_COUNTRY_DATA, null, null, null, null);
        /** @type {?} */
        var params = {};
        // TODO: Make the module as Input
        /** @type {?} */
        var moduleInfo = CTOSUtil.getModuleInfo('ENRODET', null, 'SITES');
        /** @type {?} */
        var payload = this.payloadCommandService.getApiRequest(COMMAND.GET_FILTER_COUNTRY_DATA, params, null, moduleInfo);
        /** @type {?} */
        var actionParam = {};
        actionParam.url = common_library__WEBPACK_IMPORTED_MODULE_2__["APIEndPoints"].FILTER_COUNTRY_DATA;
        actionParam.endPoint = true;
        actionParam.cacheKey = common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].GetFilterCountryData;
        // this.baseConnectionService.sendRequest(payload, actionParam).subscribe((response: any) => {
        //   if (response.result === COMMON.RESULT_OK) {
        //     this.items = [{
        //       name: 'Worldwide',
        //       code: 'WW',
        //       key: 0,
        //       children: this.getChildren(response.countryRegionMappingList.countryRegionMapping)
        //     }];
        //     this.selectedItem = this.items[0];
        //   }
        // });
        this.baseConnectionService
            .send(payload, actionParam)
            .subscribe((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            if (response.result === common_library__WEBPACK_IMPORTED_MODULE_2__["COMMON"].RESULT_OK) {
                if (_this.geoFilters && _this.geoFilters.length > 0) {
                    _this.items = [{
                            name: 'Worldwide',
                            code: 'WW',
                            key: 0,
                            children: _this.getChildren(response.countryRegionMappingList.countryRegionMapping)
                        }];
                }
                else {
                    _this.items = [{
                            name: 'Worldwide',
                            code: 'WW',
                            key: 0
                        }];
                }
                if (_this.selectedOption) {
                    _this.selectedItem = _this.selectedOption;
                }
                else {
                    _this.selectedItem = _this.items[0];
                }
            }
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    WorldwideDropdownComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.geoFilters && changes.geoFilters.currentValue) {
            this.geoFilters = changes.geoFilters.currentValue;
            this.fetchDropdownItems();
            // if (this.items && this.items.length > 0) {
            //   this.selectedItem = this.items[0];
            // }
        }
        if (changes.selectedOption && changes.selectedOption.currentValue) {
            this.selectedItem = changes.selectedOption.currentValue;
        }
    };
    /**
     * @param {?} item
     * @return {?}
     */
    WorldwideDropdownComponent.prototype.optionClicked = /**
     * @param {?} item
     * @return {?}
     */
    function (item) {
        this.selectedItem = item;
        this.optionClick.emit(item);
        this.wwList.closeMenu();
    };
    /**
     * @private
     * @param {?} countryRegionMapping
     * @return {?}
     */
    WorldwideDropdownComponent.prototype.getChildren = /**
     * @private
     * @param {?} countryRegionMapping
     * @return {?}
     */
    function (countryRegionMapping) {
        /** @type {?} */
        var self = this;
        /** @type {?} */
        var regions = [];
        countryRegionMapping = [].concat(countryRegionMapping);
        /** @type {?} */
        var countryKeys = self.geoFilters.filter((/**
         * @param {?} geoKey
         * @return {?}
         */
        function (geoKey) { return geoKey.level === GEO_LEVELS.COUNTRY; })).map((/**
         * @param {?} geoKey
         * @return {?}
         */
        function (geoKey) { return geoKey.key; }));
        /** @type {?} */
        var regionKeys = self.geoFilters.filter((/**
         * @param {?} geoKey
         * @return {?}
         */
        function (geoKey) { return geoKey.level === GEO_LEVELS.REGION; })).map((/**
         * @param {?} geoKey
         * @return {?}
         */
        function (geoKey) { return geoKey.key; }));
        regions = countryRegionMapping.filter((/**
         * @param {?} mapping
         * @return {?}
         */
        function (mapping) {
            if (regionKeys && regionKeys.indexOf(mapping.regionDetails.regionKey) === -1) {
                return false;
            }
            else {
                return true;
            }
        })).map((/**
         * @param {?} mapping
         * @return {?}
         */
        function (mapping) {
            return {
                name: mapping.regionDetails.regionName,
                code: mapping.regionDetails.regionCode,
                key: mapping.regionDetails.regionKey,
                level: GEO_LEVELS.REGION,
                children: Array.isArray(mapping.countryDataList.countryData)
                    ? self.sortItems(mapping.countryDataList.countryData.filter((/**
                     * @param {?} country
                     * @return {?}
                     */
                    function (country) {
                        if (countryKeys && countryKeys.indexOf(country.countryKey) === -1) {
                            return false;
                        }
                        else {
                            return true;
                        }
                    })).map((/**
                     * @param {?} country
                     * @return {?}
                     */
                    function (country) {
                        return {
                            name: country.countryName,
                            code: country.countryCode,
                            key: country.countryKey,
                            level: GEO_LEVELS.COUNTRY
                        };
                    })))
                    : [{
                            name: mapping.countryDataList.countryData.countryName,
                            code: mapping.countryDataList.countryData.countryCode,
                            key: mapping.countryDataList.countryData.countryKey,
                            level: GEO_LEVELS.COUNTRY
                        }]
            };
        }));
        return this.sortItems(regions);
    };
    /**
     * @private
     * @param {?} items
     * @param {?=} property
     * @return {?}
     */
    WorldwideDropdownComponent.prototype.sortItems = /**
     * @private
     * @param {?} items
     * @param {?=} property
     * @return {?}
     */
    function (items, property) {
        if (property === void 0) { property = this.SORT_KEY; }
        /** @type {?} */
        var itemsCopy = JSON.parse(JSON.stringify(items));
        /** @type {?} */
        var result = itemsCopy.sort((/**
         * @param {?} item1
         * @param {?} item2
         * @return {?}
         */
        function (item1, item2) {
            /** @type {?} */
            var property1 = item1[property];
            /** @type {?} */
            var property2 = item2[property];
            if (typeof property1 === 'string' && typeof property2 === 'string') {
                property1 = property1.toLowerCase();
                property2 = property2.toLowerCase();
            }
            if ((property1 < property2) || (property1 === '')) {
                return -1;
            }
            else if ((property1 > property2) || (property2 === '')) {
                return 1;
            }
            else {
                return 0;
            }
        }));
        return result;
    };
    WorldwideDropdownComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-worldwide-dropdown',
                    template: "<button mat-button class=\"drop-down-button\" [matMenuTriggerFor]=\"panel.menu\" #wwList=\"matMenuTrigger\">\r\n    <span class=\"selected-item\">{{selectedItem?.name}}</span>\r\n    <span class=\"mat-select-arrow\"></span>\r\n</button>\r\n<ctos-nested-dropdown (optionClick)=\"optionClicked($event)\" #panel [items]=\"items\"></ctos-nested-dropdown>"
                }] }
    ];
    /** @nocollapse */
    WorldwideDropdownComponent.ctorParameters = function () { return [
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["PayloadCommandService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"] }
    ]; };
    WorldwideDropdownComponent.propDecorators = {
        geoFilters: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        optionClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
        selectedOption: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        wwList: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"], args: ['wwList', { static: true },] }]
    };
    return WorldwideDropdownComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/multi-level-dropdown/multi-level-dropdown.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var MultiLevelDropdownComponent = /** @class */ (function () {
    function MultiLevelDropdownComponent() {
        this.optionGroups = [];
        this.emitMenuClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    Object.defineProperty(MultiLevelDropdownComponent.prototype, "selectedOption", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this.selectedCohort = data;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiLevelDropdownComponent.prototype, "multiOptionGroups", {
        set: /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            this.optionGroups = data;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MultiLevelDropdownComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @return {?}
     */
    MultiLevelDropdownComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MultiLevelDropdownComponent.prototype.selectionChanged = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.emitMenuClick.emit(event);
    };
    MultiLevelDropdownComponent.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"], args: [{
                    selector: 'ctos-so-multi-level-dropdown',
                    template: "<mat-form-field class=\"over-threshold-cohort-dropdown\">\r\n<mat-select panelClass=\"multi-level-dropdown-panel ctos-cohort-list-panel\" disableOptionCentering [(value)]=\"selectedCohort\" (selectionChange)=\"selectionChanged($event)\">\r\n    <mat-optgroup *ngFor=\"let group of optionGroups\" [disabled]=\"group.disabled\">\r\n        <span  [matTooltip]=\"group.tooltip\">{{group.name}}</span>\r\n        <mat-option *ngFor=\"let option of group.options\" [matTooltip]=\"option.tooltip\" [value]=\"option.value\">\r\n            <span>{{option.viewValue}}</span>\r\n        </mat-option>\r\n    </mat-optgroup>\r\n</mat-select>\r\n</mat-form-field>\r\n",
                    encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None
                }] }
    ];
    /** @nocollapse */
    MultiLevelDropdownComponent.ctorParameters = function () { return []; };
    MultiLevelDropdownComponent.propDecorators = {
        emitMenuClick: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"] }],
        selectedOption: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }],
        multiOptionGroups: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"] }]
    };
    return MultiLevelDropdownComponent;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/components.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ComponentsModule = /** @class */ (function () {
    function ComponentsModule() {
    }
    ComponentsModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                    imports: [
                        _angular_common__WEBPACK_IMPORTED_MODULE_0__["CommonModule"],
                        _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatMenuModule"],
                        _angular_material_button__WEBPACK_IMPORTED_MODULE_5__["MatButtonModule"],
                        _angular_material_dialog__WEBPACK_IMPORTED_MODULE_6__["MatDialogModule"],
                        _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_7__["MatTooltipModule"],
                        _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                        common_library__WEBPACK_IMPORTED_MODULE_2__["CommonLibraryModule"],
                        common_library__WEBPACK_IMPORTED_MODULE_2__["CommonAngularMaterialModule"],
                        ng5_slider__WEBPACK_IMPORTED_MODULE_19__["Ng5SliderModule"],
                        _swimlane_ngx_charts__WEBPACK_IMPORTED_MODULE_18__["NgxChartsModule"],
                        _angular_material_checkbox__WEBPACK_IMPORTED_MODULE_8__["MatCheckboxModule"],
                        _angular_router__WEBPACK_IMPORTED_MODULE_10__["RouterModule"]
                    ],
                    declarations: [
                        HeaderComponent,
                        MilestoneGraphComponent,
                        PlanDropdownListComponent,
                        TrimPipe,
                        CueCardComponent,
                        DropdownComponent,
                        PlanOptionsComponent,
                        ApprovePlanComponent,
                        CopyPlanComponent,
                        CTOSPlanChartComponent,
                        DateCustomPipe,
                        CTOSPlanChartLegendComponent,
                        CTOSPlanChartLegendItemComponent,
                        GojsCanvasComponent,
                        CTOSCustomMultiSelectComponent,
                        ExtendedNgxTooltipAreaComponent,
                        ExtendedCircleSeriesComponent,
                        ExtendedLineSeriesComponent,
                        LoadingScreenComponent,
                        ReportsComponent,
                        AuthHeaderComponent,
                        WorldwideDropdownComponent,
                        MultiLevelDropdownComponent
                    ],
                    providers: [],
                    exports: [
                        HeaderComponent,
                        MilestoneGraphComponent,
                        PlanDropdownListComponent,
                        CueCardComponent,
                        DropdownComponent,
                        PlanOptionsComponent,
                        CTOSPlanChartComponent,
                        CTOSPlanChartLegendComponent,
                        CTOSPlanChartLegendItemComponent,
                        GojsCanvasComponent,
                        CTOSCustomMultiSelectComponent,
                        ExtendedNgxTooltipAreaComponent,
                        ExtendedCircleSeriesComponent,
                        ExtendedLineSeriesComponent,
                        LoadingScreenComponent,
                        ReportsComponent,
                        AuthHeaderComponent,
                        WorldwideDropdownComponent,
                        MultiLevelDropdownComponent
                    ],
                    entryComponents: [CopyPlanComponent, ApprovePlanComponent, CTOSPlanChartComponent]
                },] }
    ];
    return ComponentsModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/milestone-graph/milestone-graph.component.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$7 = moment__WEBPACK_IMPORTED_MODULE_13__;
var MilestoneGraphService = /** @class */ (function () {
    function MilestoneGraphService() {
    }
    /**
     * @param {?} milestones
     * @return {?}
     */
    MilestoneGraphService.prototype.rangeFinder = /**
     * @param {?} milestones
     * @return {?}
     */
    function (milestones) {
        /** @type {?} */
        var range = { start: '', end: '', difference: '' };
        milestones.forEach((/**
         * @param {?} milestone
         * @return {?}
         */
        function (milestone) {
            /** @type {?} */
            var milestoneStart;
            /** @type {?} */
            var milestoneEnd;
            if (milestone['TFSI'] && milestone['PFSI'] && moment$7(milestone['TFSI']) > moment$7(milestone['PFSI'])) {
                milestoneStart = 'PFSI';
            }
            else if (milestone['TFSI'] && milestone['PFSI']) {
                milestoneStart = 'TFSI';
            }
            else if (milestone['TFSI']) {
                milestoneStart = 'TFSI';
            }
            else {
                milestoneStart = 'PFSI';
            }
            if (milestone['TLSR'] && milestone['PLSR'] && moment$7(milestone['TLSR']) > moment$7(milestone['PLSR'])) {
                milestoneEnd = 'TLSR';
            }
            else if (milestone['TLSR'] && milestone['PLSR']) {
                milestoneEnd = 'PLSR';
            }
            else if (milestone['TLSR']) {
                milestoneEnd = 'TLSR';
            }
            else {
                milestoneEnd = 'PLSR';
            }
            if (milestone[milestoneStart] && (range.end === '' || moment$7(range.start) > moment$7(milestone[milestoneStart]))) {
                range.start = milestone[milestoneStart];
            }
            // tlsr
            if (milestone[milestoneEnd] && (range.end === '' || moment$7(range.end) < moment$7(milestone[milestoneEnd]))) {
                range.end = milestone[milestoneEnd];
            }
        }));
        /** @type {?} */
        var start = moment$7(range.start, 'YYYY-MM-DD');
        // SO-15417 : Adding extra day to calculate diff in weeks as per requirement
        /** @type {?} */
        var end = moment$7(range.end, 'YYYY-MM-DD').add(1, 'days');
        // Difference in number of weeks
        range.difference = moment$7.duration(end.diff(start)).asWeeks() + ' Weeks';
        return range;
    };
    MilestoneGraphService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"] }
    ];
    /** @nocollapse */
    MilestoneGraphService.ctorParameters = function () { return []; };
    return MilestoneGraphService;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/configuration.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ConfigurationService = /** @class */ (function () {
    /**
     * Creates an instance of configuration service.
     * @param encryptionService
     */
    function ConfigurationService(encryptionService) {
        this.encryptionService = encryptionService;
    }
    Object.defineProperty(ConfigurationService.prototype, "encryptKey", {
        /**
         * Gets encrypt key
         */
        get: /**
         * Gets encrypt key
         * @return {?}
         */
        function () {
            return this.encryptionKey;
        },
        /**
         * Sets encrypt key
         */
        set: /**
         * Sets encrypt key
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.encryptionKey = v;
            this.encryptionService.setKey(this.encryptionKey);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "cacheMaxAge", {
        /**
         * Gets cache max age
         */
        get: /**
         * Gets cache max age
         * @return {?}
         */
        function () {
            return this.cacheAge;
        },
        /**
         * Sets cache max age
         */
        set: /**
         * Sets cache max age
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.cacheAge = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "encryptType", {
        /**
         * Gets encrypt type
         */
        get: /**
         * Gets encrypt type
         * @return {?}
         */
        function () {
            return this.encryptionType;
        },
        /**
         * Sets encrypt type
         */
        set: /**
         * Sets encrypt type
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.encryptionType = v;
            this.encryptionService.setEncryption(this.encryptionType);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "dispatchUrl", {
        /**
         * Gets dispatch url
         */
        get: /**
         * Gets dispatch url
         * @return {?}
         */
        function () {
            return this.dispatchedUrl;
        },
        /**
         * Sets dispatch url
         */
        set: /**
         * Sets dispatch url
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.dispatchedUrl = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "appUrl", {
        /**
         * Gets app url
         */
        get: /**
         * Gets app url
         * @return {?}
         */
        function () {
            return this.applicationUrl;
        },
        /**
         * Sets app url
         */
        set: /**
         * Sets app url
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this.applicationUrl = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "$loginUrl", {
        /**
           * Getter $loginUrl
           * @return string
           */
        get: /**
         * Getter $loginUrl
         * @return {?} string
         */
        function () {
            return this.loginUrl;
        },
        /**
         * Setter $loginUrl
         * @param string value
         */
        set: /**
         * Setter $loginUrl
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this.loginUrl = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "authUrl", {
        /**
         * Gets app url
         */
        get: /**
         * Gets app url
         * @return {?}
         */
        function () {
            return this._authUrl;
        },
        /**
         * Sets app url
         */
        set: /**
         * Sets app url
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._authUrl = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "soApiUrl", {
        /**
         * Gets app url
         */
        get: /**
         * Gets app url
         * @return {?}
         */
        function () {
            return this._soApiUrl;
        },
        /**
         * Sets app url
         */
        set: /**
         * Sets app url
         * @param {?} v
         * @return {?}
         */
        function (v) {
            this._soApiUrl = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets config
     *
     * Set the application configuration
     * encryptionKey
     * cacheAge
     * encryptionType
     * applicationUrl
     * @param environment
     */
    /**
     * Sets config
     *
     * Set the application configuration
     * encryptionKey
     * cacheAge
     * encryptionType
     * applicationUrl
     * @param {?=} environment
     * @return {?}
     */
    ConfigurationService.prototype.setConfig = /**
     * Sets config
     *
     * Set the application configuration
     * encryptionKey
     * cacheAge
     * encryptionType
     * applicationUrl
     * @param {?=} environment
     * @return {?}
     */
    function (environment) {
        if (environment) {
            if (!this.typeCheck(environment)) {
                throw new Error("Invalid environment object");
            }
            this.encryptKey = environment.clientEncryptionKey;
            this.cacheMaxAge = environment.cacheAge;
            this.encryptType = environment.cryptoJS;
            this.appUrl = environment.app_url;
            this.$loginUrl = environment.login_url;
            this.authUrl = environment.authUrl;
            this.soApiUrl = environment.soApiUrl;
        }
        else {
            throw new Error("Environment object is empty");
        }
    };
    /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    ConfigurationService.prototype.typeCheck = /**
     * @private
     * @param {?} obj
     * @return {?}
     */
    function (obj) {
        return (obj.clientEncryptionKey !== undefined && obj.cacheAge !== undefined
            && obj.cryptoJS !== undefined && obj.app_url !== undefined && obj.login_url !== undefined);
    };
    ConfigurationService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ConfigurationService.ctorParameters = function () { return [
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["EncryptionService"] }
    ]; };
    /** @nocollapse */ ConfigurationService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function ConfigurationService_Factory() { return new ConfigurationService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["EncryptionService"])); }, token: ConfigurationService, providedIn: "root" });
    return ConfigurationService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/app-bootstrap.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AppBootstrapService = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__extends"])(AppBootstrapService, _super);
    function AppBootstrapService(errorTermsService, serverStatusService, userDataService, appDataService, localeAppResourcesService, baseTermsService, configurationService, windowService, commonConfigurationService, loginTermService, studyListService) {
        var _this = _super.call(this) || this;
        _this.errorTermsService = errorTermsService;
        _this.serverStatusService = serverStatusService;
        _this.userDataService = userDataService;
        _this.appDataService = appDataService;
        _this.localeAppResourcesService = localeAppResourcesService;
        _this.baseTermsService = baseTermsService;
        _this.configurationService = configurationService;
        _this.windowService = windowService;
        _this.commonConfigurationService = commonConfigurationService;
        _this.loginTermService = loginTermService;
        _this.studyListService = studyListService;
        return _this;
    }
    /**
     * @return {?}
     */
    AppBootstrapService.prototype.init = /**
     * @return {?}
     */
    function () {
        this.windowService.redirectAsPerParams();
    };
    /**
     * @param {?} environment
     * @param {?=} serverInfo
     * @param {?=} actionParam
     * @return {?}
     */
    AppBootstrapService.prototype.call = /**
     * @param {?} environment
     * @param {?=} serverInfo
     * @param {?=} actionParam
     * @return {?}
     */
    function (environment, serverInfo, actionParam) {
        this.configurationService.setConfig(environment);
        this.commonConfigurationService.setConfig(environment);
        /** @type {?} */
        var error_params = ERROR_PARAMS;
        /** @type {?} */
        var user_params = USER_PARAMS;
        /** @type {?} */
        var base_terms_params = common_library__WEBPACK_IMPORTED_MODULE_2__["BASE_TERMS_PARAMS"];
        /** @type {?} */
        var locale_app_terms_params = common_library__WEBPACK_IMPORTED_MODULE_2__["LOCALE_APP_TERMS_PARAMS"];
        /** @type {?} */
        var login_app_terms_params = common_library__WEBPACK_IMPORTED_MODULE_2__["LOGIN_PARAMS"];
        /** @type {?} */
        var serviceList = [
            this.baseTermsService.getTerm(base_terms_params, actionParam),
            this.localeAppResourcesService.getAppResources(locale_app_terms_params, actionParam),
            this.appDataService.getAppData(actionParam),
            this.errorTermsService.getErrorTerminologies(error_params, actionParam),
            this.serverStatusService.getServerStatus(serverInfo, actionParam)
        ];
        if (actionParam.prelogin) {
            serviceList = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(serviceList, [this.loginTermService.getLoginTerminologies(login_app_terms_params, actionParam)]);
        }
        else {
            serviceList = Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__spread"])(serviceList, [this.userDataService.getUserData(user_params, actionParam),
                this.studyListService.getStudyTags({ endPoint: true })]);
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_11__["forkJoin"])(serviceList)
            .toPromise()
            .then();
    };
    AppBootstrapService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"] }
    ];
    /** @nocollapse */
    AppBootstrapService.ctorParameters = function () { return [
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["ErrorTermsService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["ServerStatusService"] },
        { type: UserDataService },
        { type: AppDataService },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["LocaleAppResourcesService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["BaseTermsService"] },
        { type: ConfigurationService },
        { type: WindowService },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["ConfigurationService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["LoginTermsService"] },
        { type: StudyListService }
    ]; };
    return AppBootstrapService;
}(common_library__WEBPACK_IMPORTED_MODULE_2__["AppBootstrap"]));
if (false) {}
/**
 * @record
 */
function ServerInfo() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/auth-guard.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AuthGuard = /** @class */ (function () {
    function AuthGuard(router, userDataService) {
        this.router = router;
        this.userDataService = userDataService;
    }
    /**
     * @param {?} route
     * @return {?}
     */
    AuthGuard.prototype.canActivate = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        return this.checkLoginAndPrivileges(route);
    };
    /**
     * @param {?} route
     * @return {?}
     */
    AuthGuard.prototype.checkLoginAndPrivileges = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        // this.userDataService.getUserData(USER_PARAMS).subscribe((resp) => {
        //     let redirectUrl = '';
        //     let userPrev: any = [];
        //     if (this.userDataService.isLoggedIn) {
        //         if (resp.user && resp.user.privileges && resp.user.privileges.module) {
        //             const moduleId = route.data['moduleId'];
        //             const userPrivileges = [].concat(resp.user.privileges.module);
        //             userPrev = userPrivileges.filter(data => data.id.toString() === moduleId.toString());
        //             if (userPrev.length > 0) {
        //                 return true;
        //             } else {
        //                 redirectUrl = AppUtil.generateFlexUrl(BASE_HREF);
        //                 AppWindow.getWindow().location.href = redirectUrl;
        //             }
        //         }
        //     } else {
        //         sessionStorage.clear();
        //         redirectUrl = route.data['loginUrl']; // environment.login_url;
        //     }
        //     this.router.config.push({ path: 'app' });
        //     this.router.navigate(['app']).then(result => {
        //         AppWindow.getWindow().location.href = redirectUrl;
        //     });
        // });
        return true;
    };
    /**
     * @param {?} route
     * @return {?}
     */
    AuthGuard.prototype.canActivateChild = /**
     * @param {?} route
     * @return {?}
     */
    function (route) {
        return this.canActivate(route);
    };
    AuthGuard.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"] }
    ];
    /** @nocollapse */
    AuthGuard.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_10__["Router"] },
        { type: UserDataService }
    ]; };
    return AuthGuard;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/error-message.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ErrorMessageService = /** @class */ (function () {
    function ErrorMessageService() {
        var _this = this;
        this._Message = '';
        this._ErrorMessageSubscriber = new rxjs__WEBPACK_IMPORTED_MODULE_11__["Observable"]((/**
         * @param {?} publisher
         * @return {?}
         */
        function (publisher) {
            _this._ErrorMessagePublisher = publisher;
        }));
        this.publishGlobalError = new rxjs__WEBPACK_IMPORTED_MODULE_11__["BehaviorSubject"]('');
    }
    /**
     * @param {?=} message
     * @return {?}
     */
    ErrorMessageService.prototype.ShowErrorMessage = /**
     * @param {?=} message
     * @return {?}
     */
    function (message) {
        if (message === void 0) { message = ''; }
        /** @type {?} */
        var self = this;
        self._Message = message;
        self._ErrorMessagePublisher.next(self._Message);
    };
    /**
     * @param {?=} msg
     * @return {?}
     */
    ErrorMessageService.prototype.PublishError = /**
     * @param {?=} msg
     * @return {?}
     */
    function (msg) {
        if (msg === void 0) { msg = ''; }
        this.publishGlobalError.next(msg);
    };
    /**
     * @return {?}
     */
    ErrorMessageService.prototype.GetErrorMessage = /**
     * @return {?}
     */
    function () {
        return this._ErrorMessageSubscriber;
    };
    ErrorMessageService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"] }
    ];
    /** @nocollapse */
    ErrorMessageService.ctorParameters = function () { return []; };
    return ErrorMessageService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/GlobalErrorHandler.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var GlobalErrorHandler = /** @class */ (function (_super) {
    Object(tslib__WEBPACK_IMPORTED_MODULE_9__["__extends"])(GlobalErrorHandler, _super);
    function GlobalErrorHandler(errorTermsStoreService, errorMessageService) {
        var _this = _super.call(this) || this;
        _this.errorTermsStoreService = errorTermsStoreService;
        _this.errorMessageService = errorMessageService;
        return _this;
    }
    /**
     * @param {?} error
     * @return {?}
     */
    GlobalErrorHandler.prototype.handleError = /**
     * @param {?} error
     * @return {?}
     */
    function (error) {
        /** @type {?} */
        var errorMsg;
        /** @type {?} */
        var errorCode;
        if (error.status === ZERO) {
            errorMsg = this.errorTermsStoreService.getErrorMessage(error.status);
            this.errorMessageService.PublishError(errorMsg);
        }
        else if (error instanceof common_library__WEBPACK_IMPORTED_MODULE_2__["ApplicationError"]) {
            errorCode = error.errorCode;
            errorMsg = this.errorTermsStoreService.getErrorMessage(errorCode);
            // this.snackBar.openFromComponent(DisplayBannerComponent, {
            //     data: {
            //       message: errorMsg,
            //       icon: ICON_NEGATIVE,
            //       messageType: MESSAGETYPE_NEGATIVE
            //     },
            //     panelClass: [SNACKBAR_NEGATIVE]
            //   });
            // this.errorMessageService.ShowErrorMessage(errorMsg);
        }
        else if (error.rejection instanceof common_library__WEBPACK_IMPORTED_MODULE_2__["ApplicationError"]) {
            errorCode = error.rejection.errorCode;
            errorMsg = this.errorTermsStoreService.getErrorMessage(errorCode);
            this.errorMessageService.ShowErrorMessage(errorMsg);
        }
        else {
            _super.prototype.handleError.call(this, error);
        }
    };
    GlobalErrorHandler.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"] }
    ];
    /** @nocollapse */
    GlobalErrorHandler.ctorParameters = function () { return [
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["ErrorTermsStoreService"] },
        { type: ErrorMessageService }
    ]; };
    return GlobalErrorHandler;
}(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ErrorHandler"]));
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/resource.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ResourceService = /** @class */ (function () {
    function ResourceService(localAppResource, serverStatusService, errorTermsStoreService) {
        this.localAppResource = localAppResource;
        this.serverStatusService = serverStatusService;
        this.errorTermsStoreService = errorTermsStoreService;
    }
    /**
     * @return {?}
     */
    ResourceService.prototype.getMenuResources = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var menu = { headerMenu: [], subHeaderMenu: [], profileItem: [], ebMenu: {}, logo: {}, appInfo: {} };
        menu.headerMenu.push({
            name: this.localAppResource.getResource(MENU.studyList.name),
            url: MENU.studyList.url, moduleName: MENU.studyList.moduleName
        }, {
            name: this.localAppResource.getResource(MENU.runWay.name),
            url: MENU.runWay.url, moduleName: MENU.runWay.moduleName
        }, {
            name: this.localAppResource.getResource(MENU.ant.name),
            url: MENU.ant.url, moduleName: MENU.ant.moduleName
        });
        menu.ebMenu = {
            name: this.localAppResource.getResource(MENU.eb.name),
            url: MENU.eb.url,
            moduleName: MENU.eb.moduleName
        };
        menu.profileItem.push({
            name: this.localAppResource.getResource(MENU.help.name),
            url: MENU.help.url,
            isVisible: true,
            isEnabled: true
        }, {
            name: this.localAppResource.getResource(MENU.password.name),
            url: MENU.password.url,
            isVisible: true,
            isEnabled: false
        }, {
            name: this.localAppResource.getResource(MENU.about.name),
            url: MENU.about.url,
            isVisible: true,
            isEnabled: true
        }, {
            name: this.localAppResource.getResource(MENU.logout.name),
            url: MENU.logout.url,
            isVisible: true,
            isEnabled: true
        });
        menu.subHeaderMenu.push(
        // {
        //   name: this.localAppResource.getResource(MENU.study.name),
        //   url: MENU.study.url,
        //   moduleName: MENU.study.moduleName
        // },
        // {
        //   name: this.localAppResource.getResource(MENU.countries.name),
        //   url: MENU.countries.url,
        //   moduleName: MENU.countries.moduleName
        // },
        // {
        //   name: this.localAppResource.getResource(MENU.sites.name),
        //   url: MENU.sites.url,
        //   moduleName: MENU.sites.moduleName
        // },
        // {
        //   name: this.localAppResource.getResource(MENU.plans.name),
        //   url: MENU.plans.url,
        //   moduleName: MENU.plans.moduleName
        // },
        {
            name: this.localAppResource.getResource(MENU.newStudy.name),
            url: MENU.newStudy.url,
            moduleName: MENU.newStudy.moduleName
        }, {
            name: this.localAppResource.getResource(MENU.newCountries.name),
            url: MENU.newCountries.url,
            moduleName: MENU.newCountries.moduleName
        }, {
            name: this.localAppResource.getResource(MENU.newSites.name),
            url: MENU.newSites.url,
            moduleName: MENU.newSites.moduleName
        }, {
            name: this.localAppResource.getResource(MENU.newPlans.name),
            url: MENU.newPlans.url,
            moduleName: MENU.newPlans.moduleName
        });
        menu.logo = {
            name: this.localAppResource.getResource(MENU.logo.name)
        };
        menu.appInfo = {
            name: this.localAppResource.getResource(MENU.appInfo.name)
        };
        return menu;
    };
    /**
     * @return {?}
     */
    ResourceService.prototype.getPasswordResources = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var password = {
            currentPassword: this.localAppResource.getResource(PASSWORD.currentpsw),
            newPassword: this.localAppResource.getResource(PASSWORD.newpsw),
            confirmPassword: this.localAppResource.getResource(PASSWORD.confirmpsw),
            lengthRule: this.localAppResource.getResource(PASSWORD.lengthRule),
            mixCharRule: this.localAppResource.getResource(PASSWORD.mixCharRule),
            changePassword: this.localAppResource.getResource(PASSWORD.changePassword),
            ok: this.localAppResource.getResource(PASSWORD.ok),
            cancel: this.localAppResource.getResource(PASSWORD.cancel),
            nonEmptyField: this.errorTermsStoreService.getErrorMessage('NonEmptyField'),
            passwordMisMatchMessage: this.errorTermsStoreService.getErrorMessage('PasswordMisMatchMessage')
        };
        return password;
    };
    /**
     * @return {?}
     */
    ResourceService.prototype.getAboutResources = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var buildInfoText = this.localAppResource.getResource(ABOUT.aboutBoxVersion);
        /** @type {?} */
        var serverVersion = this.serverStatusService.serverStatus.patch ?
            this.serverStatusService.serverStatus.patch : this.serverStatusService.serverStatus.serverVersion.content;
        /** @type {?} */
        var serverBuildId = this.serverStatusService.serverStatus.serverBuildID;
        buildInfoText = common_library__WEBPACK_IMPORTED_MODULE_2__["StringUtil"].substitute(buildInfoText, [serverVersion, serverBuildId]);
        /** @type {?} */
        var aboutus = {
            aboutBoxTitle: this.localAppResource.getResource(ABOUT.aboutBoxTitle),
            aboutBoxVersion: buildInfoText,
            // aboutBoxPatch: this.localAppResource.getResource(ABOUT.aboutBoxPatch),
            aboutBoxDisclaimer: this.localAppResource.getResource(ABOUT.aboutBoxDisclaimer),
            logoUrl: 'assets/images/poweredByLogo.png'
        };
        return aboutus;
    };
    /**
     * @return {?}
     */
    ResourceService.prototype.getConfirmationMessageResource = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var confirmationLabels = {
            okLabel: this.localAppResource.getResource(ALERT_TYPE.OkLabel),
            cancelLabel: this.localAppResource.getResource(ALERT_TYPE.CancelLabel),
        };
        return confirmationLabels;
    };
    /**
     * @return {?}
     */
    ResourceService.prototype.getCohortDropDownResource = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var getCohortResouces = {
            mapped_planned_cohort: this.localAppResource.getResource('MAPPED_PLANNED_COHORT'),
            mapped_planned_cohort_tooltip: this.localAppResource.getResource('MAPPED_PLANNED_COHORT_TOOLTIP'),
            mapped_unplanned_cohort: this.localAppResource.getResource('MAPPED_UNPLANNED_COHORT'),
            mapped_unplanned_cohort_tooltip: this.localAppResource.getResource('MAPPED_UNPLANNED_COHORT_TOOLTIP'),
            unmapped_planned_cohort: this.localAppResource.getResource('UNMAPPED_PLANNED_COHORT'),
            unmapped_planned_cohort_tooltip: this.localAppResource.getResource('UNMAPPED_PLANNED_COHORT_TOOLTIP'),
            unmapped_actual_cohort: this.localAppResource.getResource('UNMAPPED_ACTUAL_COHORT'),
            unmapped_actual_cohort_tooltip: this.localAppResource.getResource('UNMAPPED_ACTUAL_COHORT_TOOLTIP'),
            cohort_selectall: this.localAppResource.getResource('COHORT_SELECTALL')
        };
        return getCohortResouces;
    };
    Object.defineProperty(ResourceService.prototype, "getCohortDropDownOptions", {
        get: /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var cohortDropDownResource = this.getCohortDropDownResource();
            return [{
                    name: '',
                    disabled: false,
                    options: [
                        {
                            value: 'All',
                            tooltip: cohortDropDownResource.cohort_selectall,
                            viewValue: cohortDropDownResource.cohort_selectall
                        }
                    ]
                },
                {
                    name: cohortDropDownResource.mapped_planned_cohort,
                    tooltip: cohortDropDownResource.mapped_planned_cohort_tooltip,
                    disabled: false,
                    options: []
                },
                {
                    name: cohortDropDownResource.mapped_unplanned_cohort,
                    tooltip: cohortDropDownResource.mapped_unplanned_cohort_tooltip,
                    disabled: false,
                    options: []
                },
                {
                    name: cohortDropDownResource.unmapped_planned_cohort,
                    tooltip: cohortDropDownResource.unmapped_planned_cohort_tooltip,
                    disabled: false,
                    options: []
                },
                {
                    name: cohortDropDownResource.unmapped_actual_cohort,
                    tooltip: cohortDropDownResource.unmapped_actual_cohort_tooltip,
                    disabled: false,
                    options: []
                }
            ];
        },
        enumerable: true,
        configurable: true
    });
    ResourceService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ResourceService.ctorParameters = function () { return [
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["LocaleAppResourcesService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["ServerStatusService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["ErrorTermsStoreService"] }
    ]; };
    /** @nocollapse */ ResourceService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function ResourceService_Factory() { return new ResourceService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["LocaleAppResourcesService"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["ServerStatusService"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["ErrorTermsStoreService"])); }, token: ResourceService, providedIn: "root" });
    return ResourceService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/common-header.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CommonHeaderService = /** @class */ (function () {
    function CommonHeaderService(appDataService, localeAppResourcesService, userDataService, resourceService, studyListService) {
        this.appDataService = appDataService;
        this.localeAppResourcesService = localeAppResourcesService;
        this.userDataService = userDataService;
        this.resourceService = resourceService;
        this.studyListService = studyListService;
        this.menu = this.resourceService.getMenuResources();
        this.aboutResource = this.resourceService.getAboutResources();
        this.passwordResource = this.resourceService.getPasswordResources();
        this.logoUrl = this.menu.logo;
        this.appInfoUrl = this.menu.appInfo.name;
    }
    Object.defineProperty(CommonHeaderService.prototype, "menu", {
        get: /**
         * @return {?}
         */
        function () {
            return this._menu;
        },
        set: /**
         * @param {?} menuResources
         * @return {?}
         */
        function (menuResources) {
            this._menu = menuResources;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommonHeaderService.prototype, "mainHeaderItems", {
        get: /**
         * @return {?}
         */
        function () {
            return this._mainHeaderItems;
        },
        set: /**
         * @param {?} mainHeaderItems
         * @return {?}
         */
        function (mainHeaderItems) {
            this._mainHeaderItems = mainHeaderItems;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommonHeaderService.prototype, "subHeaderItems", {
        get: /**
         * @return {?}
         */
        function () {
            return this._subHeaderItems;
        },
        set: /**
         * @param {?} subHeaderItems
         * @return {?}
         */
        function (subHeaderItems) {
            this._subHeaderItems = subHeaderItems;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommonHeaderService.prototype, "aboutResource", {
        get: /**
         * @return {?}
         */
        function () {
            return this._aboutResource;
        },
        set: /**
         * @param {?} aboutResource
         * @return {?}
         */
        function (aboutResource) {
            this._aboutResource = aboutResource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommonHeaderService.prototype, "passwordResource", {
        get: /**
         * @return {?}
         */
        function () {
            return this._passwordResource;
        },
        set: /**
         * @param {?} passwordResource
         * @return {?}
         */
        function (passwordResource) {
            this._passwordResource = passwordResource;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommonHeaderService.prototype, "userProfile", {
        get: /**
         * @return {?}
         */
        function () {
            return this._userProfile;
        },
        set: /**
         * @param {?} userProfile
         * @return {?}
         */
        function (userProfile) {
            this._userProfile = userProfile;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommonHeaderService.prototype, "logoUrl", {
        get: /**
         * @return {?}
         */
        function () {
            return this._logoUrl;
        },
        set: /**
         * @param {?} LogoName
         * @return {?}
         */
        function (LogoName) {
            this._logoUrl = GSK_LOGO_URL + LogoName;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommonHeaderService.prototype, "appInfoUrl", {
        get: /**
         * @return {?}
         */
        function () {
            return this._appInfoUrl;
        },
        set: /**
         * @param {?} appInfoUrl
         * @return {?}
         */
        function (appInfoUrl) {
            this._appInfoUrl = GSK_LOGO_URL + appInfoUrl;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    CommonHeaderService.prototype.getAppData = /**
     * @return {?}
     */
    function () {
        return this.appDataService.getAppData();
    };
    /**
     * @param {?=} actionParam
     * @return {?}
     */
    CommonHeaderService.prototype.getUserData = /**
     * @param {?=} actionParam
     * @return {?}
     */
    function (actionParam) {
        return this.userDataService.getUserData(USER_PARAMS, actionParam);
    };
    Object.defineProperty(CommonHeaderService.prototype, "alertConfirmUrl", {
        get: /**
         * @return {?}
         */
        function () {
            return ALERT_CONFIRM_URL;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(CommonHeaderService.prototype, "studyRefreshDateLabel", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localeAppResourcesService.getResource('LastStudyUpdate');
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} studyListOptionTemplate
     * @param {?=} actionParam
     * @return {?}
     */
    CommonHeaderService.prototype.getStudyInputResource = /**
     * @param {?} studyListOptionTemplate
     * @param {?=} actionParam
     * @return {?}
     */
    function (studyListOptionTemplate, actionParam) {
        return {
            placeholder: this.localeAppResourcesService.getResource('StudyListSearch'),
            recentListItemsLabel: this.localeAppResourcesService.getResource('MRUStudiesView'),
            allListItemsLabel: this.localeAppResourcesService.getResource('AllStudiesView'),
            optionTemplate: studyListOptionTemplate,
            searchApi: this.getStudyTagListFunction(actionParam),
            selectedItemKey: this.userDataService.getLastVisitedStudyKey(),
            studyListHeaderLabel: this.localeAppResourcesService.getResource('StudyListHeader')
        };
    };
    /**
     * @param {?=} actionParam
     * @return {?}
     */
    CommonHeaderService.prototype.getStudyTagListFunction = /**
     * @param {?=} actionParam
     * @return {?}
     */
    function (actionParam) {
        var _this = this;
        return (/**
         * @param {?} searchCriteria
         * @return {?}
         */
        function (searchCriteria) { return _this.studyListService.getStudyTagList(searchCriteria, actionParam); });
    };
    /**
     * @param {?} data
     * @return {?}
     */
    CommonHeaderService.prototype.setHeaderItems = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        /** @type {?} */
        var headerItems = new Array();
        this.menu.headerMenu.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            headerItems.push(new common_library__WEBPACK_IMPORTED_MODULE_2__["ListItem"](item.name, item.url, item.moduleName));
        }));
        if (data.appMetadata.isEBLicensed) {
            headerItems.push(new common_library__WEBPACK_IMPORTED_MODULE_2__["ListItem"](this.menu.ebMenu.name, this.menu.ebMenu.url, this.menu.ebMenu.moduleName));
        }
        this.mainHeaderItems = headerItems;
    };
    /**
     * @param {?} studyRefreshDate
     * @return {?}
     */
    CommonHeaderService.prototype.checkIfAllDataAvailable = /**
     * @param {?} studyRefreshDate
     * @return {?}
     */
    function (studyRefreshDate) {
        return (this.userProfile !== undefined && this.mainHeaderItems !== undefined
            && this.subHeaderItems !== undefined && studyRefreshDate !== undefined);
    };
    /**
     * @param {?} SUB_HEADER_ITEMS
     * @return {?}
     */
    CommonHeaderService.prototype.getSubHeaderItems = /**
     * @param {?} SUB_HEADER_ITEMS
     * @return {?}
     */
    function (SUB_HEADER_ITEMS) {
        /** @type {?} */
        var subHeaderItems = new Array();
        SUB_HEADER_ITEMS.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            subHeaderItems.push(new common_library__WEBPACK_IMPORTED_MODULE_2__["ListItem"](item.name, item.url, item.moduleName));
        }));
        this.subHeaderItems = subHeaderItems;
    };
    /**
     * @param {?} data
     * @param {?} PROFILE_ITEMS
     * @return {?}
     */
    CommonHeaderService.prototype.setUserProfile = /**
     * @param {?} data
     * @param {?} PROFILE_ITEMS
     * @return {?}
     */
    function (data, PROFILE_ITEMS) {
        /** @type {?} */
        var passwordResourceLabel = this.localeAppResourcesService.getResource('HeaderChangePassword');
        if (data.hasOwnProperty('user')
            && data.user.hasOwnProperty('authenticationScheme')
            && data.user.authenticationScheme === 'DB') {
            /** @type {?} */
            var passwordItem = PROFILE_ITEMS.find((/**
             * @param {?} item
             * @return {?}
             */
            function (item) {
                return item.name === passwordResourceLabel;
            }));
            passwordItem.isEnabled = true;
        }
        /** @type {?} */
        var userName = this.userDataService.getUserName();
        /** @type {?} */
        var profileItems = new Array();
        PROFILE_ITEMS.forEach((/**
         * @param {?} item
         * @return {?}
         */
        function (item) {
            profileItems.push(new common_library__WEBPACK_IMPORTED_MODULE_2__["ListItem"](item.name, item.url, null, item.isEnabled, item.isVisible));
        }));
        this.userProfile = new common_library__WEBPACK_IMPORTED_MODULE_2__["UserProfile"](userName, profileItems, ' ');
    };
    CommonHeaderService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    CommonHeaderService.ctorParameters = function () { return [
        { type: AppDataService },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["LocaleAppResourcesService"] },
        { type: UserDataService },
        { type: ResourceService },
        { type: StudyListService }
    ]; };
    /** @nocollapse */ CommonHeaderService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function CommonHeaderService_Factory() { return new CommonHeaderService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(AppDataService), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["LocaleAppResourcesService"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(UserDataService), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(ResourceService), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(StudyListService)); }, token: CommonHeaderService, providedIn: "root" });
    return CommonHeaderService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/column-preference.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var ColumnPreferenceService = /** @class */ (function () {
    function ColumnPreferenceService(userDataService) {
        this.userDataService = userDataService;
        this.userDataSubject = new rxjs__WEBPACK_IMPORTED_MODULE_11__["BehaviorSubject"](null);
        this.getUserData();
    }
    /**
     * @return {?}
     */
    ColumnPreferenceService.prototype.getUserData = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // self.userDataService.getUserData(USER_PARAMS, USER_ACTION_PARAMS).pipe(take(1)).subscribe((userData) => {
        //     self.studyHeaderService.initializeHeader(self.studyListOptionTemplate, self.subscriptions);
        //     self.tabItems = self.studyService.getTabItems();
        //     this.studyService.loadStudyData();
        //     this.setStudyGeoListFilters();
        //     // TODO: move into app constants
        //     self.defaultSelectedCohort = DEFAULT_SELECTED_COHORT;
        //     // TODO: check for study change
        //     self.setUpCohortData();
        //   });
        /** @type {?} */
        var userDataSubscription = this.userDataService.getUserData(USER_PARAMS, USER_ACTION_PARAMS)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["take"])(1))
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.userDataSubject.next(data);
            if (userDataSubscription) {
                console.log('userDataSubscription is defined : ', data);
                userDataSubscription.unsubscribe();
            }
            else {
                console.log('userDataSubscription is undefined : ', data);
            }
        }));
    };
    /**
     * @return {?}
     */
    ColumnPreferenceService.prototype.getPrefForGridColumns = /**
     * @return {?}
     */
    function () {
        return JSON.parse(JSON.stringify(this.userDataService.getPreferencesByCategory(PreferenceCategory.PreferenceGridColumns)));
    };
    /**
     * @return {?}
     */
    ColumnPreferenceService.prototype.refreshPreferenceData = /**
     * @return {?}
     */
    function () {
        this.getUserData();
    };
    /**
     * @return {?}
     */
    ColumnPreferenceService.prototype.getGridPreference = /**
     * @return {?}
     */
    function () {
        return this.userDataSubject.asObservable();
    };
    /**
     * @param {?} gridPrefString
     * @param {?} gridToUpdate
     * @param {?=} pageName
     * @param {?=} studyKey
     * @param {?=} module
     * @return {?}
     */
    ColumnPreferenceService.prototype.sendUpdateColumnPrefRequest = /**
     * @param {?} gridPrefString
     * @param {?} gridToUpdate
     * @param {?=} pageName
     * @param {?=} studyKey
     * @param {?=} module
     * @return {?}
     */
    function (gridPrefString, gridToUpdate, pageName, studyKey, module) {
        var _this = this;
        /** @type {?} */
        var preferences = this.getPrefForGridColumns();
        if (!preferences || preferences === null) {
            preferences = DEFAULT_PREFERENCE_GRID_COLUMN;
        }
        preferences[PreferenceCategory.PreferenceGridColumns][gridToUpdate] = gridPrefString;
        //   const updatePrefSubscription = this.userDataService
        //       .updatePreferencesByCategory(preferences)
        //       .pipe(debounceTime(500))
        //       .subscribe(data => {
        //           if (data) {
        //               this.refreshPreferenceData();
        //           }
        //           if (updatePrefSubscription) {
        //               console.log('updatePrefSubscription is defined : ', data);
        //               updatePrefSubscription.unsubscribe();
        //           } else {
        //               console.log('updatePrefSubscription is undefined : ', data);
        //           }
        //       });
        /** @type {?} */
        var updatePrefSubscription = this.userDataService.updateUserPreference(preferences, UPDATE_USER_PREFERENCE_ACTION_PARAMS).
            pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["debounceTime"])(500))
            .subscribe((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            if (data) {
                _this.refreshPreferenceData();
            }
            if (updatePrefSubscription) {
                console.log('updatePrefSubscription is defined : ', data);
                updatePrefSubscription.unsubscribe();
            }
            else {
                console.log('updatePrefSubscription is undefined : ', data);
            }
        }));
    };
    ColumnPreferenceService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    ColumnPreferenceService.ctorParameters = function () { return [
        { type: UserDataService }
    ]; };
    /** @nocollapse */ ColumnPreferenceService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function ColumnPreferenceService_Factory() { return new ColumnPreferenceService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(UserDataService)); }, token: ColumnPreferenceService, providedIn: "root" });
    return ColumnPreferenceService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/so-common-library.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SoCommonLibraryModule = /** @class */ (function () {
    function SoCommonLibraryModule() {
    }
    SoCommonLibraryModule.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"], args: [{
                    imports: [ComponentsModule, common_library__WEBPACK_IMPORTED_MODULE_2__["CommonLibraryModule"], common_library__WEBPACK_IMPORTED_MODULE_2__["CommonAngularMaterialModule"]],
                    exports: [ComponentsModule],
                    declarations: [],
                    providers: [
                        AppBootstrapService,
                        _angular_common__WEBPACK_IMPORTED_MODULE_0__["DecimalPipe"],
                        MilestoneGraphService,
                        PlanOptionsService,
                        CTOSPlanChartLegendService,
                        ReportsService,
                        AuthGuard,
                        ErrorMessageService,
                        GlobalErrorHandler,
                        LoadingScreenService,
                        CommonHeaderService,
                        ColumnPreferenceService
                    ],
                    entryComponents: []
                },] }
    ];
    return SoCommonLibraryModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/study-summary.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var StudySummaryService = /** @class */ (function () {
    /**
     * Creates an instance of study summary service.
     * @param payloadCommandService
     * @param baseConnectionService
     * @param localeAppResourcesService
     */
    function StudySummaryService(payloadCommandService, baseConnectionService) {
        this.payloadCommandService = payloadCommandService;
        this.baseConnectionService = baseConnectionService;
        this.studySummaryData = {};
        this.sourceSummaryData = {};
        console.log('SO COMMON LIB Study Summary service constructor called');
    }
    /**
     * Gets study summary
     * @param studyKey
     * @param [baseParam]
     * @returns study summary
     */
    /**
     * Gets study summary
     * @param {?} studyKey
     * @param {?=} baseParam
     * @return {?} study summary
     */
    StudySummaryService.prototype.getStudySummary = /**
     * Gets study summary
     * @param {?} studyKey
     * @param {?=} baseParam
     * @return {?} study summary
     */
    function (studyKey, baseParam) {
        return this.getStudySummaryDetails(studyKey, baseParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
         * @param {?} resp
         * @return {?}
         */
        function (resp) {
            return resp;
        })));
    };
    /**
     * Gets study summary details
     * @param studyKey
     * @param [baseParam]
     * @returns
     */
    /**
     * Gets study summary details
     * @param {?} studyKey
     * @param {?=} baseParam
     * @return {?}
     */
    StudySummaryService.prototype.getStudySummaryDetails = /**
     * Gets study summary details
     * @param {?} studyKey
     * @param {?=} baseParam
     * @return {?}
     */
    function (studyKey, baseParam) {
        var _this = this;
        /** @type {?} */
        var studyParam = {
            commandName: STUDYSUMMARY_COMMAND.commandName,
            param: {
                studyKey: studyKey
            }
        };
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var moduleInfo = CTOSUtil.getModuleInfo('PLANCARD', studyKey);
        // const planListPayLoad = that.payloadCommandService.getCommandDetails(
        //   studyParam.commandName,
        //   studyParam.param,
        //   null,
        //   null,
        //   moduleInfo
        // );
        /** @type {?} */
        var payload = this.payloadCommandService.getApiRequest(studyParam.commandName, studyParam.param, null, moduleInfo);
        /** @type {?} */
        var actionParam = {};
        if (!baseParam) {
            baseParam = actionParam;
        }
        baseParam.url = common_library__WEBPACK_IMPORTED_MODULE_2__["APIEndPoints"].STUDY_SUMMARY;
        // baseParam.cacheKey =
        //   CacheKey.GetStudySummary + '_' + studyParam.param.studyKey;
        // return that.baseConnectionService
        //   .sendRequest(payload, baseParam)
        //   .pipe(
        //     map(resp => {
        //       this.studySummaryData = resp;
        //       return resp.studySummary;
        //     })
        //   );
        return this.baseConnectionService
            .send(payload, baseParam)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
         * @param {?} response
         * @return {?}
         */
        function (response) {
            _this.studySummaryData = response;
            return response.studySummary;
        })));
    };
    StudySummaryService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"] }
    ];
    /** @nocollapse */
    StudySummaryService.ctorParameters = function () { return [
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["PayloadCommandService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"] }
    ]; };
    return StudySummaryService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/plan.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var PlanService = /** @class */ (function () {
    function PlanService(baseConnectionService, payloadCommandService) {
        this.baseConnectionService = baseConnectionService;
        this.payloadCommandService = payloadCommandService;
    }
    /**
     * @param {?} planParam
     * @param {?=} baseParam
     * @return {?}
     */
    PlanService.prototype.getPlanList = /**
     * @param {?} planParam
     * @param {?=} baseParam
     * @return {?}
     */
    function (planParam, baseParam) {
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var moduleInfo = CTOSUtil.getModuleInfo(null, planParam.param.studyKey);
        /** @type {?} */
        var planListPayLoad = that.payloadCommandService.getCommandDetails(planParam.commandName, planParam.param, null, null, moduleInfo);
        return that.baseConnectionService.sendRequest(planListPayLoad, {
            cacheKey: common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].GetPlanListKey + '_' + planParam.param.studyKey
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
         * @param {?} resp
         * @return {?}
         */
        function (resp) {
            return resp;
        })));
    };
    /**
     * @param {?} studyParam
     * @param {?=} baseParam
     * @return {?}
     */
    PlanService.prototype.getStudySummary = /**
     * @param {?} studyParam
     * @param {?=} baseParam
     * @return {?}
     */
    function (studyParam, baseParam) {
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var moduleInfo = CTOSUtil.getModuleInfo(null, studyParam.param.studyKey);
        /** @type {?} */
        var planListPayLoad = that.payloadCommandService.getCommandDetails(studyParam.commandName, studyParam.param, null, null, moduleInfo);
        return that.baseConnectionService.sendRequest(planListPayLoad, {
            cacheKey: common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].GetStudySummary + '_' + studyParam.param.studyKey
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
         * @param {?} resp
         * @return {?}
         */
        function (resp) {
            return resp.studySummary.studyThumbnail;
            // const obj = {
            //   id: 1,
            //   phase: 'mock'
            // };
            // return obj;
        })));
    };
    /**
     * @param {?} planParam
     * @param {?=} baseParam
     * @return {?}
     */
    PlanService.prototype.getStudyPlan = /**
     * @param {?} planParam
     * @param {?=} baseParam
     * @return {?}
     */
    function (planParam, baseParam) {
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var moduleInfo = CTOSUtil.getModuleInfo(null, planParam.param.studyKey);
        /** @type {?} */
        var planListPayLoad = that.payloadCommandService.getCommandDetails(planParam.commandName, planParam.param, null, null, moduleInfo);
        return that.baseConnectionService.sendRequest(planListPayLoad, {
            cacheKey: common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].GetStudyPlanKey + '_' + planParam.param.studyKey + '_' +
                planParam.param.planKey
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
         * @param {?} resp
         * @return {?}
         */
        function (resp) {
            return resp.studyPlan.studyPlanParams;
        })));
    };
    /**
     * @param {?} planParam
     * @param {?=} baseParam
     * @return {?}
     */
    PlanService.prototype.updateStudyPlan = /**
     * @param {?} planParam
     * @param {?=} baseParam
     * @return {?}
     */
    function (planParam, baseParam) {
        /** @type {?} */
        var that = this;
        /** @type {?} */
        var moduleInfo = CTOSUtil.getModuleInfo(null, planParam.param.studyKey);
        /** @type {?} */
        var planListPayLoad = that.payloadCommandService.getCommandDetails(planParam.commandName, planParam.param, {}, planParam.commandtags, moduleInfo);
        return that.baseConnectionService.sendRequest(planListPayLoad, {
            cacheKey: common_library__WEBPACK_IMPORTED_MODULE_2__["CacheKey"].updatePlantList + '_' + planParam.param.studyKey + '_' +
                planParam.param.planKey,
            dependencyList: baseParam.dependencyList
        }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_12__["map"])((/**
         * @param {?} resp
         * @return {?}
         */
        function (resp) {
            return resp.planList.planThumbnail;
        })));
    };
    PlanService.decorators = [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"], args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    PlanService.ctorParameters = function () { return [
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["PayloadCommandService"] }
    ]; };
    /** @nocollapse */ PlanService.ngInjectableDef = Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵdefineInjectable"])({ factory: function PlanService_Factory() { return new PlanService(Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"]), Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ɵɵinject"])(common_library__WEBPACK_IMPORTED_MODULE_2__["PayloadCommandService"])); }, token: PlanService, providedIn: "root" });
    return PlanService;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/environment-param.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function EnvironmentParam() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/study-tag.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function StudyTag() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/user-action.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function UserAction() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/milestone-graph/IChartType.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
    currently no used but can be standardised to have common interface
    which can be implemented by common components
 */
/**
 * @record
 */
function IChartType() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/plan-dropdown-list/plan-dropdown-list-item.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function PlanDropdownListItem() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/plan-dropdown-list/plan-status.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function PlanStatus$1() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ctos-plan-chart/AreaPoint.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AreaPoint = /** @class */ (function () {
    function AreaPoint() {
    }
    return AreaPoint;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ctos-plan-chart/AreaPoint1.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var AreaPoint1 = /** @class */ (function () {
    function AreaPoint1() {
    }
    return AreaPoint1;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ctos-plan-chart/DataPoint.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DataPoint = /** @class */ (function () {
    function DataPoint(date, subjects) {
        this.name = date;
        this.value = subjects;
    }
    return DataPoint;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/ctos-plan-chart/Marker.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var Marker = /** @class */ (function () {
    function Marker(id, code, name, value, date, desc, pname, axis, scalex, scaley, color, did) {
        this.id = id;
        this.code = code;
        this.name = name;
        this.value = value;
        this.date = date;
        this.description = desc;
        this.pname = pname;
        this.axis = axis;
        this.scaleX = scalex;
        this.scaleY = scaley;
        this.color = color;
        this.descriptionId = did;
    }
    return Marker;
}());
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/plan-details.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function PlanDetails() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/plan-reports.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function PlanReport() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/study-summary-info.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function StudySummaryInfo() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/study-summary-mile-stone.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function StudySummaryMileStone() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/models/geo-filter.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @record
 */
function GeoFilter() { }
if (false) {}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/utils/ag-grid-constant.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var AGGRIDROWS = '.ag-row';
/** @type {?} */
var GRIDROWHEIGHT = 48;
/** @enum {string} */
var DOMLAYOUT = {
    auto: "autoHeight",
    normal: "normal",
};
/** @enum {string} */
var DYNAMICGRIDCONTAINER = {
    top: "-19px",
    topnone: "0px",
};
/** @enum {string} */
var MEASUREMENT = {
    HEIGHT: "height",
    OFFSETHEIGHT: "offsetHeight",
    OFFSETTOP: "offsetTop",
};
/** @type {?} */
var GRIDCONFIG = {
    rowHeight: 48,
    headerHeight: 73,
    minHeight: 150,
    margin: 50,
    bufferPixel: 18,
    fixedRowCount: 5
};
/** @enum {string} */
var GROUP_ACTIONS = {
    EXPAND: "expand",
    COLLAPSE: "collapse",
};

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/ARTBValidator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$8 = moment__WEBPACK_IMPORTED_MODULE_13__;
/**
 * Validator function to validate the ARTB.
 * @param {?} ARTBFieldName - ARTB field name
 * @param {?=} FSIFieldName -FSI field name or value
 * @param {?=} FSIIsValue - boolean field to indicate if the FSIFieldName is name of the field or value
 * @param {?=} FSSFieldName -FSS field name or value
 * @param {?=} FSSIsValue - boolean field to indicate if the FSSFieldName is name of the field or value
 * @return {?}
 */
function ARTBValidator(ARTBFieldName, FSIFieldName, FSIIsValue, FSSFieldName, FSSIsValue) {
    if (FSIIsValue === void 0) { FSIIsValue = true; }
    if (FSSIsValue === void 0) { FSSIsValue = true; }
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var returnVal = null;
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var errors = {};
        /** @type {?} */
        var ARTB;
        /** @type {?} */
        var FSI;
        /** @type {?} */
        var FSS;
        if (ARTBFieldName !== undefined && ARTBFieldName !== null) {
            /** @type {?} */
            var ARTBControl = control.get(ARTBFieldName);
            if (ARTBControl && ARTBControl.enabled &&
                !(ARTBControl.invalid && ARTBControl.errors && ARTBControl.errors.matDatepickerParse)) {
                if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(ARTBControl.value)) {
                    ARTB = moment$8(ARTBControl.value);
                    if (FSIFieldName !== undefined && FSIFieldName !== null) {
                        // let FSI;
                        if (FSIIsValue) {
                            FSI = FSIFieldName;
                        }
                        else {
                            /** @type {?} */
                            var FSIControl = control.get(FSIFieldName);
                            if (FSIControl && FSIControl.valid && common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(FSIControl.value)) {
                                FSI = moment$8(FSIControl.value);
                            }
                        }
                        // if (FSI !== undefined && FSI !== null) {
                        //     const greaterThanFSI = checkForARTBGreaterThanFSI(ARTB, FSI);
                        //     if (greaterThanFSI) {
                        //         Object.assign(errors, greaterThanFSI);
                        //     }
                        // }
                    }
                    if (FSSFieldName !== undefined && FSSFieldName !== null) {
                        // let FSS;
                        if (FSSIsValue) {
                            FSS = FSSFieldName;
                        }
                        else {
                            /** @type {?} */
                            var FSSControl = control.get(FSSFieldName);
                            if (FSSControl && (FSSControl.valid || FSSControl.disabled) && common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(FSSControl.value)) {
                                FSS = moment$8(FSSControl.value);
                            }
                        }
                        // if (FSS !== undefined && FSS !== null) {
                        //     const greaterThanFSS = checkForARTBGreaterThanFSS(ARTB, FSS);
                        //     if (greaterThanFSS) {
                        //         Object.assign(errors, greaterThanFSS);
                        //     }
                        // }
                    }
                    /** @type {?} */
                    var errorsFromValidator = ValidateARTB(ARTB, FSI, FSS);
                    if (errorsFromValidator) {
                        Object.assign(errors, errorsFromValidator);
                    }
                }
            }
        }
        if (Object.keys(errors).length !== 0) {
            control.get(ARTBFieldName).setErrors(errors);
            returnVal = {};
            returnVal[ARTBFieldName] = errors;
        }
        else {
            /** @type {?} */
            var ARTBControl = control.get(ARTBFieldName);
            if (ARTBControl) {
                if (!(ARTBControl.invalid && ARTBControl.errors && ARTBControl.errors.matDatepickerParse)) {
                    control.get(ARTBFieldName).setErrors(null);
                }
            }
        }
        return returnVal;
    });
}
/**
 * @param {?} ARTB
 * @param {?} FSI
 * @param {?} FSS
 * @return {?}
 */
function ValidateARTB(ARTB, FSI, FSS) {
    /** @type {?} */
    var errors = {};
    if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(ARTB)) {
        ARTB = moment$8(ARTB);
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(FSI)) {
            FSI = moment$8(FSI);
            if (FSI !== undefined && FSI !== null) {
                /** @type {?} */
                var greaterThanFSI = checkForARTBGreaterThanFSI(ARTB, FSI);
                if (greaterThanFSI) {
                    Object.assign(errors, greaterThanFSI);
                }
            }
        }
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(FSS)) {
            FSS = moment$8(FSS);
            if (FSS !== undefined && FSS !== null) {
                /** @type {?} */
                var greaterThanFSS = checkForARTBGreaterThanFSS(ARTB, FSS);
                if (greaterThanFSS) {
                    Object.assign(errors, greaterThanFSS);
                }
            }
        }
    }
    return errors;
}
/**
 * @param {?} ARTB
 * @param {?} FSI
 * @return {?}
 */
function checkForARTBGreaterThanFSI(ARTB, FSI) {
    if (ARTB.isAfter(FSI)) {
        return null;
    }
    else {
        return {
            ARTB_LT_EQ_FSI: { ARTB_LT_EQ_FSI: FSI }
        };
    }
}
/**
 * @param {?} ARTB
 * @param {?} FSS
 * @return {?}
 */
function checkForARTBGreaterThanFSS(ARTB, FSS) {
    if (ARTB.isAfter(FSS)) {
        return null;
    }
    else {
        return {
            ARTB__LT_EQ_FSS: { ARTB__LT_EQ_FSS: FSS }
        };
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/DaysFromFSIValidator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$9 = moment__WEBPACK_IMPORTED_MODULE_13__;
/**
 * Validator function to validate the days from FSI for a given site against any other site.
 * @param {?} daysFieldName - the days from SFI field name for a site to validate
 * @param {?=} minValue
 * @param {?=} previousSiteDaysFieldName - the days from FSI field name or value for any previous site to validate against
 * @param {?=} previousSiteDaysIsValue - boolean field to indicate if the previousSiteDaysFieldName is name of the field or value
 * In case of validators with more than two fields the validation to be skipped should be sent as undefined.
 * for eg. validator for country FSI would contain parameters for stuyd FSI and TLSS fields.
 * if the parameter sequence for FSIValidator is
 * (countryFSIFieldName, studyFSIFieldName, studyFSIIsValue, TLSSFieldName, TLSSIsValue)
 * and the validation for study FSI needs to be skipped then the calling arguments would be
 * (countryFSIFieldName, undefined, false, TLSSFieldName, TLSSIsValue)
 * @param {?=} nextSiteDaysFieldName
 * @param {?=} nextSiteDaysIsValue
 * @param {?=} enddateFieldName
 * @param {?=} enddateIsValue
 * @param {?=} TLSSFieldName
 * @param {?=} TLSSIsValue
 * @return {?}
 */
function DaysFromFSIValidator(daysFieldName, minValue, previousSiteDaysFieldName, previousSiteDaysIsValue, nextSiteDaysFieldName, nextSiteDaysIsValue, enddateFieldName, enddateIsValue, TLSSFieldName, TLSSIsValue) {
    if (previousSiteDaysIsValue === void 0) { previousSiteDaysIsValue = true; }
    if (nextSiteDaysIsValue === void 0) { nextSiteDaysIsValue = true; }
    if (enddateIsValue === void 0) { enddateIsValue = true; }
    if (TLSSIsValue === void 0) { TLSSIsValue = true; }
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var returnVal = null;
        /** @type {?} */
        var previousSiteDays = null;
        /** @type {?} */
        var nextSiteDays = null;
        /** @type {?} */
        var enddate = null;
        /** @type {?} */
        var TLSS = null;
        /** @type {?} */
        var daysControl = null;
        /** @type {?} */
        var errors = null;
        if (daysFieldName !== undefined && daysFieldName !== null) {
            daysControl = (/** @type {?} */ (control.get(daysFieldName)));
            if (daysControl) {
                errors = initializeErrorsObject(errors, daysControl);
                /** @type {?} */
                var days = daysControl.value;
                if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(days, true)) {
                    if (previousSiteDaysFieldName !== undefined &&
                        previousSiteDaysFieldName !== null) {
                        if (previousSiteDaysIsValue) {
                            previousSiteDays = previousSiteDaysFieldName;
                        }
                        else {
                            /** @type {?} */
                            var previousSiteDaysControl = control.get(previousSiteDaysFieldName);
                            if (previousSiteDaysControl) {
                                previousSiteDays = previousSiteDaysControl.value;
                            }
                        }
                    }
                    if (nextSiteDaysFieldName !== undefined &&
                        nextSiteDaysIsValue !== null) {
                        if (nextSiteDaysIsValue) {
                            nextSiteDays = nextSiteDaysFieldName;
                        }
                        else {
                            /** @type {?} */
                            var nextSiteDaysControl = control.get(nextSiteDaysFieldName);
                            if (nextSiteDaysControl) {
                                nextSiteDays = nextSiteDaysControl.value;
                            }
                        }
                    }
                    if (enddateFieldName !== undefined && enddateIsValue !== null) {
                        if (enddateIsValue) {
                            enddate = moment$9(enddateFieldName);
                        }
                        else {
                            /** @type {?} */
                            var enddateControl = control.get(enddateFieldName);
                            if (enddateControl &&
                                (enddateControl.enabled ? enddateControl.valid : true) &&
                                common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(enddateControl.value)) {
                                enddate = moment$9(enddateControl.value, common_library__WEBPACK_IMPORTED_MODULE_2__["VALID_DATE_FORMATS"], true);
                            }
                        }
                    }
                    if (TLSSFieldName !== undefined && TLSSIsValue !== null) {
                        if (TLSSIsValue) {
                            TLSS = moment$9(TLSSFieldName);
                        }
                        else {
                            /** @type {?} */
                            var TLSSControl = control.get(TLSSFieldName);
                            if (TLSSControl &&
                                (TLSSControl.enabled ? TLSSControl.valid : true) &&
                                common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(TLSSControl.value)) {
                                TLSS = moment$9(TLSSControl.value, common_library__WEBPACK_IMPORTED_MODULE_2__["VALID_DATE_FORMATS"], true);
                            }
                        }
                    }
                    /** @type {?} */
                    var errorsFromValidator = ValidateDaysFromFSI(days, previousSiteDays, nextSiteDays, minValue, enddate, TLSS);
                    if (errorsFromValidator) {
                        Object.assign(errors, errorsFromValidator);
                    }
                    if (Object.keys(errors).length !== 0) {
                        daysControl.setErrors(errors);
                        returnVal = {};
                        returnVal[daysFieldName] = errors;
                    }
                    else {
                        daysControl.setErrors(null);
                    }
                }
            }
        }
        return returnVal;
    });
}
/**
 * @param {?} errors
 * @param {?} daysControl
 * @return {?}
 */
function initializeErrorsObject(errors, daysControl) {
    errors = daysControl.errors;
    if (!errors) {
        errors = {};
    }
    if (errors.ltPrevError) {
        delete errors.ltPrevError;
    }
    if (errors.gtnextError) {
        delete errors.gtnextError;
    }
    if (errors.SIDateError) {
        delete errors.SIDateError;
    }
    if (errors.min) {
        delete errors.min;
    }
    return errors;
}
/**
 * @param {?} currentDaysFromFSI
 * @param {?} prevDaysFromFSI
 * @param {?} nextDaysFromFSI
 * @param {?} minValue
 * @param {?=} enddate
 * @param {?=} TLSS
 * @return {?}
 */
function ValidateDaysFromFSI(currentDaysFromFSI, prevDaysFromFSI, nextDaysFromFSI, minValue, enddate, TLSS) {
    /** @type {?} */
    var errors = {};
    if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(currentDaysFromFSI, true)) {
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(minValue, true)) {
            /** @type {?} */
            var minValueError = checkForMinValue(currentDaysFromFSI, minValue);
            if (minValueError) {
                Object.assign(errors, minValueError);
            }
        }
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(prevDaysFromFSI, true)) {
            /** @type {?} */
            var greaterThanEqualToPreviousSite = checkForDaysFromFSIGreaterThanEqualToPreviousSite(currentDaysFromFSI, prevDaysFromFSI);
            if (greaterThanEqualToPreviousSite) {
                Object.assign(errors, greaterThanEqualToPreviousSite);
            }
        }
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(nextDaysFromFSI, true)) {
            /** @type {?} */
            var lessThanEqualToNextSite = checkForDaysFromFSILessThanEqualToNextSite(currentDaysFromFSI, nextDaysFromFSI);
            if (lessThanEqualToNextSite) {
                Object.assign(errors, lessThanEqualToNextSite);
            }
        }
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(enddate) && common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(TLSS)) {
            enddate = moment$9(enddate);
            TLSS = moment$9(TLSS);
            /** @type {?} */
            var enddateLessThanTLSS = checkForEnddateLessThanTLSS(enddate, TLSS);
            if (enddateLessThanTLSS) {
                Object.assign(errors, enddateLessThanTLSS);
            }
        }
    }
    return errors;
}
/**
 * @param {?} days1
 * @param {?} days2
 * @return {?}
 */
function checkForDaysFromFSIGreaterThanEqualToPreviousSite(days1, days2) {
    if (Number(days1) >= Number(days2)) {
        return null;
    }
    else {
        return {
            ltPrevError: true
        };
    }
}
/**
 * @param {?} days1
 * @param {?} days2
 * @return {?}
 */
function checkForDaysFromFSILessThanEqualToNextSite(days1, days2) {
    if (Number(days1) <= Number(days2)) {
        return null;
    }
    else {
        return {
            gtnextError: true
        };
    }
}
/**
 * @param {?} days
 * @param {?} minValue
 * @return {?}
 */
function checkForMinValue(days, minValue) {
    if (Number(days) < Number(minValue)) {
        return { min: { min: minValue } };
    }
    return null;
}
/**
 * @param {?} enddate
 * @param {?} TLSS
 * @return {?}
 */
function checkForEnddateLessThanTLSS(enddate, TLSS) {
    if (enddate.isSameOrBefore(TLSS)) {
        return null;
    }
    else {
        return {
            SIDateError: true
        };
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/EndDateValidator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$a = moment__WEBPACK_IMPORTED_MODULE_13__;
/**
 * Validator function to validate the End date.
 * @param {?} endDateFieldName - end date field name for a site
 * @param {?} previousSiteEndDateFieldName - previous site end date field name or value
 * @param {?=} previousSiteEndDateIsValue - boolean field to indicate if the previousSiteEndDateFieldName is name of the field or value
 * @param {?=} TLSSFieldName - TLSS field name or value
 * @param {?=} TLSSIsValue - boolean field to indicate if the TLSSFieldName is name of the field or value
 * @param {?=} FSIFieldName - FSI field name or value
 * @param {?=} FSIIsValue - boolean field to indicate if the FSIFieldName is name of the field or value
 * @param {?=} studyLSRFieldName  -study LSR field name or value
 * @param {?=} studyLSRIsValue - boolean field to indicate if the studyLSRFieldName is name of the field or value
 * @param {?=} studyFSIFieldName - study FSI field name or value
 * @param {?=} studyFSIIsValue - boolean field to indicate if the studyFSIFieldName is name of the field or value
 * @param {?=} LSRFieldName - country LSR field name or value
 * @param {?=} LSRIsValue - boolean field to indicate if the LSRFieldName is name of the field or value
 * @return {?}
 */
function EndDateValidator(endDateFieldName, previousSiteEndDateFieldName, previousSiteEndDateIsValue, TLSSFieldName, TLSSIsValue, FSIFieldName, FSIIsValue, studyLSRFieldName, studyLSRIsValue, studyFSIFieldName, studyFSIIsValue, LSRFieldName, LSRIsValue) {
    if (previousSiteEndDateIsValue === void 0) { previousSiteEndDateIsValue = true; }
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var returnVal = null;
        /** @type {?} */
        var errors = null;
        if (endDateFieldName !== undefined && endDateFieldName !== null) {
            errors = {};
            /** @type {?} */
            var enddateControl = control.get(endDateFieldName);
            if (enddateControl && enddateControl.valid) {
                /** @type {?} */
                var enddate = moment$a(enddateControl.value);
                if (previousSiteEndDateFieldName !== undefined && previousSiteEndDateFieldName !== null) {
                    /** @type {?} */
                    var previousSiteEndDate = void 0;
                    if (previousSiteEndDateIsValue) {
                        previousSiteEndDate = previousSiteEndDateFieldName;
                    }
                    else {
                        /** @type {?} */
                        var previousSiteEndDateControl = control.get(previousSiteEndDateFieldName);
                        if (previousSiteEndDateControl && previousSiteEndDateControl.valid) {
                            previousSiteEndDate = moment$a(previousSiteEndDateControl.value);
                        }
                    }
                    if (previousSiteEndDate !== undefined && previousSiteEndDate !== null) {
                        /** @type {?} */
                        var greaterThanEqualtoPreviousSite = checkForEnddateGreaterThanEqualtoPreviousSite(enddate, previousSiteEndDate);
                        if (greaterThanEqualtoPreviousSite) {
                            Object.assign(errors, greaterThanEqualtoPreviousSite);
                        }
                    }
                }
                if (FSIFieldName !== undefined && FSIFieldName !== null) {
                    /** @type {?} */
                    var FSI = void 0;
                    if (FSIIsValue) {
                        FSI = FSIFieldName;
                    }
                    else {
                        /** @type {?} */
                        var FSIControl = control.get(FSIFieldName);
                        if (FSIControl && FSIControl.valid) {
                            FSI = moment$a(FSIControl.value);
                        }
                    }
                    if (FSI !== undefined && FSI !== null) {
                        /** @type {?} */
                        var greaterThanFSI = checkForEnddateGreaterThanFSI(enddate, FSI);
                        if (greaterThanFSI) {
                            Object.assign(errors, greaterThanFSI);
                        }
                    }
                }
                if (TLSSFieldName !== undefined && TLSSFieldName !== null) {
                    /** @type {?} */
                    var TLSS = void 0;
                    if (TLSSIsValue) {
                        TLSS = TLSSFieldName;
                    }
                    else {
                        /** @type {?} */
                        var TLSSControl = control.get(TLSSFieldName);
                        if (TLSSControl && TLSSControl.valid) {
                            TLSS = moment$a(TLSSControl.value);
                        }
                    }
                    if (TLSS !== undefined && TLSS !== null) {
                        /** @type {?} */
                        var lessThanTLSS = checkForEnddateLessThanTLSS$1(enddate, TLSS);
                        if (lessThanTLSS) {
                            Object.assign(errors, lessThanTLSS);
                        }
                    }
                }
                if (studyLSRFieldName !== undefined && studyLSRFieldName !== null) {
                    /** @type {?} */
                    var studyLSR = void 0;
                    if (studyLSRIsValue) {
                        studyLSR = studyLSRFieldName;
                    }
                    else {
                        /** @type {?} */
                        var studyLSRControl = control.get(studyLSRFieldName);
                        if (studyLSRControl !== undefined && studyLSRControl !== null) {
                            studyLSR = moment$a(studyLSRControl.value);
                        }
                    }
                    if (studyLSR !== undefined && studyLSR !== null) {
                        /** @type {?} */
                        var lessThanStudyLSR = checkForEnddateLessThanStudyLSR(enddate, studyLSR);
                        if (lessThanStudyLSR) {
                            Object.assign(errors, lessThanStudyLSR);
                        }
                    }
                }
                if (studyFSIFieldName !== undefined && studyFSIFieldName !== null) {
                    /** @type {?} */
                    var studyFSI = void 0;
                    if (studyFSIIsValue) {
                        studyFSI = studyFSIFieldName;
                    }
                    else {
                        /** @type {?} */
                        var studyFSIControl = control.get(studyFSIFieldName);
                        if (studyFSIControl && studyFSIControl.valid) {
                            studyFSI = moment$a(studyFSIControl.value);
                        }
                    }
                    if (studyFSI !== undefined && studyFSI !== null) {
                        /** @type {?} */
                        var greaterThanStudyFSI = checkForEnddateGreaterThanStudyFSI(enddate, studyFSI);
                        if (greaterThanStudyFSI) {
                            Object.assign(errors, greaterThanStudyFSI);
                        }
                    }
                }
                if (LSRFieldName !== undefined && LSRFieldName !== null) {
                    /** @type {?} */
                    var LSR = void 0;
                    if (LSRIsValue) {
                        LSR = LSRFieldName;
                    }
                    else {
                        /** @type {?} */
                        var LSRControl = control.get(LSRFieldName);
                        if (LSRControl && LSRControl.valid) {
                            LSR = moment$a(LSRControl.value);
                        }
                    }
                    if (LSR !== undefined && LSR !== null) {
                        /** @type {?} */
                        var lessThanLSR = checkForEnddateLessThanLSR(enddate, LSR);
                        if (lessThanLSR) {
                            Object.assign(errors, lessThanLSR);
                        }
                    }
                }
            }
        }
        if (Object.keys(errors).length !== 0) {
            control.get(endDateFieldName).setErrors(errors);
            returnVal = {};
            returnVal[endDateFieldName] = errors;
        }
        return returnVal;
    });
}
/**
 * @param {?} enddate
 * @param {?} previousSiteEndDate
 * @return {?}
 */
function checkForEnddateGreaterThanEqualtoPreviousSite(enddate, previousSiteEndDate) {
    if (enddate.isSameOrAfter(previousSiteEndDate)) {
        return null;
    }
    else {
        return {
            'ltPrevError': true
        };
    }
}
/**
 * @param {?} enddate
 * @param {?} TLSS
 * @return {?}
 */
function checkForEnddateLessThanTLSS$1(enddate, TLSS) {
    if (enddate.isBefore(TLSS)) {
        return null;
    }
    else {
        return {
            'SIEndDateError2': true
        };
    }
}
// TODO: To verify if this condition will be required
/**
 * @param {?} enddate
 * @param {?} FSI
 * @return {?}
 */
function checkForEnddateGreaterThanFSI(enddate, FSI) {
    if (enddate.isAfter(FSI)) {
        return null;
    }
    else {
        return {
            // TODO: To confirm message for this from Tejas and add a new message in errorMessages.properties
            'greaterThanFSI': true
        };
    }
}
// TODO: To verify if this condition will be required
/**
 * @param {?} enddate
 * @param {?} studyLSR
 * @return {?}
 */
function checkForEnddateLessThanStudyLSR(enddate, studyLSR) {
    if (enddate.isBefore(studyLSR)) {
        return null;
    }
    else {
        return {
            // TODO: To confirm message for this from Tejas and add a new message in errorMessages.properties
            'lessThanStudyLSR': true
        };
    }
}
// TODO: To verify if this condition will be required
/**
 * @param {?} enddate
 * @param {?} studyFSI
 * @return {?}
 */
function checkForEnddateGreaterThanStudyFSI(enddate, studyFSI) {
    if (enddate.isAfter(studyFSI)) {
        return null;
    }
    else {
        return {
            // TODO: To confirm message for this from Tejas and add a new message in errorMessages.properties
            'greaterThanStudyFSI': true
        };
    }
}
// TODO: To verify if this condition will be required
/**
 * @param {?} enddate
 * @param {?} LSR
 * @return {?}
 */
function checkForEnddateLessThanLSR(enddate, LSR) {
    if (enddate.isBefore(LSR)) {
        return null;
    }
    else {
        return {
            // TODO: To confirm message for this from Tejas and add a new message in errorMessages.properties
            'lessThanLSR': true
        };
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/FSIValidator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$b = moment__WEBPACK_IMPORTED_MODULE_13__;
/**
 * Validator function to validate the FSI.
 * @param {?} countryFSIFieldName - country FSI field name
 * @param {?} studyFSIFieldName - study FSI field name or value
 * @param {?=} studyFSIIsValue - boolean field to indicate if the studyFSIFieldName is name of the field or value
 * @param {?=} TLSSFieldName -TLSS field name or value
 * @param {?=} TLSSIsValue - boolean field to indicate if the TLSSFieldName is name of the field or value
 * @param {?=} isAdjustmentFieldName - isAdjustment field name or value
 * @param {?=} isAdjustmentIsValue - boolean field to indicate if the isAdjustmentFieldName is name of the field or value
 * @param {?=} isAdjustableFieldName -isAdjustable field name or value
 * @param {?=} isAdjustableIsValue - boolean field to indicate if the isAdjustableFieldName is name of the field or value
 * @param {?=} isCohortPlan
 * @return {?}
 */
function FSIValidator(countryFSIFieldName, studyFSIFieldName, studyFSIIsValue, TLSSFieldName, TLSSIsValue, 
// TLSRFieldName?: any,
// TLSRIsValue?: boolean,
isAdjustmentFieldName, isAdjustmentIsValue, isAdjustableFieldName, isAdjustableIsValue, isCohortPlan) {
    if (studyFSIIsValue === void 0) { studyFSIIsValue = true; }
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var returnVal = null;
        /** @type {?} */
        var studyFSI;
        /** @type {?} */
        var TLSS;
        // let TLSR;
        /** @type {?} */
        var isAdjustment;
        /** @type {?} */
        var isAdjustable;
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var errors = null;
        if (countryFSIFieldName !== undefined && countryFSIFieldName !== null) {
            /** @type {?} */
            var countryFSIControl = (/** @type {?} */ (control.get(countryFSIFieldName)));
            if (countryFSIControl &&
                !(countryFSIControl.invalid &&
                    countryFSIControl.errors &&
                    countryFSIControl.errors.matDatepickerParse)) {
                errors = initializeErrorsObject$1(errors, countryFSIControl);
                if (countryFSIControl.enabled) {
                    /** @type {?} */
                    var countryFSI = countryFSIControl.value;
                    if (studyFSIFieldName !== undefined && studyFSIFieldName !== null) {
                        // let studyFSI;
                        if (studyFSIIsValue) {
                            studyFSI = moment$b(studyFSIFieldName);
                        }
                        else {
                            /** @type {?} */
                            var studyFSIControl = control.get(studyFSIFieldName);
                            if (studyFSIControl &&
                                studyFSIControl.valid &&
                                common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(studyFSIControl.value)) {
                                studyFSI = moment$b(studyFSIControl.value);
                            }
                        }
                    }
                    if (TLSSFieldName !== undefined && TLSSFieldName !== null) {
                        // let TLSS;
                        if (TLSSIsValue) {
                            TLSS = moment$b(TLSSFieldName);
                        }
                        else {
                            /** @type {?} */
                            var TLSSControl = control.get(TLSSFieldName);
                            if (TLSSControl &&
                                TLSSControl.valid &&
                                common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(TLSSControl.value)) {
                                TLSS = moment$b(TLSSControl.value);
                            }
                        }
                    }
                    if (isAdjustmentFieldName !== undefined &&
                        isAdjustmentFieldName !== null &&
                        isAdjustableFieldName !== undefined &&
                        isAdjustableFieldName !== null) {
                        // let isAdjustment, isAdjustable;
                        if (isAdjustmentIsValue) {
                            isAdjustment = isAdjustmentFieldName;
                        }
                        else {
                            /** @type {?} */
                            var isAdjustmentControl = control.get(isAdjustmentFieldName);
                            if (isAdjustmentControl) {
                                isAdjustment = isAdjustmentControl.value;
                            }
                        }
                        if (isAdjustableIsValue) {
                            isAdjustable = isAdjustableFieldName;
                        }
                        else {
                            /** @type {?} */
                            var isAdjustableControl = control.get(isAdjustableFieldName);
                            if (isAdjustableControl) {
                                isAdjustable = isAdjustableControl.value;
                            }
                        }
                    }
                    // if (enrollmentParametersFieldName !== undefined && enrollmentParametersFieldName !== null) {
                    //   enrollmentParametersFormGroup = control.get(enrollmentParametersFieldName);
                    // }
                    /** @type {?} */
                    var errorsFromValidator = ValidateFSI(countryFSI, studyFSI, TLSS, isAdjustment, isAdjustable, isCohortPlan);
                    if (errorsFromValidator) {
                        Object.assign(errors, errorsFromValidator);
                    }
                    if (!common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(countryFSI)) {
                        /** @type {?} */
                        var NonEmptyField = REQUIRED_ERROR_OBJ;
                        Object.assign(errors, NonEmptyField);
                    }
                }
                if (errors && Object.keys(errors).length !== 0) {
                    control.get(countryFSIFieldName).setErrors(errors);
                    returnVal = {};
                    returnVal[countryFSIFieldName] = errors;
                }
                else {
                    countryFSIControl.setErrors(null);
                }
            }
        }
        return returnVal;
    });
}
/**
 * @param {?} errors
 * @param {?} countryFSIControl
 * @return {?}
 */
function initializeErrorsObject$1(errors, countryFSIControl) {
    errors = countryFSIControl.errors;
    if (!errors) {
        errors = {};
    }
    if (errors.FSILT_ERROR) {
        delete errors.FSILT_ERROR;
    }
    if (errors.FSIRedist) {
        delete errors.FSIRedist;
    }
    if (errors.FSI_GT_TLSS) {
        delete errors.FSI_GT_TLSS;
    }
    // if (errors.FSIRequriedForFSS) {
    //   delete errors.FSIRequriedForFSS;
    // }
    return errors;
}
/**
 * @param {?} countryFSI
 * @param {?} studyFSI
 * @param {?=} TLSS
 * @param {?=} isAdjustment
 * @param {?=} isAdjustable
 * @param {?=} isCohortPlan
 * @return {?}
 */
function ValidateFSI(countryFSI, studyFSI, TLSS, isAdjustment, isAdjustable, isCohortPlan) {
    /** @type {?} */
    var errors = {};
    if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(countryFSI)) {
        countryFSI = moment$b(countryFSI);
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(studyFSI)) {
            studyFSI = moment$b(studyFSI);
            if (studyFSI !== undefined && studyFSI !== null) {
                /** @type {?} */
                var greaterThanEqualToStudyFSI = checkForCountryFSIGreaterThanEqualToStudyFSI(countryFSI, studyFSI);
                if (greaterThanEqualToStudyFSI) {
                    Object.assign(errors, greaterThanEqualToStudyFSI);
                }
            }
        }
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(TLSS)) {
            TLSS = moment$b(TLSS);
            if (TLSS !== undefined && TLSS !== null) {
                /** @type {?} */
                var lessThanEqualToTLSS = checkForCountryFSILessThanEqualToTLSS(countryFSI, TLSS);
                if (lessThanEqualToTLSS) {
                    Object.assign(errors, lessThanEqualToTLSS);
                }
            }
        }
        if (isAdjustment !== undefined &&
            isAdjustment !== null &&
            isAdjustable !== undefined &&
            isAdjustable !== null &&
            (isCohortPlan === undefined ||
                isCohortPlan === null ||
                isCohortPlan === false)) {
            /** @type {?} */
            var greaterThanToday = checkForCountryFSIGreaterThanToday(countryFSI, isAdjustment, isAdjustable);
            if (greaterThanToday) {
                Object.assign(errors, greaterThanToday);
            }
        }
    }
    return errors;
}
/**
 * @param {?} countryFSI
 * @param {?} studyFSI
 * @return {?}
 */
function checkForCountryFSIGreaterThanEqualToStudyFSI(countryFSI, studyFSI) {
    if (countryFSI.isSameOrAfter(studyFSI)) {
        return null;
    }
    else {
        return {
            // FSILTError: true
            FSILT_ERROR: { FSILT_ERROR: studyFSI }
        };
    }
}
/**
 * @param {?} countryFSI
 * @param {?} TLSS
 * @return {?}
 */
function checkForCountryFSILessThanEqualToTLSS(countryFSI, TLSS) {
    if (countryFSI.isSameOrBefore(TLSS)) {
        return null;
    }
    else {
        return {
            // FSIgtTLSS: true
            FSI_GT_TLSS: { FSI_GT_TLSS: TLSS }
        };
    }
}
/**
 * @param {?} countryFSI
 * @param {?} isAdjustment
 * @param {?} isAdjustable
 * @return {?}
 */
function checkForCountryFSIGreaterThanToday(countryFSI, isAdjustment, isAdjustable) {
    if (isAdjustment && isAdjustable) {
        if (countryFSI.isAfter()) {
            return null;
        }
        else {
            return {
                FSIRedist: true
            };
        }
    }
    else {
        return null;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/FSSValidator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$c = moment__WEBPACK_IMPORTED_MODULE_13__;
/**
 * Validator function to validate the FSS.
 * @param {?} FSSFieldName - FSS field name
 * @param {?} FSIFieldName -FSI field name or value
 * @param {?=} FSIIsValue - boolean field to indicate if the FSIFieldName is name of the field or value
 * @return {?}
 */
function FSSValidator(FSSFieldName, FSIFieldName, FSIIsValue) {
    if (FSIIsValue === void 0) { FSIIsValue = true; }
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var returnVal = null;
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var errors = {};
        /** @type {?} */
        var FSS;
        /** @type {?} */
        var FSI;
        if (FSSFieldName !== undefined && FSSFieldName !== null) {
            // errors = {};
            /** @type {?} */
            var FSSControl = control.get(FSSFieldName);
            if (FSSControl && FSSControl.valid) {
                if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(FSSControl.value)) {
                    FSS = moment$c(FSSControl.value);
                    if (FSIFieldName !== undefined && FSIFieldName !== null) {
                        // let FSI;
                        if (FSIIsValue) {
                            FSI = FSIFieldName;
                        }
                        else {
                            /** @type {?} */
                            var FSIControl = control.get(FSIFieldName);
                            if (FSIControl && FSIControl.valid && common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(FSIControl.value)) {
                                FSI = moment$c(FSIControl.value);
                            }
                        }
                        // if (FSI !== undefined && FSI !== null) {
                        //     const greaterThanEqualToFSI = checkForFSSGreaterThanEqualToFSI(FSS, FSI);
                        //     if (greaterThanEqualToFSI) {
                        //         Object.assign(errors, greaterThanEqualToFSI);
                        //     }
                        // }
                    }
                    /** @type {?} */
                    var errorsFromValidator = ValidateFSS(FSS, FSI);
                    if (errorsFromValidator) {
                        Object.assign(errors, errorsFromValidator);
                    }
                }
                else {
                    FSSControl.setErrors(null);
                }
            }
        }
        if (Object.keys(errors).length !== 0) {
            control.get(FSSFieldName).setErrors(errors);
            returnVal = {};
            returnVal[FSSFieldName] = errors;
        }
        return returnVal;
    });
}
/**
 * @param {?} FSS
 * @param {?} FSI
 * @return {?}
 */
function ValidateFSS(FSS, FSI) {
    /** @type {?} */
    var errors = {};
    if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(FSS)) {
        FSS = moment$c(FSS);
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(FSI)) {
            FSI = moment$c(FSI);
            if (FSI !== undefined && FSI !== null) {
                /** @type {?} */
                var greaterThanEqualToFSI = checkForFSSGreaterThanEqualToFSI(FSS, FSI);
                if (greaterThanEqualToFSI) {
                    Object.assign(errors, greaterThanEqualToFSI);
                }
            }
        }
    }
    return errors;
}
/**
 * @param {?} FSS
 * @param {?} FSI
 * @return {?}
 */
function checkForFSSGreaterThanEqualToFSI(FSS, FSI) {
    if (FSS.isSameOrAfter(FSI)) {
        return null;
    }
    else {
        return {
            // 'dependencyError': true
            DEPENDENCY_ERROR: { DEPENDENCY_ERROR: FSI }
        };
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/AllNotZeroValidator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Validator function to validate the given fields for all should not be zero.
 * @param {?} controlName - name of the control to set errors upon
 * @param {?=} fields - array containing the field names or values
 * @param {?=} isValue - boolean field to indicate if the fields array contains names of fields or their values
 * @return {?}
 */
function AllNotZeroValidator(controlName, fields, isValue) {
    if (isValue === void 0) { isValue = true; }
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var returnVal = null;
        /** @type {?} */
        var errors = null;
        /** @type {?} */
        var allZero = false;
        if (controlName !== undefined && controlName !== null) {
            /** @type {?} */
            var fieldControl = control.get(controlName);
            if (fieldControl) {
                errors = fieldControl.errors;
                if (!errors) {
                    errors = {};
                }
                if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(fieldControl.value, true)) {
                    if (fields && fields.length > 0) {
                        fields.forEach((/**
                         * @param {?} field
                         * @param {?} index
                         * @return {?}
                         */
                        function (field, index) {
                            /** @type {?} */
                            var value = isValue ? field : control.get(field.toString()).value;
                            if (index === 0) {
                                allZero = (Number(value) === 0);
                            }
                            else {
                                allZero = allZero && (Number(value) === 0);
                            }
                        }));
                    }
                    if (allZero) {
                        errors = Object.assign({}, {
                            'allZeroError': true
                        }, errors);
                        fieldControl.setErrors(errors);
                        returnVal = {};
                        returnVal[controlName] = errors;
                    }
                }
            }
        }
        return returnVal;
    });
}
/**
 * @param {?} daysto25
 * @param {?} daysto50
 * @param {?} daysto90
 * @return {?}
 */
function ValidateAllNotZero(daysto25, daysto50, daysto90) {
    /** @type {?} */
    var errors = {};
    if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(daysto25, true)
        && common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(daysto50, true)
        && common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(daysto90, true)) {
        if (daysto25 === 0 && daysto50 === 0 && daysto90 === 0) {
            Object.assign(errors, {
                'allZeroError': true
            });
        }
    }
    return errors;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/RangeValidator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Validator function to validate the specified range.
 * @param {?} fieldName - name of the field to validate
 * @param {?=} minFieldName - lower bound field name or value
 * @param {?=} minIsValue - boolean field to indicate if the minFieldName is name of the field or value
 * @param {?=} maxFieldName -upper bound field name or value
 * @param {?=} maxIsValue - boolean field to indicate if the maxFieldName is name of the field or value
 * @return {?}
 */
function RangeValidator(fieldName, minFieldName, minIsValue, maxFieldName, maxIsValue) {
    if (minIsValue === void 0) { minIsValue = true; }
    if (maxIsValue === void 0) { maxIsValue = true; }
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var returnVal = null;
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var errors = null;
        /** @type {?} */
        var fieldValue;
        /** @type {?} */
        var minValue;
        /** @type {?} */
        var maxValue;
        /** @type {?} */
        var fieldNameControl = null;
        if (fieldName !== undefined && fieldName !== null) {
            fieldNameControl = control.get(fieldName);
            errors = initializeErrorsObject$2(errors, fieldNameControl);
            if (fieldNameControl && fieldNameControl.enabled) {
                fieldValue = fieldNameControl.value;
                if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(fieldValue)) {
                    if (minFieldName !== undefined && minFieldName !== null) {
                        // let minValue;
                        if (minIsValue) {
                            minValue = minFieldName;
                        }
                        else {
                            /** @type {?} */
                            var minControl = control.get(minFieldName);
                            if (minControl && minControl.valid) {
                                minValue = minControl.value;
                            }
                        }
                    }
                    if (maxFieldName !== undefined && maxFieldName !== null) {
                        // let maxValue;
                        if (maxIsValue) {
                            maxValue = maxFieldName;
                        }
                        else {
                            /** @type {?} */
                            var maxControl = control.get(maxFieldName);
                            if (maxControl) {
                                maxValue = maxControl.value;
                            }
                        }
                    }
                }
            }
            /** @type {?} */
            var errorsFromValidator = ValidateRange(fieldValue, minValue, maxValue);
            if (errorsFromValidator) {
                Object.assign(errors, errorsFromValidator);
            }
            fieldNameControl = control.get(fieldName);
            if (fieldNameControl && errors) {
                if (Object.keys(errors).length !== 0) {
                    fieldNameControl.setErrors(errors);
                    returnVal = {};
                    returnVal[fieldName] = errors;
                }
                else {
                    fieldNameControl.setErrors(null);
                }
            }
        }
        return returnVal;
    });
}
/**
 * @param {?} errors
 * @param {?} fieldNameControl
 * @return {?}
 */
function initializeErrorsObject$2(errors, fieldNameControl) {
    if (fieldNameControl) {
        errors = fieldNameControl.errors;
    }
    if (!errors) {
        errors = {};
    }
    if (errors.min) {
        delete errors.min;
    }
    if (errors.max) {
        delete errors.max;
    }
    return errors;
}
/**
 * @param {?} fieldValue
 * @param {?} minValue
 * @param {?} maxValue
 * @param {?=} errorCode
 * @param {?=} strictChecking
 * @return {?}
 */
function ValidateRange(fieldValue, minValue, maxValue, errorCode, strictChecking) {
    /** @type {?} */
    var errors = {};
    if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(fieldValue)) {
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(minValue)) {
            /** @type {?} */
            var lessThanMin = checkForValueLessThanMinValue(fieldValue, minValue, errorCode, strictChecking);
            if (lessThanMin) {
                Object.assign(errors, lessThanMin);
            }
        }
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(maxValue)) {
            /** @type {?} */
            var greaterThanMaxValue = checkForValueGreaterThanMaxValue(fieldValue, maxValue);
            if (greaterThanMaxValue) {
                Object.assign(errors, greaterThanMaxValue);
            }
        }
    }
    return errors;
}
/**
 * @param {?} value
 * @param {?} minValue
 * @param {?=} errorCode
 * @param {?=} strictChecking
 * @return {?}
 */
function checkForValueLessThanMinValue(value, minValue, errorCode, strictChecking) {
    var _a, _b;
    if (strictChecking) {
        if (Number(value) <= Number(minValue)) {
            if (errorCode) {
                return _a = {}, _a[errorCode] = minValue, _a;
            }
            else {
                return { 'minNumRequiredError': true };
            }
        }
        else {
            return null;
        }
    }
    if (Number(value) < Number(minValue)) {
        if (errorCode) {
            return _b = {}, _b[errorCode] = minValue, _b;
        }
        else {
            return { min: { min: minValue } };
        }
    }
    else {
        return null;
    }
}
/**
 * @param {?} value
 * @param {?} maxValue
 * @return {?}
 */
function checkForValueGreaterThanMaxValue(value, maxValue) {
    if (Number(value) > Number(maxValue)) {
        return { max: { max: maxValue } };
    }
    else {
        return null;
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/SASValidator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Validator function to validate the sites actvely screening field.
 * @param {?} sasFieldName - name of the SAS field to validate
 * @param {?=} activeSitesFieldName - active sites field name or value
 * @param {?=} activeSitesIsValue - boolean field to indicate if the activeSitesFieldName is name of the field or value
 * @param {?=} maxValue
 * @return {?}
 */
function SASValidator(sasFieldName, activeSitesFieldName, activeSitesIsValue, maxValue) {
    if (activeSitesIsValue === void 0) { activeSitesIsValue = true; }
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var returnVal = null;
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var errors = {};
        /** @type {?} */
        var activeSites;
        /** @type {?} */
        var fieldValue;
        if (sasFieldName !== undefined && sasFieldName !== null) {
            /** @type {?} */
            var sasFieldNameControl = control.get(sasFieldName);
            if (sasFieldNameControl && sasFieldNameControl.enabled) {
                fieldValue = sasFieldNameControl.value;
                if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(fieldValue, true)) {
                    if (activeSitesFieldName !== undefined && activeSitesFieldName !== null) {
                        // let activeSites;
                        if (activeSitesIsValue) {
                            activeSites = activeSitesFieldName;
                        }
                        else {
                            /** @type {?} */
                            var activeSitesControl = control.get(activeSitesFieldName);
                            if (activeSitesControl) {
                                activeSites = activeSitesControl.value;
                            }
                        }
                        // if (AppUtil.isDefined(activeSites, true)) {
                        //     const activeSitesEqualZero = checkForActiveSitesEqualZero(activeSites);
                        //     if (activeSitesEqualZero) {
                        //         Object.assign(errors, activeSitesEqualZero);
                        //     }
                        // }
                    }
                    /** @type {?} */
                    var errorsFromValidator = ValidateSAS(fieldValue, activeSites, maxValue);
                    if (errorsFromValidator) {
                        Object.assign(errors, errorsFromValidator);
                    }
                }
                else {
                    Object.assign(errors, REQUIRED_ERROR_OBJ);
                }
            }
        }
        if (Object.keys(errors).length !== 0) {
            if (control.get(sasFieldName)) {
                control.get(sasFieldName).setErrors(errors);
            }
            returnVal = {};
            returnVal[sasFieldName] = errors;
        }
        else {
            if (control.get(sasFieldName)) {
                control.get(sasFieldName).setErrors(null);
            }
        }
        return returnVal;
    });
}
/**
 * @param {?} SAS
 * @param {?} activeSites
 * @param {?=} maxValue
 * @return {?}
 */
function ValidateSAS(SAS, activeSites, maxValue) {
    /** @type {?} */
    var errors = {};
    if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(SAS, true)) {
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(activeSites, true)) {
            /** @type {?} */
            var activeSitesEqualZero = checkForActiveSitesEqualZero(activeSites);
            if (activeSitesEqualZero) {
                Object.assign(errors, activeSitesEqualZero);
            }
        }
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(maxValue, true)) {
            /** @type {?} */
            var maxValueError = checkForMaxValue(SAS, maxValue);
            if (maxValueError) {
                Object.assign(errors, maxValueError);
            }
        }
    }
    return errors;
}
/**
 * @param {?} activeSites
 * @return {?}
 */
function checkForActiveSitesEqualZero(activeSites) {
    if (Number(activeSites) === 0) {
        return { 'ActiveSitesZeroError': true };
    }
    else {
        return null;
    }
}
/**
 * @param {?} days
 * @param {?} maxValue
 * @return {?}
 */
function checkForMaxValue(days, maxValue) {
    if (Number(days) > Number(maxValue)) {
        return { max: { max: maxValue } };
    }
    return null;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/RRValidator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Validator function to validate the RR.
 * @param {?} RRFieldName - RR field name
 * @param {?} maxRRValue -maximum RR value
 * @param {?} SRFieldName - SR field name or value
 * @param {?=} SRIsValue - boolean field to indicate if the SRFieldName is name of the field or value
 * @param {?=} maxSRValue -maximum SR value
 * @return {?}
 */
function RRValidator(RRFieldName, maxRRValue, SRFieldName, SRIsValue, maxSRValue) {
    if (SRIsValue === void 0) { SRIsValue = true; }
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var returnVal = null;
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var errors = {};
        /** @type {?} */
        var RR;
        /** @type {?} */
        var SR;
        if (RRFieldName !== undefined && RRFieldName !== null) {
            /** @type {?} */
            var RRControl = control.get(RRFieldName);
            if (RRControl && RRControl.enabled) {
                if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(RRControl.value, true)) {
                    RR = Number(RRControl.value);
                    if (SRFieldName !== undefined && SRFieldName !== null) {
                        // let FSI;
                        if (SRIsValue) {
                            SR = SRFieldName;
                        }
                        else {
                            /** @type {?} */
                            var SRControl = control.get(SRFieldName);
                            if (SRControl && common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(SRControl.value, true)) {
                                SR = Number(SRControl.value);
                            }
                        }
                    }
                    /** @type {?} */
                    var errorsFromValidator = ValidateRR(RR, maxRRValue, SR, maxSRValue);
                    if (errorsFromValidator) {
                        Object.assign(errors, errorsFromValidator);
                    }
                }
                else {
                    Object.assign(errors, REQUIRED_ERROR_OBJ);
                }
            }
        }
        if (Object.keys(errors).length !== 0) {
            if (control.get(RRFieldName)) {
                control.get(RRFieldName).setErrors(errors);
            }
            returnVal = {};
            returnVal[RRFieldName] = errors;
        }
        else {
            if (control.get(RRFieldName)) {
                control.get(RRFieldName).setErrors(null);
            }
        }
        return returnVal;
    });
}
/**
 * @param {?} RR
 * @param {?} maxRRValue
 * @param {?} SR
 * @param {?} maxSRValue
 * @return {?}
 */
function ValidateRR(RR, maxRRValue, SR, maxSRValue) {
    /** @type {?} */
    var errors = {};
    if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(RR, true)) {
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(maxRRValue, true)) {
            /** @type {?} */
            var maxValueError = checkForMaxValue$1(RR, maxRRValue);
            if (maxValueError) {
                Object.assign(errors, maxValueError);
            }
        }
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(SR, true) && common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(maxSRValue, true)) {
            /** @type {?} */
            var SRGreaterThanMaxSR = checkForSRGreaterThanMaxSR(SR, maxSRValue);
            if (SRGreaterThanMaxSR) {
                Object.assign(errors, SRGreaterThanMaxSR);
            }
        }
    }
    return errors;
}
/**
 * @param {?} SR
 * @param {?} maxSRValue
 * @return {?}
 */
function checkForSRGreaterThanMaxSR(SR, maxSRValue) {
    if (Number(SR) > Number(maxSRValue)) {
        return { 'maxSrExceedError': true };
    }
    return null;
}
/**
 * @param {?} value
 * @param {?} maxValue
 * @return {?}
 */
function checkForMaxValue$1(value, maxValue) {
    if (Number(value) > Number(maxValue)) {
        return { max: { max: maxValue } };
    }
    return null;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/SFRValidator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Validator function to validate the SFR.
 * @param {?} SFRFieldName - RR field name
 * @param {?} minSFRValue -minimum SFR value
 * @param {?} maxSFRValue -maximum SFR value
 * @param {?} SRFieldName - SR field name or value
 * @param {?=} SRIsValue - boolean field to indicate if the SRFieldName is name of the field or value
 * @param {?=} maxSRValue -maximum SR value
 * @return {?}
 */
function SFRValidator(SFRFieldName, minSFRValue, maxSFRValue, SRFieldName, SRIsValue, maxSRValue) {
    if (SRIsValue === void 0) { SRIsValue = true; }
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var returnVal = null;
        // tslint:disable-next-line:prefer-const
        /** @type {?} */
        var errors = {};
        /** @type {?} */
        var SFR;
        /** @type {?} */
        var SR;
        if (SFRFieldName !== undefined && SFRFieldName !== null) {
            /** @type {?} */
            var SFRControl = control.get(SFRFieldName);
            if (SFRControl && SFRControl.enabled) {
                if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(SFRControl.value, true)) {
                    SFR = Number(SFRControl.value);
                    if (SRFieldName !== undefined && SRFieldName !== null) {
                        // let FSI;
                        if (SRIsValue) {
                            SR = SRFieldName;
                        }
                        else {
                            /** @type {?} */
                            var SRControl = control.get(SRFieldName);
                            if (SRControl && SRControl.disabled && common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(SRControl.value, true)) {
                                SR = Number(SRControl.value);
                            }
                        }
                    }
                    /** @type {?} */
                    var errorsFromValidator = ValidateSFR(SFR, minSFRValue, maxSFRValue, SR, maxSRValue);
                    if (errorsFromValidator) {
                        Object.assign(errors, errorsFromValidator);
                    }
                }
                else {
                    Object.assign(errors, REQUIRED_ERROR_OBJ);
                }
            }
        }
        if (Object.keys(errors).length !== 0) {
            if (control.get(SFRFieldName)) {
                control.get(SFRFieldName).setErrors(errors);
            }
            returnVal = {};
            returnVal[SFRFieldName] = errors;
        }
        else {
            if (control.get(SFRFieldName)) {
                control.get(SFRFieldName).setErrors(null);
            }
        }
        return returnVal;
    });
}
/**
 * @param {?} SFR
 * @param {?} minSFRValue
 * @param {?} maxSFRValue
 * @param {?} SR
 * @param {?} maxSRValue
 * @return {?}
 */
function ValidateSFR(SFR, minSFRValue, maxSFRValue, SR, maxSRValue) {
    /** @type {?} */
    var errors = {};
    if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(SFR, true)) {
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(minSFRValue, true)) {
            /** @type {?} */
            var minValueError = checkForMinValue$1(SFR, minSFRValue);
            if (minValueError) {
                Object.assign(errors, minValueError);
            }
        }
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(maxSFRValue, true)) {
            /** @type {?} */
            var maxValueError = checkForMaxValue$2(SFR, maxSFRValue);
            if (maxValueError) {
                Object.assign(errors, maxValueError);
            }
        }
        if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(SR, true) && common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(maxSRValue, true)) {
            /** @type {?} */
            var SRGreaterThanMaxSR = checkForSRGreaterThanMaxSR$1(SR, maxSRValue);
            if (SRGreaterThanMaxSR) {
                Object.assign(errors, SRGreaterThanMaxSR);
            }
        }
    }
    return errors;
}
/**
 * @param {?} SR
 * @param {?} maxSRValue
 * @return {?}
 */
function checkForSRGreaterThanMaxSR$1(SR, maxSRValue) {
    if (Number(SR) > Number(maxSRValue)) {
        return { 'maxSrExceedError': true };
    }
    return null;
}
/**
 * @param {?} value
 * @param {?} maxValue
 * @return {?}
 */
function checkForMaxValue$2(value, maxValue) {
    if (Number(value) > Number(maxValue)) {
        return { max: { max: maxValue } };
    }
    return null;
}
/**
 * @param {?} value
 * @param {?} minValue
 * @return {?}
 */
function checkForMinValue$1(value, minValue) {
    if (Number(value) < Number(minValue)) {
        return { min: { min: minValue } };
    }
    return null;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/paste-date-ranger.validator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$d = moment__WEBPACK_IMPORTED_MODULE_13__;
/**
 * @record
 */
function PasteDateRangerValidatorMsgs() { }
if (false) {}
/**
 * @param {?} pasteDateRangersName
 * @param {?} message
 * @param {?} maxRowsAllowed
 * @param {?} maxRowsAllowedForPasteDate
 * @return {?}
 */
function PasteDateRangerValidator(pasteDateRangersName, message, maxRowsAllowed, maxRowsAllowedForPasteDate) {
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var errors = {};
        /** @type {?} */
        var rangeString = control.get(pasteDateRangersName).value;
        if (rangeString && typeof rangeString === 'string') {
            /** @type {?} */
            var rangeArray = rangeString.split('\n');
            rangeArray = removeEmptyRowsForValidation(rangeArray);
            if (rangeArray.length < 0 ||
                rangeArray.length > maxRowsAllowedForPasteDate) {
                addError(errors, control, pasteDateRangersName, message, maxRowsAllowed, maxRowsAllowedForPasteDate, null, true);
            }
            else {
                /** @type {?} */
                var invalidRows_1 = [];
                /** @type {?} */
                var allEmpty_1 = true;
                rangeArray.forEach((/**
                 * @param {?} rangeObject
                 * @param {?} index
                 * @return {?}
                 */
                function (rangeObject, index) {
                    /** @type {?} */
                    var rangeDatesandSites = rangeObject.trim().split(/\s+/);
                    if (rangeDatesandSites.length !== 3) {
                        if (rangeDatesandSites.length === 1 &&
                            rangeDatesandSites[0] === '') {
                            allEmpty_1 = allEmpty_1 && true;
                        }
                        else {
                            invalidRows_1.push(index + 1);
                            allEmpty_1 = allEmpty_1 && false;
                        }
                    }
                    else {
                        allEmpty_1 = allEmpty_1 && false;
                        /** @type {?} */
                        var slotStartDate = moment$d(rangeDatesandSites[0], 'DD-MMM-YYYY', true);
                        /** @type {?} */
                        var slotEndDate = moment$d(rangeDatesandSites[1], 'DD-MMM-YYYY', true);
                        /** @type {?} */
                        var noOfCenters = parseFloat(rangeDatesandSites[2]);
                        /** @type {?} */
                        var isValidNoOfCenters = common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isValidNumber(rangeDatesandSites[2]) &&
                            common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isValidNumber(noOfCenters) &&
                            Number.isInteger(noOfCenters) &&
                            noOfCenters >= 0;
                        if (!slotStartDate.isValid() ||
                            !slotEndDate.isValid() ||
                            !isValidNoOfCenters) {
                            invalidRows_1.push(index + 1);
                        }
                    }
                }));
                if (invalidRows_1.length !== 0) {
                    addError(errors, control, pasteDateRangersName, message, maxRowsAllowed, maxRowsAllowedForPasteDate, invalidRows_1);
                }
                else if (allEmpty_1) {
                    addError(errors, control, pasteDateRangersName, message, maxRowsAllowed, maxRowsAllowedForPasteDate);
                }
            }
        }
        else {
            addError(errors, control, pasteDateRangersName, message, maxRowsAllowed, maxRowsAllowedForPasteDate);
        }
        return errors;
    });
}
/**
 * @param {?} errors
 * @param {?} controlForm
 * @param {?} controlName
 * @param {?} message
 * @param {?} maxRowsAllowed
 * @param {?} maxRowsAllowedForPasteDate
 * @param {?=} invalidRows
 * @param {?=} invalidLength
 * @return {?}
 */
function addError(errors, controlForm, controlName, message, maxRowsAllowed, maxRowsAllowedForPasteDate, invalidRows, invalidLength) {
    if (invalidLength) {
        /** @type {?} */
        var resultError = void 0;
        resultError = message.MAX_ROWS + ' ' + maxRowsAllowed + '.';
        if (maxRowsAllowedForPasteDate !== maxRowsAllowed) {
            resultError =
                resultError +
                    message.MAX_ROWS_EXTRA_1 +
                    maxRowsAllowedForPasteDate +
                    ' ';
            if (maxRowsAllowedForPasteDate === 1) {
                resultError =
                    resultError +
                        message.MAX_ROWS_EXTRA_2 +
                        (maxRowsAllowed - maxRowsAllowedForPasteDate) +
                        ' ' +
                        message.MAX_ROWS_EXTRA_PLU_3;
            }
            else if (maxRowsAllowedForPasteDate === maxRowsAllowed - 1) {
                resultError =
                    resultError +
                        message.MAX_ROWS_EXTRA_PLU_2 +
                        (maxRowsAllowed - maxRowsAllowedForPasteDate) +
                        ' ' +
                        message.MAX_ROWS_EXTRA_3;
            }
            else {
                resultError =
                    resultError +
                        message.MAX_ROWS_EXTRA_PLU_2 +
                        (maxRowsAllowed - maxRowsAllowedForPasteDate) +
                        ' ' +
                        message.MAX_ROWS_EXTRA_PLU_3;
            }
        }
        Object.assign(errors, {
            pastedateRangers: resultError // 'Maximum allowed rows are 50'
        });
    }
    else if (invalidRows) {
        /** @type {?} */
        var invalidRowsString = invalidRows.join(', ');
        Object.assign(errors, {
            pastedateRangers: message.INVALID_ROW_PART_1 + // 'The following rows contain errors or invalid data: ' +
                invalidRowsString +
                message.INVALID_ROW_PART_2 // '. Click Cancel or Reset, correct the data in the Excel file, and try again.'
        });
    }
    else {
        Object.assign(errors, {
            pastedateRangers: message.REQUIRED // 'Please enter valid ranges.'
        });
    }
    controlForm.get(controlName).setErrors(errors);
}
/**
 * @param {?} rangeArray
 * @return {?}
 */
function removeEmptyRowsForValidation(rangeArray) {
    return ((/** @type {?} */ (rangeArray))).filter((/**
     * @param {?} rangeObject
     * @return {?}
     */
    function (rangeObject) {
        return rangeObject !== '' ? rangeObject : null;
    }));
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/sites-validator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} totalNoOfSitesControlName
 * @param {?} formArrayName
 * @param {?} controlName
 * @param {?} message
 * @return {?}
 */
function Sites(totalNoOfSitesControlName, formArrayName, controlName, message) {
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var errors = {};
        /** @type {?} */
        var allZero = false;
        /** @type {?} */
        var allValues = control.get(formArrayName).getRawValue();
        if (allValues &&
            allValues.length > 0 &&
            control.get(totalNoOfSitesControlName) &&
            control.get(totalNoOfSitesControlName).value) {
            /** @type {?} */
            var totalNoOfSites = parseInt(control.get(totalNoOfSitesControlName).value, 10);
            allValues.forEach((/**
             * @param {?} value
             * @param {?} index
             * @return {?}
             */
            function (value, index) {
                if (index === 0 && common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(value[controlName])) {
                    allZero = Number(value[controlName]) === 0;
                }
                else {
                    allZero = allZero && Number(value[controlName]) === 0;
                }
            }));
            if (checkSumOfSitesEuqalsTotalSites(totalNoOfSites, allValues)) {
                updateValueAndValidity(control, formArrayName, controlName);
            }
            else {
                addError$1('totalNotEqual', errors, control, formArrayName, controlName, message.totalNotEqual);
            }
            if (allZero) {
                addError$1('allZero', errors, control, formArrayName, controlName, message.allZero);
            }
        }
        else {
            updateValueAndValidity(control, formArrayName, controlName);
        }
        return errors;
    });
}
/**
 * @param {?} totalNoOfSites
 * @param {?} allValues
 * @return {?}
 */
function checkSumOfSitesEuqalsTotalSites(totalNoOfSites, allValues) {
    return (parseInt(totalNoOfSites, 10) || 0) -
        allValues
            .map((/**
         * @param {?} itemValue
         * @return {?}
         */
        function (itemValue) { return parseInt(itemValue.noOfCenters, 10) || 0; }))
            .reduce((/**
         * @param {?} acc
         * @param {?} value
         * @return {?}
         */
        function (acc, value) { return acc + value; }), 0) !==
        0
        ? false
        : true;
}
/**
 * @param {?} errorType
 * @param {?} errors
 * @param {?} control
 * @param {?} formArrayName
 * @param {?} controlName
 * @param {?} message
 * @return {?}
 */
function addError$1(errorType, errors, control, formArrayName, controlName, message) {
    switch (errorType) {
        case 'totalNotEqual':
            Object.assign(errors, {
                totalNotEqual: message
            });
            break;
        case 'allZero':
            Object.assign(errors, {
                allZero: message
            });
            break;
    }
    ((/** @type {?} */ (control.get(formArrayName)))).controls.forEach((/**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        element.get(controlName).setErrors(errors);
    }));
}
/**
 * @param {?} control
 * @param {?} formArrayName
 * @param {?} controlName
 * @return {?}
 */
function updateValueAndValidity(control, formArrayName, controlName) {
    ((/** @type {?} */ (control.get(formArrayName)))).controls.forEach((/**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var errors = {};
        /** @type {?} */
        var siteErrors = element.get(controlName).errors;
        if (element.get(controlName).hasError('totalNotEqual')) {
            delete element.get(controlName).errors.totalNotEqual;
            Object.assign(errors, siteErrors);
        }
        errors = Object.keys(errors).length === 0 ? null : errors;
        element.get(controlName).setErrors(errors === {} ? null : errors);
    }));
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/custom-site-initiation-dates.validator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$e = moment__WEBPACK_IMPORTED_MODULE_13__;
/** @type {?} */
var PRECISION = 'day';
/**
 * @record
 */
function CSIDatesValidationMessages() { }
if (false) {}
/**
 * @param {?} formArrayName
 * @param {?} startDateControlName
 * @param {?} endDateControlName
 * @param {?} FSIDateControlName
 * @param {?} LSSDateControlName
 * @param {?} message
 * @param {?} isCohortPlan
 * @return {?}
 */
function CustomSiteInitiationDates(formArrayName, startDateControlName, endDateControlName, FSIDateControlName, LSSDateControlName, message, isCohortPlan) {
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var error = {};
        /** @type {?} */
        var currSlotStartDate;
        /** @type {?} */
        var currSlotEndDate;
        /** @type {?} */
        var prevSlotStartDate;
        /** @type {?} */
        var prevSlotEndDate;
        /** @type {?} */
        var allValues = ((/** @type {?} */ ((control.get(formArrayName))))).getRawValue();
        /** @type {?} */
        var FSIDate = control.get(FSIDateControlName).value
            ? moment$e(control.get(FSIDateControlName).value)
            : '';
        /** @type {?} */
        var TLSSDate = control.get(LSSDateControlName).value
            ? moment$e(control.get(LSSDateControlName).value)
            : '';
        if (allValues && allValues.length > 0) {
            if (allValues.length === 1) {
                /** @type {?} */
                var endDateErrors = {};
                /** @type {?} */
                var currValue = allValues[0];
                validateSameSlotDates(FSIDate, TLSSDate, moment$e(currValue[startDateControlName]), moment$e(currValue[endDateControlName]), {}, endDateErrors, control, formArrayName, startDateControlName, endDateControlName, message, 0);
            }
            else {
                allValues.reduce((/**
                 * @param {?} prevValue
                 * @param {?} currValue
                 * @param {?} index
                 * @return {?}
                 */
                function (prevValue, currValue, index) {
                    /** @type {?} */
                    var firstRowEndDateErrors = {};
                    /** @type {?} */
                    var otherRowEndDateErrors = {};
                    /** @type {?} */
                    var firstRowStartDateErrors = {};
                    /** @type {?} */
                    var otherRowStartDateErrors = {};
                    currSlotStartDate = moment$e(currValue[startDateControlName]);
                    currSlotEndDate = moment$e(currValue[endDateControlName]);
                    validateSameSlotDates(FSIDate, TLSSDate, currSlotStartDate, currSlotEndDate, otherRowStartDateErrors, otherRowEndDateErrors, control, formArrayName, startDateControlName, endDateControlName, message, index);
                    if (prevValue) {
                        prevSlotStartDate = moment$e(prevValue[startDateControlName]);
                        prevSlotEndDate = moment$e(prevValue[endDateControlName]);
                        if (index === 1) {
                            validateSameSlotDates(FSIDate, TLSSDate, prevSlotStartDate, prevSlotEndDate, firstRowStartDateErrors, firstRowEndDateErrors, control, formArrayName, startDateControlName, endDateControlName, message, 0);
                        }
                        if (currSlotEndDate && !isCohortPlan) {
                            if (currSlotStartDate.isSameOrBefore(prevSlotEndDate, PRECISION)) {
                                /** @type {?} */
                                var startDateErrors = index === 1
                                    ? firstRowStartDateErrors
                                    : otherRowStartDateErrors;
                                addError$2('afterPrevEndDate', startDateErrors, control, formArrayName, startDateControlName, message.afterPrevEndDate, index);
                                /** @type {?} */
                                var endDateErrors = index === 1 ? firstRowEndDateErrors : otherRowEndDateErrors;
                                addError$2('afterNextStartDate', endDateErrors, control, formArrayName, endDateControlName, message.afterNextStartDate, index - 1);
                            }
                            else {
                                /** @type {?} */
                                var startDateFieldControl = (/** @type {?} */ (((/** @type {?} */ ((control.get(formArrayName)))))
                                    .at(index)
                                    .get(startDateControlName)));
                                updateValueAndValidityDiffSlotSD(startDateFieldControl);
                                /** @type {?} */
                                var endDateFieldControl = (/** @type {?} */ (((/** @type {?} */ ((control.get(formArrayName)))))
                                    .at(index - 1)
                                    .get(endDateControlName)));
                                updateValueAndValidityDiffSlotED(endDateFieldControl);
                            }
                        }
                    }
                    return currValue;
                }));
            }
        }
        return error;
    });
}
/**
 * @param {?} FSIDate
 * @param {?} TLSSDate
 * @param {?} slotStartDate
 * @param {?} slotEndDate
 * @param {?} startDatePreexistingErrors
 * @param {?} endDatePreexistingErrors
 * @param {?} control
 * @param {?} formArrayName
 * @param {?} startDateControlName
 * @param {?} endDateControlName
 * @param {?} message
 * @param {?} index
 * @return {?}
 */
function validateSameSlotDates(FSIDate, TLSSDate, slotStartDate, slotEndDate, startDatePreexistingErrors, endDatePreexistingErrors, control, formArrayName, startDateControlName, endDateControlName, message, index) {
    // If Start date is after LSS date or before entered FSI date
    if (isSDBeforeFSIOrAfterLSS(FSIDate, TLSSDate, slotStartDate)) {
        addError$2('beforeFSIDate', startDatePreexistingErrors, control, formArrayName, startDateControlName, message.beforeFSIDate, index);
    }
    else {
        /** @type {?} */
        var startDateFieldControl = (/** @type {?} */ (((/** @type {?} */ ((control.get(formArrayName)))))
            .at(index)
            .get(startDateControlName)));
        updateValueAndValiditySameSlot(startDateFieldControl, null, 'beforeFSIDate');
    }
    // If End date is after LSS date
    if (TLSSDate !== '' && isEDAfterLSSDate(TLSSDate, slotEndDate)) {
        addError$2('afterLSSDate', endDatePreexistingErrors, control, formArrayName, endDateControlName, message.afterLSSDate, index);
    }
    else {
        /** @type {?} */
        var endDateFieldControl = (/** @type {?} */ (((/** @type {?} */ ((control.get(formArrayName)))))
            .at(index)
            .get(endDateControlName)));
        updateValueAndValiditySameSlot(null, endDateFieldControl, 'afterLSSDate');
    }
    if (slotEndDate.isBefore(slotStartDate, PRECISION)) {
        addError$2('beforeCurrStartDate', endDatePreexistingErrors, control, formArrayName, endDateControlName, message.beforeCurrStartDate, index);
    }
    else {
        /** @type {?} */
        var endDateFieldControl = (/** @type {?} */ (((/** @type {?} */ ((control.get(formArrayName)))))
            .at(index)
            .get(endDateControlName)));
        updateValueAndValiditySameSlot(null, endDateFieldControl, 'beforeCurrStartDate');
    }
}
/**
 * @param {?} errorType
 * @param {?} errors
 * @param {?} control
 * @param {?} formArrayName
 * @param {?} controlName
 * @param {?} message
 * @param {?} index
 * @return {?}
 */
function addError$2(errorType, errors, control, formArrayName, controlName, message, index) {
    switch (errorType) {
        case 'beforeCurrStartDate':
            Object.assign(errors, {
                beforeCurrStartDate: message
            });
            break;
        case 'afterPrevEndDate':
            Object.assign(errors, {
                afterPrevEndDate: message
            });
            break;
        case 'afterNextStartDate':
            Object.assign(errors, {
                afterNextStartDate: message
            });
            break;
        case 'beforeFSIDate':
            Object.assign(errors, {
                beforeFSIDate: message
            });
            break;
        case 'afterLSSDate':
            Object.assign(errors, {
                afterLSSDate: message
            });
            break;
    }
    /** @type {?} */
    var dateControl = ((/** @type {?} */ (control.get(formArrayName))))
        .at(index)
        .get(controlName);
    if (!dateControl.hasError(errorType)) {
        dateControl.setErrors(errors);
    }
}
/**
 * @param {?} startDateControl
 * @param {?} endDateControl
 * @param {?} errorType
 * @return {?}
 */
function updateValueAndValiditySameSlot(startDateControl, endDateControl, errorType) {
    /** @type {?} */
    var errors = {};
    /** @type {?} */
    var endErrors = endDateControl ? endDateControl.errors : null;
    /** @type {?} */
    var startErrors = startDateControl ? startDateControl.errors : null;
    switch (errorType) {
        case 'beforeCurrStartDate':
            if (endErrors && endDateControl.hasError('beforeCurrStartDate')) {
                delete endErrors.beforeCurrStartDate;
                Object.assign(errors, endErrors);
                errors = Object.keys(errors).length === 0 ? null : errors;
                endDateControl.setErrors(errors);
            }
            break;
        case 'beforeFSIDate':
            if (startErrors && startDateControl.hasError('beforeFSIDate')) {
                delete startErrors.beforeFSIDate;
                Object.assign(errors, startErrors);
                errors = Object.keys(errors).length === 0 ? null : errors;
                startDateControl.setErrors(errors);
            }
            break;
        case 'afterLSSDate':
            if (endErrors && endDateControl.hasError('afterLSSDate')) {
                delete endErrors.afterLSSDate;
                Object.assign(errors, endErrors);
                errors = Object.keys(errors).length === 0 ? null : errors;
                endDateControl.setErrors(errors);
            }
            break;
    }
}
/**
 * @param {?} startDateControl
 * @return {?}
 */
function updateValueAndValidityDiffSlotSD(startDateControl) {
    /** @type {?} */
    var errors = {};
    if (startDateControl) {
        /** @type {?} */
        var startErrors = startDateControl.errors;
        if (startErrors && startDateControl.hasError('afterPrevEndDate')) {
            delete startErrors.afterPrevEndDate;
            Object.assign(errors, startErrors);
            errors = Object.keys(errors).length === 0 ? null : errors;
            startDateControl.setErrors(errors === {} ? null : errors);
        }
    }
}
/**
 * @param {?} endDateControl
 * @return {?}
 */
function updateValueAndValidityDiffSlotED(endDateControl) {
    /** @type {?} */
    var errors = {};
    if (endDateControl) {
        /** @type {?} */
        var endErrors = endDateControl.errors;
        if (endErrors && endDateControl.hasError('afterNextStartDate')) {
            delete endErrors.afterNextStartDate;
            Object.assign(errors, endErrors);
            errors = Object.keys(errors).length === 0 ? null : errors;
            endDateControl.setErrors(errors === {} ? null : errors);
        }
    }
}
/**
 * @param {?} TLSSDate
 * @param {?} currSlotEndDate
 * @return {?}
 */
function isEDAfterLSSDate(TLSSDate, currSlotEndDate) {
    return TLSSDate.isValid() && currSlotEndDate.isAfter(TLSSDate, PRECISION);
}
/**
 * @param {?} FSIDate
 * @param {?} TLSSDate
 * @param {?} currSlotStartDate
 * @return {?}
 */
function isSDBeforeFSIOrAfterLSS(FSIDate, TLSSDate, currSlotStartDate) {
    /** @type {?} */
    var result = false;
    if (TLSSDate !== '') {
        result =
            TLSSDate.isValid() && currSlotStartDate.isAfter(TLSSDate, PRECISION);
    }
    if (FSIDate !== '') {
        result =
            result ||
                (FSIDate.isValid() && currSlotStartDate.isBefore(FSIDate, PRECISION));
    }
    return result;
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/FSISitesValidator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var moment$f = moment__WEBPACK_IMPORTED_MODULE_13__;
/** @type {?} */
var EMPTY$1 = '';
/**
 * @param {?} ValidatefieldName
 * @param {?} siteInitiationMethod
 * @param {?} siMethodPercentValue
 * @param {?} fieldCollections
 * @param {?=} fieldDateCollections
 * @return {?}
 */
function FSISitesValidator(ValidatefieldName, siteInitiationMethod, siMethodPercentValue, fieldCollections, fieldDateCollections) {
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var returnVal = null;
        /** @type {?} */
        var errors = null;
        if (control.get(siteInitiationMethod) && control.get(siteInitiationMethod).value === siMethodPercentValue) {
            if (control !== undefined && control !== null) {
                /** @type {?} */
                var validateControl = (/** @type {?} */ (control.get(ValidatefieldName)));
                errors = initializeErrorsObject$3(validateControl.errors, validateControl);
            }
            if (fieldCollections && fieldCollections.length > 0) {
                if (fieldCollections.length === 3) {
                    if (fieldCollections[0] &&
                        fieldCollections[1] &&
                        fieldCollections[2]) {
                        /** @type {?} */
                        var fieldCollFirst = fieldCollections[0].toString();
                        /** @type {?} */
                        var fieldCollSecond = fieldCollections[1].toString();
                        /** @type {?} */
                        var fieldCollThird = fieldCollections[2].toString();
                        /** @type {?} */
                        var fieldControlFirst = control.get(fieldCollFirst);
                        /** @type {?} */
                        var fieldControlSecond = control.get(fieldCollSecond);
                        /** @type {?} */
                        var fieldControlThird = control.get(fieldCollThird);
                        if (fieldControlFirst &&
                            fieldControlSecond && fieldControlThird) {
                            /** @type {?} */
                            var fieldFirstVal = fieldControlFirst.value;
                            /** @type {?} */
                            var fieldSecondVal = fieldControlSecond.value;
                            /** @type {?} */
                            var fieldThirdVal = fieldControlThird.value;
                            if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(fieldFirstVal, true) ||
                                common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(fieldSecondVal, true) ||
                                common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(fieldThirdVal, true)) {
                                if (ValidatefieldName) {
                                    /** @type {?} */
                                    var validatFieldControl = control.get(ValidatefieldName);
                                    if (validatFieldControl) {
                                        /** @type {?} */
                                        var validateFieldVal = validatFieldControl.value;
                                        /** @type {?} */
                                        var emptyValidator = checkForEmpty(validateFieldVal);
                                        if (emptyValidator) {
                                            Object.assign(errors, emptyValidator);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (fieldDateCollections && fieldDateCollections.length > 0) {
                if (fieldDateCollections.length === 3) {
                    if (fieldDateCollections[0] &&
                        fieldDateCollections[1] &&
                        fieldDateCollections[2]) {
                        /** @type {?} */
                        var fieldCollFirst = fieldDateCollections[0].toString();
                        /** @type {?} */
                        var fieldCollSecond = fieldDateCollections[1].toString();
                        /** @type {?} */
                        var fieldCollThird = fieldDateCollections[2].toString();
                        /** @type {?} */
                        var fieldControlFirst = control.get(fieldCollFirst);
                        /** @type {?} */
                        var fieldControlSecond = control.get(fieldCollSecond);
                        /** @type {?} */
                        var fieldControlThird = control.get(fieldCollThird);
                        if (fieldControlFirst &&
                            fieldControlSecond && fieldControlThird) {
                            /** @type {?} */
                            var fieldFirstVal = fieldControlFirst.value;
                            /** @type {?} */
                            var fieldSecondVal = fieldControlSecond.value;
                            /** @type {?} */
                            var fieldThirdVal = fieldControlThird.value;
                            if ((fieldFirstVal !== undefined &&
                                fieldFirstVal !== null &&
                                fieldFirstVal !== EMPTY$1) ||
                                (fieldSecondVal !== undefined &&
                                    fieldSecondVal !== null &&
                                    fieldSecondVal !== EMPTY$1) ||
                                (fieldThirdVal !== undefined &&
                                    fieldThirdVal !== null &&
                                    fieldThirdVal !== EMPTY$1)) {
                                if (ValidatefieldName) {
                                    /** @type {?} */
                                    var validatFieldControl = control.get(ValidatefieldName);
                                    if (validatFieldControl) {
                                        /** @type {?} */
                                        var validateFieldVal = validatFieldControl.value;
                                        /** @type {?} */
                                        var emptyValidator = checkForEmpty(validateFieldVal);
                                        if (emptyValidator) {
                                            Object.assign(errors, emptyValidator);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
            if (Object.keys(errors).length !== 0) {
                control.get(ValidatefieldName).setErrors(errors);
                returnVal = {};
                returnVal[ValidatefieldName] = errors;
            }
            else {
                control.get(ValidatefieldName).setErrors(null);
            }
        }
        return returnVal;
    });
}
/**
 * @param {?} errors
 * @param {?} sitesControl
 * @return {?}
 */
function initializeErrorsObject$3(errors, sitesControl) {
    errors = sitesControl.errors;
    if (!errors) {
        errors = {};
    }
    if (errors.NonEmptyField) {
        delete errors.NonEmptyField;
    }
    return errors;
}
/**
 * @param {?} val
 * @return {?}
 */
function checkForEmpty(val) {
    if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(val)) {
        return null;
    }
    else {
        return { NonEmptyField: true };
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/csi-blank.validator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} controlNamesTobeChecked
 * @param {?} message
 * @return {?}
 */
function CSIBlank(controlNamesTobeChecked, message) {
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var errors = {};
        /** @type {?} */
        var allValues = control.getRawValue();
        if (allValues && allValues.length > 0) {
            allValues.forEach((/**
             * @param {?} value
             * @param {?} index
             * @return {?}
             */
            function (value, index) {
                /** @type {?} */
                var noOfblankFields = 0;
                controlNamesTobeChecked.forEach((/**
                 * @param {?} controlName
                 * @return {?}
                 */
                function (controlName) {
                    if (!common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(value[controlName])) {
                        noOfblankFields++;
                    }
                }));
                if (noOfblankFields &&
                    noOfblankFields !== 0 &&
                    noOfblankFields !== controlNamesTobeChecked.length) {
                    controlNamesTobeChecked.forEach((/**
                     * @param {?} controlName
                     * @return {?}
                     */
                    function (controlName) {
                        if (!common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(value[controlName])) {
                            addError$3(errors, control, index, controlName, message.BLANK_FIELD);
                        }
                        else {
                            updateValueAndValidityOfSlot(control, controlName, index);
                        }
                    }));
                }
                else {
                    updateValueAndValidityOfAllSlotField(control, controlNamesTobeChecked, index);
                }
            }));
        }
        if (errors) {
            errors = Object.keys(errors).length === 0 ? null : errors;
        }
        return errors;
    });
}
/**
 * @param {?} errors
 * @param {?} control
 * @param {?} index
 * @param {?} controlName
 * @param {?} message
 * @return {?}
 */
function addError$3(errors, control, index, controlName, message) {
    Object.assign(errors, {
        blankField: message
    });
    /** @type {?} */
    var dateControl = ((/** @type {?} */ (control))).at(index).get(controlName);
    if (!dateControl.hasError('matDatepickerParse')) {
        if (!dateControl.hasError('blankField')) {
            dateControl.setErrors(errors);
        }
    }
    else {
        updateValueAndValidityOfSlot(control, controlName, index);
    }
}
/**
 * @param {?} slotControl
 * @param {?} controlNamesTobeChecked
 * @param {?} index
 * @return {?}
 */
function updateValueAndValidityOfAllSlotField(slotControl, controlNamesTobeChecked, index) {
    controlNamesTobeChecked.forEach((/**
     * @param {?} controlName
     * @return {?}
     */
    function (controlName) {
        updateValueAndValidityOfSlot(slotControl, controlName, index);
    }));
}
/**
 * @param {?} slotControl
 * @param {?} controlName
 * @param {?} index
 * @return {?}
 */
function updateValueAndValidityOfSlot(slotControl, controlName, index) {
    if (slotControl && slotControl.at(index)) {
        /** @type {?} */
        var control = slotControl.at(index).get(controlName);
        /** @type {?} */
        var errors = slotControl.at(index).get(controlName).errors;
        if (errors) {
            if (control && control.hasError('blankField')) {
                delete errors.blankField;
            }
            errors =
                errors !== null
                    ? Object.keys(errors).length === 0
                        ? null
                        : errors
                    : errors;
            control.setErrors(errors);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/SiteInitiationValidator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var EMPTY$2 = '';
/**
 * @param {?} sitesCollections
 * @return {?}
 */
function SiteInitiationValidator(sitesCollections) {
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        /** @type {?} */
        var returnVal = null;
        /** @type {?} */
        var error1 = null;
        /** @type {?} */
        var error2 = null;
        /** @type {?} */
        var error3 = null;
        /** @type {?} */
        var firstCntrlVal = false;
        /** @type {?} */
        var secondCntrlVal = false;
        /** @type {?} */
        var thirdCntrlVal = false;
        if (control !== null && control !== undefined) {
            if (sitesCollections && sitesCollections.length > 0) {
                if (sitesCollections.length === 3) {
                    /** @type {?} */
                    var fieldColFirst = sitesCollections[0].toString();
                    /** @type {?} */
                    var fieldColSecond = sitesCollections[1].toString();
                    /** @type {?} */
                    var fieldColThird = sitesCollections[2].toString();
                    /** @type {?} */
                    var fieldControlFirst = (/** @type {?} */ (control.get(fieldColFirst)));
                    /** @type {?} */
                    var fieldControlSecond = (/** @type {?} */ (control.get(fieldColSecond)));
                    /** @type {?} */
                    var fieldControlThird = (/** @type {?} */ (control.get(fieldColThird)));
                    //  initatilizationRootControlErrors(control, fieldColFirst, fieldColSecond, fieldColThird);
                    if (fieldControlFirst && !(fieldControlFirst.invalid && fieldControlFirst.errors)
                        && (fieldControlFirst.value != null && fieldControlFirst.value !== undefined && fieldControlFirst.value !== EMPTY$2)) {
                        firstCntrlVal = true;
                    }
                    else if (fieldControlSecond && !(fieldControlSecond.invalid && fieldControlSecond.errors)
                        && (fieldControlSecond.value != null && fieldControlSecond.value !== undefined
                            && fieldControlSecond.value !== EMPTY$2)) {
                        secondCntrlVal = true;
                    }
                    else if (fieldControlThird && !(fieldControlThird.invalid && fieldControlThird.errors)
                        && (fieldControlThird.value != null && fieldControlThird.value !== undefined
                            && fieldControlThird.value !== EMPTY$2)) {
                        thirdCntrlVal = true;
                    }
                    if (firstCntrlVal) {
                        error2 = initializeErrorsObject$4(error2, fieldControlSecond);
                        error3 = initializeErrorsObject$4(error3, fieldControlThird);
                        error1 = initializeErrorsObject$4(error1, fieldControlFirst);
                        /** @type {?} */
                        var validateSecond = fieldControlSecond.value;
                        /** @type {?} */
                        var emptyValidator2 = checkForEmpty$1(validateSecond);
                        if (emptyValidator2) {
                            Object.assign(error2, emptyValidator2);
                        }
                        /** @type {?} */
                        var validateThird = fieldControlThird.value;
                        /** @type {?} */
                        var emptyValidator3 = checkForEmpty$1(validateThird);
                        if (emptyValidator3) {
                            Object.assign(error3, emptyValidator3);
                        }
                        returnVal = {};
                        if (Object.keys(error2).length !== 0) {
                            control.get(fieldColSecond).setErrors(error2);
                            returnVal[fieldColSecond] = error2;
                        }
                        else {
                            control.get(fieldColSecond).setErrors(null);
                        }
                        if (Object.keys(error3).length !== 0) {
                            control.get(fieldColThird).setErrors(error3);
                            returnVal[fieldColThird] = error3;
                        }
                        else {
                            control.get(fieldColThird).setErrors(null);
                        }
                    }
                    else if (secondCntrlVal) {
                        error2 = initializeErrorsObject$4(error2, fieldControlSecond);
                        error3 = initializeErrorsObject$4(error3, fieldControlThird);
                        error1 = initializeErrorsObject$4(error1, fieldControlFirst);
                        /** @type {?} */
                        var validateFirst = fieldControlFirst.value;
                        /** @type {?} */
                        var emptyValidator1 = checkForEmpty$1(validateFirst);
                        if (emptyValidator1) {
                            Object.assign(error1, emptyValidator1);
                        }
                        /** @type {?} */
                        var validateThird = fieldControlThird.value;
                        /** @type {?} */
                        var emptyValidator3 = checkForEmpty$1(validateThird);
                        if (emptyValidator3) {
                            Object.assign(error3, emptyValidator3);
                        }
                        returnVal = {};
                        if (Object.keys(error1).length !== 0) {
                            control.get(fieldColFirst).setErrors(error1);
                            returnVal[fieldColFirst] = error1;
                        }
                        else {
                            control.get(fieldColFirst).setErrors(null);
                        }
                        if (Object.keys(error3).length !== 0) {
                            control.get(fieldColThird).setErrors(error3);
                            returnVal[fieldColThird] = error3;
                        }
                        else {
                            control.get(fieldColThird).setErrors(null);
                        }
                    }
                    else if (thirdCntrlVal) {
                        error2 = initializeErrorsObject$4(error2, fieldControlSecond);
                        error3 = initializeErrorsObject$4(error3, fieldControlThird);
                        error1 = initializeErrorsObject$4(error1, fieldControlFirst);
                        /** @type {?} */
                        var validateFirst = fieldControlFirst.value;
                        /** @type {?} */
                        var emptyValidator1 = checkForEmpty$1(validateFirst);
                        if (emptyValidator1) {
                            Object.assign(error1, emptyValidator1);
                        }
                        /** @type {?} */
                        var validateSecond = fieldControlSecond.value;
                        /** @type {?} */
                        var emptyValidator2 = checkForEmpty$1(validateSecond);
                        if (emptyValidator2) {
                            Object.assign(error2, emptyValidator2);
                        }
                        returnVal = {};
                        if (Object.keys(error1).length !== 0) {
                            control.get(fieldColFirst).setErrors(error1);
                            returnVal[fieldColFirst] = error1;
                        }
                        else {
                            control.get(fieldColFirst).setErrors(null);
                        }
                        if (Object.keys(error2).length !== 0) {
                            control.get(fieldColSecond).setErrors(error2);
                            returnVal[fieldColSecond] = error2;
                        }
                        else {
                            control.get(fieldColSecond).setErrors(null);
                        }
                    }
                    if (firstCntrlVal === false && secondCntrlVal === false && thirdCntrlVal === false) {
                        error2 = initializeErrorsObject$4(error2, fieldControlSecond);
                        error3 = initializeErrorsObject$4(error3, fieldControlThird);
                        error1 = initializeErrorsObject$4(error1, fieldControlFirst);
                        returnVal = {};
                        if (Object.keys(error2).length !== 0) {
                            control.get(fieldColSecond).setErrors(error2);
                            returnVal[fieldColSecond] = error2;
                        }
                        else {
                            control.get(fieldColSecond).setErrors(null);
                        }
                        if (Object.keys(error3).length !== 0) {
                            control.get(fieldColThird).setErrors(error3);
                            returnVal[fieldColThird] = error3;
                        }
                        else {
                            control.get(fieldColThird).setErrors(null);
                        }
                        if (Object.keys(error1).length !== 0) {
                            control.get(fieldColFirst).setErrors(error1);
                            returnVal[fieldColFirst] = error1;
                        }
                        else {
                            control.get(fieldColFirst).setErrors(null);
                        }
                    }
                }
            }
        }
        returnVal = (returnVal !== null && returnVal !== undefined) ?
            (Object.keys(returnVal).length === 0 ? null : returnVal) : null;
        return returnVal;
    });
}
/**
 * @param {?} errors
 * @param {?} sitesControl
 * @return {?}
 */
function initializeErrorsObject$4(errors, sitesControl) {
    errors = sitesControl.errors;
    if (!errors) {
        errors = {};
    }
    if (errors.NonEmptyField) {
        delete errors.NonEmptyField;
    }
    return errors;
}
/**
 * @param {?} control
 * @param {?} fieldColFirst
 * @param {?} fieldColSecond
 * @param {?} fieldColThird
 * @return {?}
 */
function initatilizationRootControlErrors(control, fieldColFirst, fieldColSecond, fieldColThird) {
    /** @type {?} */
    var errors = control.errors;
    if (errors !== undefined && errors !== null) {
        if (errors[fieldColFirst]) {
            if (errors[fieldColFirst].NonEmptyField) {
                delete errors[fieldColFirst];
                //  control.errors.setErrors(null);
            }
        }
        if (errors[fieldColSecond]) {
            if (errors[fieldColSecond].NonEmptyField) {
                delete errors[fieldColSecond];
                //  control.errors.setErrors(null);
            }
        }
        if (errors[fieldColThird]) {
            if (errors[fieldColThird].NonEmptyField) {
                delete errors[fieldColThird];
                //  control.errors.setErrors(null);
            }
        }
    }
}
/**
 * @param {?} val
 * @return {?}
 */
function checkForEmpty$1(val) {
    if (common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(val)) {
        return null;
    }
    else {
        return { 'NonEmptyField': true };
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/validators/custom-required.validator.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @param {?} totalNoOfSitesFieldName
 * @param {?} sitesToRedistributeFieldName
 * @param {?} parentNoOfSites
 * @param {?} validationRequired
 * @return {?}
 */
function CustomRequired(totalNoOfSitesFieldName, sitesToRedistributeFieldName, parentNoOfSites, validationRequired) {
    return (/**
     * @param {?} control
     * @return {?}
     */
    function (control) {
        if (control.get(totalNoOfSitesFieldName) &&
            control.get(totalNoOfSitesFieldName).value &&
            validationRequired) {
            if (control.get(totalNoOfSitesFieldName).value > parentNoOfSites) {
                /** @type {?} */
                var isInvalidRedist = _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required(control.get(sitesToRedistributeFieldName));
                if (isInvalidRedist) {
                    addError$4((/** @type {?} */ (control.get(sitesToRedistributeFieldName))), isInvalidRedist);
                }
                else {
                    removeError((/** @type {?} */ (control.get(sitesToRedistributeFieldName))), isInvalidRedist);
                }
            }
            else if (parentNoOfSites && control.get(totalNoOfSitesFieldName).value < parentNoOfSites) {
                /** @type {?} */
                var isInvalidRedist = _angular_forms__WEBPACK_IMPORTED_MODULE_3__["Validators"].required(control.get(sitesToRedistributeFieldName));
                if (isInvalidRedist) {
                    removeError((/** @type {?} */ (control.get(sitesToRedistributeFieldName))), isInvalidRedist);
                }
            }
        }
        return null;
    });
}
/**
 * @param {?} sitesToRedistributeControl
 * @param {?} isInvalidRedist
 * @return {?}
 */
function addError$4(sitesToRedistributeControl, isInvalidRedist) {
    sitesToRedistributeControl.setErrors(isInvalidRedist);
}
/**
 * @param {?} sitesToRedistributeControl
 * @param {?} isInvalidRedist
 * @return {?}
 */
function removeError(sitesToRedistributeControl, isInvalidRedist) {
    /** @type {?} */
    var errors = sitesToRedistributeControl.errors;
    if (errors) {
        if (sitesToRedistributeControl &&
            sitesToRedistributeControl.hasError('required')) {
            delete errors.required;
        }
        errors =
            errors !== null
                ? Object.keys(errors).length === 0
                    ? null
                    : errors
                : errors;
        sitesToRedistributeControl.setErrors(errors);
    }
}

/**
 * @fileoverview added by tsickle
 * Generated from: lib/enums/pref-grid-columns-keys.enum.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * If there is any new grid added in preference (Refer PreferenceCategory Enum) then
 * please add corresponding key of grid in this enum.
 */
/** @enum {string} */
var PrefGridColumnsKeys = {
    MCE_GRID: "MCEGrid",
    MCE_GRID_ORDER: "MCEGridOrder",
    MANAGECOUNTRIES_GRID: "ManageCountriesGrid",
    MANAGECOUNTRIES_GRID_ORDER: "ManageCountriesGridOrder",
    SITE_ENROLLMENT_GRID: "SiteEnrollementGrid",
    SITE_DATA_MANAGEMENT_GRID: "newSiteDataManagement",
    STUDY_ENROLLMENT_OVERVIEW_GRID: "newStudyEnrollmentOverviewGrid",
    STUDY_MILESTONES_GRID: "newStudyMilestonesGrid",
    COUNTRY_COMPARISON_GRID: "newCountryComparisonGrid",
    COUNTRY_DETAILS_GRID: "newCountryDetailsGrid",
    COUNTRY_COHORT_COMPARISON_GRID: "newCountryCohortComparisonGrid",
    COUNTRY_COHORT_DETAILS_GRID: "newCountryCohortDetailsGrid",
};

/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: so-common-library.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */


//# sourceMappingURL=so-common-library.js.map


/***/ }),

/***/ "../../environments/environment.ts":
/*!*************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/environments/environment.ts ***!
  \*************************************************************************************************************************/
/*! exports provided: environment */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "environment", function() { return environment; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var common_library__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! common-library */ "../../dist/common-library/fesm5/common-library.js");


// This file can be replaced during build by using the `fileReplacements` array.
// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.
// The list of file replacements can be found in `angular.json`.
// const mainUrl = 'http://10.44.29.23:7070'; // shrikesh
// const mainUrl = 'http://10.44.74.11:7070'; // Gaurav
// const mainUrl = 'http://10.44.75.5:7070'; // Vipin
// const mainUrl = 'http://10.44.74.20:8090';
var mainUrl = window.location.protocol + '//' +
    window.location.hostname + ':' +
    window.location.port;
var environment = {
    production: true,
    clientEncryptionKey: 'TEST1234',
    cacheAge: 30000,
    app_url: window.location.protocol + '//' +
        window.location.hostname + ':' +
        window.location.port + '/app1/index.html',
    login_url: window.location.protocol + '//' +
        window.location.hostname + ':' +
        window.location.port + '/dv/StudyOptimizer/so-main.html',
    cryptoJS: new common_library__WEBPACK_IMPORTED_MODULE_1__["CryptoJSEncryption"](),
    authUrl: mainUrl + "/api/",
    soApiUrl: mainUrl + "/studyoptimizer/api/",
    toSuppressContextMenu: false
};
/*
 * In development mode, to ignore zone related error stack frames such as
 * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can
 * import the following file, but please comment it out in production mode
 * because it will have performance impact when throw error
 */
// import 'zone.js/dist/zone-error';  // Included with Angular CLI.


/***/ }),

/***/ "../../node_modules/moment/locale sync recursive ^\\.\\/.*$":
/*!**************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/moment/locale sync ^\.\/.*$ ***!
  \**************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": "../../node_modules/moment/locale/af.js",
	"./af.js": "../../node_modules/moment/locale/af.js",
	"./ar": "../../node_modules/moment/locale/ar.js",
	"./ar-dz": "../../node_modules/moment/locale/ar-dz.js",
	"./ar-dz.js": "../../node_modules/moment/locale/ar-dz.js",
	"./ar-kw": "../../node_modules/moment/locale/ar-kw.js",
	"./ar-kw.js": "../../node_modules/moment/locale/ar-kw.js",
	"./ar-ly": "../../node_modules/moment/locale/ar-ly.js",
	"./ar-ly.js": "../../node_modules/moment/locale/ar-ly.js",
	"./ar-ma": "../../node_modules/moment/locale/ar-ma.js",
	"./ar-ma.js": "../../node_modules/moment/locale/ar-ma.js",
	"./ar-sa": "../../node_modules/moment/locale/ar-sa.js",
	"./ar-sa.js": "../../node_modules/moment/locale/ar-sa.js",
	"./ar-tn": "../../node_modules/moment/locale/ar-tn.js",
	"./ar-tn.js": "../../node_modules/moment/locale/ar-tn.js",
	"./ar.js": "../../node_modules/moment/locale/ar.js",
	"./az": "../../node_modules/moment/locale/az.js",
	"./az.js": "../../node_modules/moment/locale/az.js",
	"./be": "../../node_modules/moment/locale/be.js",
	"./be.js": "../../node_modules/moment/locale/be.js",
	"./bg": "../../node_modules/moment/locale/bg.js",
	"./bg.js": "../../node_modules/moment/locale/bg.js",
	"./bm": "../../node_modules/moment/locale/bm.js",
	"./bm.js": "../../node_modules/moment/locale/bm.js",
	"./bn": "../../node_modules/moment/locale/bn.js",
	"./bn.js": "../../node_modules/moment/locale/bn.js",
	"./bo": "../../node_modules/moment/locale/bo.js",
	"./bo.js": "../../node_modules/moment/locale/bo.js",
	"./br": "../../node_modules/moment/locale/br.js",
	"./br.js": "../../node_modules/moment/locale/br.js",
	"./bs": "../../node_modules/moment/locale/bs.js",
	"./bs.js": "../../node_modules/moment/locale/bs.js",
	"./ca": "../../node_modules/moment/locale/ca.js",
	"./ca.js": "../../node_modules/moment/locale/ca.js",
	"./cs": "../../node_modules/moment/locale/cs.js",
	"./cs.js": "../../node_modules/moment/locale/cs.js",
	"./cv": "../../node_modules/moment/locale/cv.js",
	"./cv.js": "../../node_modules/moment/locale/cv.js",
	"./cy": "../../node_modules/moment/locale/cy.js",
	"./cy.js": "../../node_modules/moment/locale/cy.js",
	"./da": "../../node_modules/moment/locale/da.js",
	"./da.js": "../../node_modules/moment/locale/da.js",
	"./de": "../../node_modules/moment/locale/de.js",
	"./de-at": "../../node_modules/moment/locale/de-at.js",
	"./de-at.js": "../../node_modules/moment/locale/de-at.js",
	"./de-ch": "../../node_modules/moment/locale/de-ch.js",
	"./de-ch.js": "../../node_modules/moment/locale/de-ch.js",
	"./de.js": "../../node_modules/moment/locale/de.js",
	"./dv": "../../node_modules/moment/locale/dv.js",
	"./dv.js": "../../node_modules/moment/locale/dv.js",
	"./el": "../../node_modules/moment/locale/el.js",
	"./el.js": "../../node_modules/moment/locale/el.js",
	"./en-SG": "../../node_modules/moment/locale/en-SG.js",
	"./en-SG.js": "../../node_modules/moment/locale/en-SG.js",
	"./en-au": "../../node_modules/moment/locale/en-au.js",
	"./en-au.js": "../../node_modules/moment/locale/en-au.js",
	"./en-ca": "../../node_modules/moment/locale/en-ca.js",
	"./en-ca.js": "../../node_modules/moment/locale/en-ca.js",
	"./en-gb": "../../node_modules/moment/locale/en-gb.js",
	"./en-gb.js": "../../node_modules/moment/locale/en-gb.js",
	"./en-ie": "../../node_modules/moment/locale/en-ie.js",
	"./en-ie.js": "../../node_modules/moment/locale/en-ie.js",
	"./en-il": "../../node_modules/moment/locale/en-il.js",
	"./en-il.js": "../../node_modules/moment/locale/en-il.js",
	"./en-nz": "../../node_modules/moment/locale/en-nz.js",
	"./en-nz.js": "../../node_modules/moment/locale/en-nz.js",
	"./eo": "../../node_modules/moment/locale/eo.js",
	"./eo.js": "../../node_modules/moment/locale/eo.js",
	"./es": "../../node_modules/moment/locale/es.js",
	"./es-do": "../../node_modules/moment/locale/es-do.js",
	"./es-do.js": "../../node_modules/moment/locale/es-do.js",
	"./es-us": "../../node_modules/moment/locale/es-us.js",
	"./es-us.js": "../../node_modules/moment/locale/es-us.js",
	"./es.js": "../../node_modules/moment/locale/es.js",
	"./et": "../../node_modules/moment/locale/et.js",
	"./et.js": "../../node_modules/moment/locale/et.js",
	"./eu": "../../node_modules/moment/locale/eu.js",
	"./eu.js": "../../node_modules/moment/locale/eu.js",
	"./fa": "../../node_modules/moment/locale/fa.js",
	"./fa.js": "../../node_modules/moment/locale/fa.js",
	"./fi": "../../node_modules/moment/locale/fi.js",
	"./fi.js": "../../node_modules/moment/locale/fi.js",
	"./fo": "../../node_modules/moment/locale/fo.js",
	"./fo.js": "../../node_modules/moment/locale/fo.js",
	"./fr": "../../node_modules/moment/locale/fr.js",
	"./fr-ca": "../../node_modules/moment/locale/fr-ca.js",
	"./fr-ca.js": "../../node_modules/moment/locale/fr-ca.js",
	"./fr-ch": "../../node_modules/moment/locale/fr-ch.js",
	"./fr-ch.js": "../../node_modules/moment/locale/fr-ch.js",
	"./fr.js": "../../node_modules/moment/locale/fr.js",
	"./fy": "../../node_modules/moment/locale/fy.js",
	"./fy.js": "../../node_modules/moment/locale/fy.js",
	"./ga": "../../node_modules/moment/locale/ga.js",
	"./ga.js": "../../node_modules/moment/locale/ga.js",
	"./gd": "../../node_modules/moment/locale/gd.js",
	"./gd.js": "../../node_modules/moment/locale/gd.js",
	"./gl": "../../node_modules/moment/locale/gl.js",
	"./gl.js": "../../node_modules/moment/locale/gl.js",
	"./gom-latn": "../../node_modules/moment/locale/gom-latn.js",
	"./gom-latn.js": "../../node_modules/moment/locale/gom-latn.js",
	"./gu": "../../node_modules/moment/locale/gu.js",
	"./gu.js": "../../node_modules/moment/locale/gu.js",
	"./he": "../../node_modules/moment/locale/he.js",
	"./he.js": "../../node_modules/moment/locale/he.js",
	"./hi": "../../node_modules/moment/locale/hi.js",
	"./hi.js": "../../node_modules/moment/locale/hi.js",
	"./hr": "../../node_modules/moment/locale/hr.js",
	"./hr.js": "../../node_modules/moment/locale/hr.js",
	"./hu": "../../node_modules/moment/locale/hu.js",
	"./hu.js": "../../node_modules/moment/locale/hu.js",
	"./hy-am": "../../node_modules/moment/locale/hy-am.js",
	"./hy-am.js": "../../node_modules/moment/locale/hy-am.js",
	"./id": "../../node_modules/moment/locale/id.js",
	"./id.js": "../../node_modules/moment/locale/id.js",
	"./is": "../../node_modules/moment/locale/is.js",
	"./is.js": "../../node_modules/moment/locale/is.js",
	"./it": "../../node_modules/moment/locale/it.js",
	"./it-ch": "../../node_modules/moment/locale/it-ch.js",
	"./it-ch.js": "../../node_modules/moment/locale/it-ch.js",
	"./it.js": "../../node_modules/moment/locale/it.js",
	"./ja": "../../node_modules/moment/locale/ja.js",
	"./ja.js": "../../node_modules/moment/locale/ja.js",
	"./jv": "../../node_modules/moment/locale/jv.js",
	"./jv.js": "../../node_modules/moment/locale/jv.js",
	"./ka": "../../node_modules/moment/locale/ka.js",
	"./ka.js": "../../node_modules/moment/locale/ka.js",
	"./kk": "../../node_modules/moment/locale/kk.js",
	"./kk.js": "../../node_modules/moment/locale/kk.js",
	"./km": "../../node_modules/moment/locale/km.js",
	"./km.js": "../../node_modules/moment/locale/km.js",
	"./kn": "../../node_modules/moment/locale/kn.js",
	"./kn.js": "../../node_modules/moment/locale/kn.js",
	"./ko": "../../node_modules/moment/locale/ko.js",
	"./ko.js": "../../node_modules/moment/locale/ko.js",
	"./ku": "../../node_modules/moment/locale/ku.js",
	"./ku.js": "../../node_modules/moment/locale/ku.js",
	"./ky": "../../node_modules/moment/locale/ky.js",
	"./ky.js": "../../node_modules/moment/locale/ky.js",
	"./lb": "../../node_modules/moment/locale/lb.js",
	"./lb.js": "../../node_modules/moment/locale/lb.js",
	"./lo": "../../node_modules/moment/locale/lo.js",
	"./lo.js": "../../node_modules/moment/locale/lo.js",
	"./lt": "../../node_modules/moment/locale/lt.js",
	"./lt.js": "../../node_modules/moment/locale/lt.js",
	"./lv": "../../node_modules/moment/locale/lv.js",
	"./lv.js": "../../node_modules/moment/locale/lv.js",
	"./me": "../../node_modules/moment/locale/me.js",
	"./me.js": "../../node_modules/moment/locale/me.js",
	"./mi": "../../node_modules/moment/locale/mi.js",
	"./mi.js": "../../node_modules/moment/locale/mi.js",
	"./mk": "../../node_modules/moment/locale/mk.js",
	"./mk.js": "../../node_modules/moment/locale/mk.js",
	"./ml": "../../node_modules/moment/locale/ml.js",
	"./ml.js": "../../node_modules/moment/locale/ml.js",
	"./mn": "../../node_modules/moment/locale/mn.js",
	"./mn.js": "../../node_modules/moment/locale/mn.js",
	"./mr": "../../node_modules/moment/locale/mr.js",
	"./mr.js": "../../node_modules/moment/locale/mr.js",
	"./ms": "../../node_modules/moment/locale/ms.js",
	"./ms-my": "../../node_modules/moment/locale/ms-my.js",
	"./ms-my.js": "../../node_modules/moment/locale/ms-my.js",
	"./ms.js": "../../node_modules/moment/locale/ms.js",
	"./mt": "../../node_modules/moment/locale/mt.js",
	"./mt.js": "../../node_modules/moment/locale/mt.js",
	"./my": "../../node_modules/moment/locale/my.js",
	"./my.js": "../../node_modules/moment/locale/my.js",
	"./nb": "../../node_modules/moment/locale/nb.js",
	"./nb.js": "../../node_modules/moment/locale/nb.js",
	"./ne": "../../node_modules/moment/locale/ne.js",
	"./ne.js": "../../node_modules/moment/locale/ne.js",
	"./nl": "../../node_modules/moment/locale/nl.js",
	"./nl-be": "../../node_modules/moment/locale/nl-be.js",
	"./nl-be.js": "../../node_modules/moment/locale/nl-be.js",
	"./nl.js": "../../node_modules/moment/locale/nl.js",
	"./nn": "../../node_modules/moment/locale/nn.js",
	"./nn.js": "../../node_modules/moment/locale/nn.js",
	"./pa-in": "../../node_modules/moment/locale/pa-in.js",
	"./pa-in.js": "../../node_modules/moment/locale/pa-in.js",
	"./pl": "../../node_modules/moment/locale/pl.js",
	"./pl.js": "../../node_modules/moment/locale/pl.js",
	"./pt": "../../node_modules/moment/locale/pt.js",
	"./pt-br": "../../node_modules/moment/locale/pt-br.js",
	"./pt-br.js": "../../node_modules/moment/locale/pt-br.js",
	"./pt.js": "../../node_modules/moment/locale/pt.js",
	"./ro": "../../node_modules/moment/locale/ro.js",
	"./ro.js": "../../node_modules/moment/locale/ro.js",
	"./ru": "../../node_modules/moment/locale/ru.js",
	"./ru.js": "../../node_modules/moment/locale/ru.js",
	"./sd": "../../node_modules/moment/locale/sd.js",
	"./sd.js": "../../node_modules/moment/locale/sd.js",
	"./se": "../../node_modules/moment/locale/se.js",
	"./se.js": "../../node_modules/moment/locale/se.js",
	"./si": "../../node_modules/moment/locale/si.js",
	"./si.js": "../../node_modules/moment/locale/si.js",
	"./sk": "../../node_modules/moment/locale/sk.js",
	"./sk.js": "../../node_modules/moment/locale/sk.js",
	"./sl": "../../node_modules/moment/locale/sl.js",
	"./sl.js": "../../node_modules/moment/locale/sl.js",
	"./sq": "../../node_modules/moment/locale/sq.js",
	"./sq.js": "../../node_modules/moment/locale/sq.js",
	"./sr": "../../node_modules/moment/locale/sr.js",
	"./sr-cyrl": "../../node_modules/moment/locale/sr-cyrl.js",
	"./sr-cyrl.js": "../../node_modules/moment/locale/sr-cyrl.js",
	"./sr.js": "../../node_modules/moment/locale/sr.js",
	"./ss": "../../node_modules/moment/locale/ss.js",
	"./ss.js": "../../node_modules/moment/locale/ss.js",
	"./sv": "../../node_modules/moment/locale/sv.js",
	"./sv.js": "../../node_modules/moment/locale/sv.js",
	"./sw": "../../node_modules/moment/locale/sw.js",
	"./sw.js": "../../node_modules/moment/locale/sw.js",
	"./ta": "../../node_modules/moment/locale/ta.js",
	"./ta.js": "../../node_modules/moment/locale/ta.js",
	"./te": "../../node_modules/moment/locale/te.js",
	"./te.js": "../../node_modules/moment/locale/te.js",
	"./tet": "../../node_modules/moment/locale/tet.js",
	"./tet.js": "../../node_modules/moment/locale/tet.js",
	"./tg": "../../node_modules/moment/locale/tg.js",
	"./tg.js": "../../node_modules/moment/locale/tg.js",
	"./th": "../../node_modules/moment/locale/th.js",
	"./th.js": "../../node_modules/moment/locale/th.js",
	"./tl-ph": "../../node_modules/moment/locale/tl-ph.js",
	"./tl-ph.js": "../../node_modules/moment/locale/tl-ph.js",
	"./tlh": "../../node_modules/moment/locale/tlh.js",
	"./tlh.js": "../../node_modules/moment/locale/tlh.js",
	"./tr": "../../node_modules/moment/locale/tr.js",
	"./tr.js": "../../node_modules/moment/locale/tr.js",
	"./tzl": "../../node_modules/moment/locale/tzl.js",
	"./tzl.js": "../../node_modules/moment/locale/tzl.js",
	"./tzm": "../../node_modules/moment/locale/tzm.js",
	"./tzm-latn": "../../node_modules/moment/locale/tzm-latn.js",
	"./tzm-latn.js": "../../node_modules/moment/locale/tzm-latn.js",
	"./tzm.js": "../../node_modules/moment/locale/tzm.js",
	"./ug-cn": "../../node_modules/moment/locale/ug-cn.js",
	"./ug-cn.js": "../../node_modules/moment/locale/ug-cn.js",
	"./uk": "../../node_modules/moment/locale/uk.js",
	"./uk.js": "../../node_modules/moment/locale/uk.js",
	"./ur": "../../node_modules/moment/locale/ur.js",
	"./ur.js": "../../node_modules/moment/locale/ur.js",
	"./uz": "../../node_modules/moment/locale/uz.js",
	"./uz-latn": "../../node_modules/moment/locale/uz-latn.js",
	"./uz-latn.js": "../../node_modules/moment/locale/uz-latn.js",
	"./uz.js": "../../node_modules/moment/locale/uz.js",
	"./vi": "../../node_modules/moment/locale/vi.js",
	"./vi.js": "../../node_modules/moment/locale/vi.js",
	"./x-pseudo": "../../node_modules/moment/locale/x-pseudo.js",
	"./x-pseudo.js": "../../node_modules/moment/locale/x-pseudo.js",
	"./yo": "../../node_modules/moment/locale/yo.js",
	"./yo.js": "../../node_modules/moment/locale/yo.js",
	"./zh-cn": "../../node_modules/moment/locale/zh-cn.js",
	"./zh-cn.js": "../../node_modules/moment/locale/zh-cn.js",
	"./zh-hk": "../../node_modules/moment/locale/zh-hk.js",
	"./zh-hk.js": "../../node_modules/moment/locale/zh-hk.js",
	"./zh-tw": "../../node_modules/moment/locale/zh-tw.js",
	"./zh-tw.js": "../../node_modules/moment/locale/zh-tw.js"
};


function webpackContext(req) {
	var id = webpackContextResolve(req);
	return __webpack_require__(id);
}
function webpackContextResolve(req) {
	if(!__webpack_require__.o(map, req)) {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	}
	return map[req];
}
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = "../../node_modules/moment/locale sync recursive ^\\.\\/.*$";

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/auth-main-header/auth-main-header.component.html":
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/auth-main-header/auth-main-header.component.html ***!
  \***********************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<nav class=\"navbar navbar-expand navbar-light bg-light\">\r\n  <div class=\"navbar-brand d-flex align-items-center\">\r\n    <label class=\"study-o-text\">IQVIA <sup>TM</sup> StudyOptimizer</label>\r\n    <div class=\"v-divider\"></div>\r\n    <img class=\"logo\" [src]=\"logoUrl\" alt=\"\" (error)=\"hideImage($event)\" [ngClass]=\"{ hideImage: hideCustomerLogo }\" />\r\n  </div>\r\n  <!-- <div class=\"collapse navbar-collapse d-flex justify-content-end full-height\" id=\"navbarSupportedContent\">\r\n\r\n    <ul class=\"navbar-nav full-height\">\r\n    </ul>\r\n  </div> -->\r\n</nav>");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/breadcrumb/breadcrumb.component.html":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/breadcrumb/breadcrumb.component.html ***!
  \***********************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"col-12\">\r\n  <div class=\"row\">\r\n    <nav aria-label=\"breadcrumb\">\r\n      <ol class=\"breadcrumb\">        \r\n        <li class=\"breadcrumb-item\" *ngFor=\"let breadcrumb of breadcrumbs\">\r\n          <a [routerLink]=\"[breadcrumb.url, breadcrumb.params]\">{{ breadcrumb.label }}</a>\r\n        </li>\r\n      </ol>\r\n    </nav>\r\n  </div>\r\n</div>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/confirmation-dialog/confirmation-dialog.component.html":
/*!*****************************************************************************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/confirmation-dialog/confirmation-dialog.component.html ***!
  \*****************************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"dialog-heading\">\r\n  <div *ngIf=\"data && data.prefixImageUrl\" class=\"col-sm-3\">\r\n    <img [src]=\"data?.prefixImageUrl\" alt=\"\" />\r\n  </div>\r\n  <div\r\n    [ngClass]=\"{\r\n      'col-sm-6': data.prefixImageUrl && data.postfixImageUrl ? true : false,\r\n      'col-sm-9': data.prefixImageUrl || data.postfixImageUrl ? true : false,\r\n      'col-sm-12': !data.prefixImageUrl && !data.postfixImageUrl ? true : false\r\n    }\"\r\n  >\r\n    <h1 mat-dialog-title *ngIf=\"data.heading\">{{ data?.heading }}</h1>\r\n  </div>\r\n  <div *ngIf=\"data && data.postfixImageUrl\" class=\"col-sm-3\">\r\n    <img [src]=\"data?.postfixImageUrl\" alt=\"\" />\r\n  </div>\r\n</div>\r\n<div mat-dialog-content class=\"dialog-content-container\">\r\n  <div class=\"col-sm-3\" *ngIf=\"data && data.prefixMaterialIcon\">\r\n    <i\r\n      class=\"material-icons\"\r\n      [ngStyle]=\"{\r\n        color: data?.prefixMaterialIcon?.color,\r\n        'font-size': data?.prefixMaterialIcon?.size\r\n      }\"\r\n    >\r\n      {{ data?.prefixMaterialIcon?.name }}\r\n    </i>\r\n  </div>\r\n  <div\r\n    class=\"html-data-container\"\r\n    [class]=\"data.contentClass\"\r\n    [ngClass]=\"{\r\n      'col-sm-6':\r\n        data.postfixMaterialIcon && data.prefixMaterialIcon ? true : false,\r\n      'col-sm-9':\r\n        data.prefixMaterialIcon || data.postfixMaterialIcon ? true : false,\r\n      'col-sm-12':\r\n        !data.prefixMaterialIcon && !data.postfixMaterialIcon ? true : false\r\n    }\"\r\n  >\r\n    <div [innerHtml]=\"data?.message\"></div>\r\n  </div>\r\n  <div class=\"col-sm-3\" *ngIf=\"data && data.postfixMaterialIcon\">\r\n    <i\r\n      class=\"material-icons\"\r\n      [ngStyle]=\"{\r\n        color: data?.postfixMaterialIcon?.color,\r\n        'font-size': data?.postfixMaterialIcon?.size\r\n      }\"\r\n    >\r\n      {{ data?.postfixMaterialIcon?.name }}\r\n    </i>\r\n  </div>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <button\r\n    mat-button\r\n    class=\"cancel-btn\"\r\n    *ngIf=\"showCancel()\"\r\n    (click)=\"cancel(data.cancelLabel)\"\r\n  >\r\n    {{ data?.cancelLabel }}\r\n  </button>\r\n  <button mat-button class=\"ok-btn\" (click)=\"ok(data.okLabel)\" cdkFocusInitial>\r\n    {{ data?.okLabel }}\r\n  </button>\r\n</div>\r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/context-menu/context-menu.component.html":
/*!***************************************************************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/context-menu/context-menu.component.html ***!
  \***************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ng-content></ng-content>\r\n<mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\" [class]=\"'context-menu ' + contextMenuClass\" [xPosition]=\"xPosition\"\r\n  [yPosition]=\"yPosition\">\r\n  <h5 class=\"heading\" *ngIf=\"heading\" [matTooltipClass]=\"'ctos-tooltip'\" [matTooltip]=\"heading\"\r\n    matTooltipPosition=\"above\" [innerHTML]=\"heading\"></h5>\r\n  <div *ngFor=\"let item of options\" [matTooltip]=\"item.tooltipMsg\" matTooltipPosition=\"right\"\r\n    [matTooltipDisabled]=\"item.isEnabled || !item.tooltipMsg\">\r\n    <button mat-menu-item [disabled]=\"!item.isEnabled\" (click)=\"menuClick(item.name)\">\r\n      <span>{{ item.name }}</span>\r\n      <hr />\r\n    </button>\r\n  </div>\r\n</mat-menu>");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/display-banner/display-banner.component.html":
/*!*******************************************************************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/display-banner/display-banner.component.html ***!
  \*******************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("  <div  [ngClass]='data.messageType'>\r\n    <p class=\"position-text\">\r\n      <img [src]='data.icon'>\r\n      <!-- <span  class=\"positive-icon\"></span> -->\r\n      <span class=\"data\">{{data.message}}</span> \r\n    </p>\r\n    \r\n    <a (click)='close()' class=\"closeBanner\">&times;</a>\r\n  </div>\r\n\r\n  \r\n");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/export/export.component.html":
/*!***************************************************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/export/export.component.html ***!
  \***************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/info/info.component.html":
/*!***********************************************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/info/info.component.html ***!
  \***********************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<h5>{{message}}</h5>");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/main-header/main-header.component.html":
/*!*************************************************************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/main-header/main-header.component.html ***!
  \*************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<nav class=\"navbar navbar-expand navbar-light bg-light\">\r\n  <div class=\"navbar-brand d-flex align-items-center\">\r\n    <label class=\"study-o-text\">IQVIA <sup>TM</sup> StudyOptimizer</label>\r\n    <div class=\"v-divider\"></div>\r\n    <img class=\"logo\" [src]=\"logoUrl\" alt=\"\" (error)=\"hideImage($event)\" [ngClass]=\"{ hideImage: hideCustomerLogo }\" />\r\n  </div>\r\n  <div class=\"collapse navbar-collapse d-flex justify-content-end full-height\" id=\"navbarSupportedContent\">\r\n\r\n    <ul class=\"navbar-nav full-height\">\r\n      <li class=\"nav-item text-truncate\" *ngFor=\"let item of items\" (click)=\"onTabClick(item.$moduleName)\">\r\n        <a class=\"nav-link text-truncate\" [innerHTML]=\"item.$name\"> </a>\r\n      </li>\r\n\r\n      <div id=\"my-widget\" class=\"nav-item\">\r\n        <div class=\"appcues-widget-icon\">\r\n          <img [src]=\"appInfoUrl\" width=\"30px\" height=\"30px\" />\r\n        </div>\r\n      </div>\r\n\r\n      <li class=\"nav-item divider-menu-item\">\r\n        <div class=\"v-divider\"></div>\r\n      </li>\r\n\r\n      <li class=\"nav-item\">\r\n        <div class=\"profile-wrapper\">\r\n          <button mat-icon-button class=\"\" [matMenuTriggerFor]=\"menu\">\r\n            <div class=\"profile-config\">\r\n              <span [innerHTML]=\"userInitials\"></span>\r\n            </div>\r\n          </button>\r\n          <!-- Add below code to implement requirement of SO-19533 -->\r\n          <mat-menu #menu=\"matMenu\" [overlapTrigger]=\"false\" [class]=\"'context-menu ' + contextMenuClass\"\r\n            [xPosition]=\"'before'\" [yPosition]=\"'below'\">\r\n            <h5 class=\"heading\" *ngIf=\"UserNameToolTip\" [matTooltipClass]=\"'ctos-tooltip'\" [matTooltip]=\"UserNameToolTip\"\r\n              matTooltipPosition=\"above\">\r\n              <div class=\"fullname_subheader\" [innerHTML]=\"firstName\"></div>\r\n              <div class=\"fullname_subheader\" [innerHTML]=\"lastName\"></div>\r\n            </h5>\r\n            <div *ngFor=\"let item of profileItems\" [matTooltip]=\"item.tooltipMsg\" matTooltipPosition=\"right\"\r\n              [matTooltipDisabled]=\"item.isEnabled || !item.tooltipMsg\">\r\n              <button mat-menu-item [disabled]=\"!item.isEnabled\" (click)=\"onClickAction(item.name)\">\r\n                <span>{{ item.name }}</span>\r\n                <hr />\r\n              </button>\r\n             </div> \r\n          </mat-menu>\r\n          </div>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</nav>");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/nested-dropdown/nested-dropdown.component.html":
/*!*********************************************************************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/nested-dropdown/nested-dropdown.component.html ***!
  \*********************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<mat-menu #menu class=\"nested-dropdown-menu world-wide-nested-dropdown-panel\">\r\n    <ng-container *ngFor=\"let item of items\">\r\n        <button *ngIf=\"!item.children; else branch\" mat-menu-item (click)=\"optionClicked(item)\">{{item.name}}</button>\r\n        <ng-template #branch>\r\n            <button mat-menu-item [matMenuTriggerFor]=\"innerPanel.menu\"\r\n                (click)=\"optionClicked(item)\">{{item.name}}</button>\r\n            <ctos-nested-dropdown #innerPanel [items]=\"item.children\" (optionClick)=\"optionClicked($event)\">\r\n            </ctos-nested-dropdown>\r\n        </ng-template>\r\n    </ng-container>\r\n</mat-menu>");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/notes/notes.component.html":
/*!*************************************************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/notes/notes.component.html ***!
  \*************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<!-- <h3 mat-dialog-title> {{countryNotesProp?.resources?.TITLE}} {{countryNotesProp?.countryName}}</h3> -->\r\n<h3 mat-dialog-title> {{countryNotesProp?.titleLabel}} {{countryNotesProp?.titleValue}}</h3>\r\n<div mat-dialog-content class=\"country-notes-container\">\r\n    <!-- <ng-container *ngIf=\"!countryNotesProp?.isMCGrid\"> -->\r\n    <ng-container *ngIf=\"countryNotesProp?.areNotesEditable\">\r\n        <textarea rows=\"3\" cols=\"50\" class=\"form-control\" maxlength=\"1024\" (ngModelChange)=\"onContentChange($event)\"\r\n            [disabled]=\"!areNotesEditable\" [(ngModel)]=\"noteTemplate.content\" #content=\"ngModel\" id=\"content\"\r\n            name=\"content\" placeholder=\"{{countryNotesProp?.resources?.TYPE_TO_ADD_COMMENT}}\"></textarea>\r\n        <div class=\"row action-btn-container\">\r\n            <button mat-button class=\"btn-add-comment\" *ngIf=\"isEditMode\" [disableRipple]=\"true\" (click)=\"resetNote()\">\r\n                Cancel\r\n            </button>\r\n            <button mat-button class=\"btn-add-comment\" [disabled]=\"!isEnabled()\" [disableRipple]=\"true\"\r\n                (click)=\"addComment()\">\r\n                <i *ngIf=\"!isEditMode\" class=\"material-icons\">\r\n                    add_circle_outline\r\n                </i> {{ isEditMode ? 'Save Comment' : countryNotesProp?.resources?.ADD_COMMENT}}\r\n            </button>\r\n        </div>\r\n    </ng-container>\r\n    <div class=\"note-list-container\">\r\n        <div class=\"row note-list-header\">\r\n            <!-- <div *ngIf=\"!countryNotesProp?.isMCGrid\" class=\"col-sm-1\"></div> -->\r\n            <div *ngIf=\"countryNotesProp?.areNotesEditable\" class=\"col-sm-1\"></div>\r\n            <div class=\"col-sm-11 row\">\r\n                <div class=\"col-sm-3\">{{countryNotesProp?.resources?.MODIFIED_DATE}}</div>\r\n                <div class=\"col-sm-3\">{{countryNotesProp?.resources?.USER_NAME}}</div>\r\n                <div class=\"col-sm-6\">{{countryNotesProp?.resources?.CONTENT}}</div>\r\n            </div>\r\n        </div>\r\n        <div class=\"note-list-data\">\r\n            <div class=\"row  note-row\" *ngFor=\"let note of countryNotesProp.noteList; let i = index\">\r\n                <ng-container *ngIf=\"!isDeletedNote(note)\">\r\n                    <!-- <ng-container *ngIf=\"!countryNotesProp?.isMCGrid\"> -->\r\n                    <ng-container *ngIf=\"countryNotesProp?.areNotesEditable\">\r\n                        <div class=\"col-sm-1 btn-remove-note\"\r\n                            [ngClass]=\"(countryNotesProp.areNotesEditable === false) ? 'disable' : ''\"\r\n                            (click)=\"removeNote(i)\">\r\n                            <i class=\"material-icons\"> clear </i>\r\n                        </div>\r\n                    </ng-container>\r\n                    <div class=\"col-sm-11 row\" (click)=\"onNoteSelected(note, i)\">\r\n                        <div class=\"col-sm-3\">{{note.lastModifiedDate | date: 'dd-MMM-yyyy'}}</div>\r\n                        <div class=\"col-sm-3\">{{note.userId}}</div>\r\n                        <div class=\"col-sm-6 txt-content\">{{note.content}}</div>\r\n                    </div>\r\n                </ng-container>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n<div mat-dialog-actions>\r\n    <!-- <ng-container *ngIf=\"!countryNotesProp?.isMCGrid\"> -->\r\n    <ng-container *ngIf=\"countryNotesProp?.areNotesEditable\">\r\n        <button mat-button class=\"ctos-btn-secondary\"\r\n            (click)=\"cancel()\">{{countryNotesProp?.resources?.CANCEL}}</button>\r\n        <button mat-button class=\"ctos-btn-primary offset-2\" [disabled]=\"!areNotesEditable\" (click)=\"ok()\"\r\n            cdkFocusInitial>{{countryNotesProp?.resources?.SAVE}}</button>\r\n    </ng-container>\r\n    <!-- <ng-container *ngIf=\"countryNotesProp?.isMCGrid\"> -->\r\n    <ng-container *ngIf=\"!countryNotesProp?.areNotesEditable\">\r\n        <button mat-button class=\"ctos-btn-primary\" (click)=\"cancel()\">{{countryNotesProp?.resources?.OK}}</button>\r\n    </ng-container>\r\n</div>");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/password/password.component.html":
/*!*******************************************************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/password/password.component.html ***!
  \*******************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<h1 mat-dialog-title>{{ data?.heading }}</h1>\r\n<div mat-dialog-content class=\"row password-dialog-container\">\r\n  <div class=\"col-6 left-side\">\r\n    <form class=\"form-horizontal\" #changePasswordForm=\"ngForm\">\r\n      <div class=\"form-group row\">\r\n        <label class=\"control-label col-4 no-padding\" for=\"currentPassword\">{{\r\n          data?.currentPassword\r\n        }}</label>\r\n        <div class=\"backGround col-8\">\r\n          <input type=\"password\" class=\"form-control\" id=\"currentPassword\" [(ngModel)]=\"currentPassword\"\r\n            #currentPasswordText=\"ngModel\" name=\"currentPassword\" (click)=\"hideSuccessMessage()\" required\r\n            [matTooltipClass]=\"'warn ctos-tooltip'\" [matTooltip]=\"data?.nonEmptyField\" matTooltipPosition=\"right\"\r\n            [matTooltipDisabled]=\"\r\n              !(currentPasswordText.touched && currentPasswordText.invalid)\r\n            \" [class.is-invalid]=\"\r\n              currentPasswordText.touched && currentPasswordText.invalid\r\n            \" />\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group row\">\r\n        <label class=\"control-label col-4 no-padding\" for=\"newPassword\">{{\r\n          data?.newPassword\r\n        }}</label>\r\n        <div class=\"backGround col-8\">\r\n          <input type=\"password\" class=\"form-control\" id=\"newPassword\" [(ngModel)]=\"newPassword\"\r\n            #newPasswordText=\"ngModel\" name=\"newPassword\" (input)=\"confirmPasswordText.control.updateValueAndValidity()\"\r\n            (click)=\"hideSuccessMessage()\" required [matTooltipClass]=\"'warn ctos-tooltip'\"\r\n            [matTooltip]=\"data?.nonEmptyField\" matTooltipPosition=\"right\" [matTooltipDisabled]=\"\r\n              !(newPasswordText.touched && newPasswordText.invalid)\r\n            \" [class.is-invalid]=\"\r\n              newPasswordText.touched && newPasswordText.invalid\r\n            \" />\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group row\">\r\n        <label class=\"control-label col-4 no-padding\" for=\"confirmPassword\">{{\r\n          data?.confirmPassword\r\n        }}</label>\r\n        <div class=\"backGround col-8\">\r\n          <input type=\"password\" class=\"form-control\" id=\"confirmPassword\" [(ngModel)]=\"confirmPassword\"\r\n            #confirmPasswordText=\"ngModel\" name=\"confirmPassword\" ctosConfirmEqualValidator=\"newPassword\"\r\n            (click)=\"hideSuccessMessage()\" required [matTooltipClass]=\"'warn ctos-tooltip'\" [matTooltip]=\"\r\n              (confirmPasswordText.touched || confirmPasswordText.dirty) &&\r\n              !confirmPasswordText.value\r\n                ? data?.nonEmptyField\r\n                : confirmPasswordText.errors?.notEqual &&\r\n                  confirmPasswordText.dirty\r\n                ? data?.passwordMisMatchMessage\r\n                : ''\r\n            \" matTooltipPosition=\"right\" [matTooltipDisabled]=\"\r\n              !(confirmPasswordText.touched && confirmPasswordText.invalid)\r\n            \" [class.is-invalid]=\"\r\n              confirmPasswordText.touched && confirmPasswordText.invalid\r\n            \" />\r\n        </div>\r\n      </div>\r\n    </form>\r\n    <mat-error *ngIf=\"validationMessage\">{{ validationMessage }}</mat-error>\r\n  </div>\r\n  <div class=\"col-6\">\r\n    <div class=\"para\">\r\n      <span>The password must meet the following criteria:</span>\r\n      <ol>\r\n        <li>{{ data.lengthRule }}</li>\r\n        <li>{{ mixruleSplitHeader }}\r\n          <ul>\r\n            <li *ngFor=\"let point of this.mixruleSplit\">{{point}}</li>\r\n          </ul>\r\n        </li>\r\n      </ol>\r\n    </div>\r\n  </div>\r\n</div>\r\n<div mat-dialog-actions>\r\n  <button mat-button class=\"cancel-btn\" (click)=\"cancel(data.cancelLabel)\">\r\n    {{ data?.cancelLabel }}\r\n  </button>\r\n  <button mat-button class=\"ok-btn\" [ngClass]=\"{'disabled-button': !changePasswordForm.valid}\" [disabled]=\"!changePasswordForm.valid\"\r\n    (click)=\"ok(data.okLabel, changePasswordForm)\" cdkFocusInitial>\r\n    {{ data?.okLabel }}\r\n  </button>\r\n</div>");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/redirect/redirect.component.html":
/*!*******************************************************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/redirect/redirect.component.html ***!
  \*******************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/search-list/search-list.component.html":
/*!*************************************************************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/search-list/search-list.component.html ***!
  \*************************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<!-- customized for So-Study dropdown -->\r\n\r\n<div *ngIf=\"isSearchListOn\" class=\"search-list-container\" [formGroup]=\"searchListFormGroupName\" matAutocompleteOrigin #origin=\"matAutocompleteOrigin\">\r\n  <label class=\"study-label\">{{searchListInput.studyListHeaderLabel}}</label>\r\n  <i class=\"material-icons arrow-mat-icon\" [ngClass]=\"toggleArrowFlag ? 'rotate-arrow-icon-ninty-degree' : 'rotate-arrow-icon-zero-degree'\">play_arrow</i>\r\n  <input \r\n  #searchbox \r\n  type=\"button\" \r\n  aria-label=\"Search\" \r\n  formControlName=\"searchListControl\" \r\n  class=\"dropdownArrow form-control study-and-study-name\" \r\n  [matAutocomplete]=\"searchList\" \r\n  [matAutocompleteConnectedTo]=\"origin\" \r\n  (click)='click()'\r\n  (blur)=\"onBlur()\" \r\n  />\r\n  <mat-autocomplete \r\n    #searchList=\"matAutocomplete\" \r\n    [displayWith]=\"formatItem\" \r\n    (optionSelected)=\"itemSelected($event)\" \r\n    showPanel=\"true\" \r\n    [class]=\"'search-list'\"\r\n    (opened)=\"open()\"\r\n    (closed)=\"close()\"\r\n  >\r\n  <i class=\"material-icons search-mat-icon\">search</i>\r\n  <input \r\n  type=\"text\" \r\n  [placeholder]=\"searchListInput.placeholder\" \r\n  aria-label=\"Search\" \r\n  formControlName=\"filterListControl\" \r\n  class=\"dropdownArrow form-control\" \r\n  #autoCompleteInput \r\n  (blur)=\"onBlur()\" \r\n  [matTooltip]=\"labels?.required\" \r\n  [matTooltipClass]=\"'warn ctos-tooltip'\"\r\n  matTooltipPosition=\"right\" \r\n  [matTooltipDisabled]=\"!(searchListFormGroupName.get('searchListControl').touched &&\r\n  searchListFormGroupName.get('searchListControl').hasError('required'))\" \r\n  />\r\n  <mat-optgroup *ngFor=\"let group of $searchGroups\" [label]=\"group.name\">\r\n      <mat-option *ngFor=\"let item of (group.list | async)\" [value]=\"item\" matTooltip=\"{{ item.name }}\">\r\n          <ng-template [ngTemplateOutlet]=\"searchListInput.optionTemplate\" [ngTemplateOutletContext]=\"{ $implicit: item }\">\r\n            </ng-template>\r\n          </mat-option>\r\n      </mat-optgroup>\r\n  </mat-autocomplete>\r\n</div>\r\n\r\n\r\n<!-- Orginial component  -->\r\n\r\n<div *ngIf=\"!isSearchListOn\" class=\"search-list-container\" [formGroup]=\"searchListFormGroupName\">\r\n  <input\r\n    type=\"text\"\r\n    [placeholder]=\"searchListInput.placeholder\"\r\n    aria-label=\"Search\"\r\n    formControlName=\"searchListControl\"\r\n    class=\"dropdownArrow form-control\"\r\n    [matAutocomplete]=\"searchList\"\r\n    #autoCompleteInput\r\n    (blur)=\"onBlur()\"\r\n    [required]=\"required\"\r\n    [matTooltipClass]=\"'warn ctos-tooltip'\"\r\n    [matTooltip]=\"labels?.required\"\r\n    matTooltipPosition=\"right\"\r\n    [matTooltipDisabled]=\"!(searchListFormGroupName.get('searchListControl').touched &&\r\n    searchListFormGroupName.get('searchListControl').hasError('required'))\"\r\n  />\r\n  <!-- <mat-error\r\n    *ngIf=\"\r\n    searchListFormGroupName?.get('searchListControl').touched &&\r\n    searchListFormGroupName?.get('searchListControl').hasError('required')\r\n    \"\r\n    >This field is mendatory.</mat-error\r\n  > -->\r\n  <mat-autocomplete\r\n    #searchList=\"matAutocomplete\"\r\n    [displayWith]=\"formatItem\"\r\n    (optionSelected)=\"itemSelected($event)\"\r\n    showPanel=\"true\"\r\n    [class]=\"'search-list'\"\r\n  >\r\n    <mat-optgroup *ngFor=\"let group of $searchGroups\" [label]=\"group.name\">\r\n      <mat-option\r\n        *ngFor=\"let item of (group.list | async)\"\r\n        [value]=\"item\"\r\n        matTooltip=\"{{ item.name }}\"\r\n      >\r\n        <ng-template\r\n          [ngTemplateOutlet]=\"searchListInput.optionTemplate\"\r\n          [ngTemplateOutletContext]=\"{ $implicit: item }\"\r\n        >\r\n        </ng-template>\r\n      </mat-option>\r\n    </mat-optgroup>\r\n  </mat-autocomplete>\r\n</div>");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/sub-header/sub-header.component.html":
/*!***********************************************************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/sub-header/sub-header.component.html ***!
  \***********************************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<div class=\"subnav\">\r\n  <!-- <select>\r\n    <option>CCD984</option>\r\n    <option>BAD984</option>\r\n    <option>CPK284</option>\r\n  </select> -->\r\n  <ctos-search-list [required]=\"false\" [searchListFormGroupName]=\"searchListFormGroupName\"\r\n    [searchListInput]=\"studyListInput\" (itemSelect)=\"itemSelected($event)\" (selectionChange)=\"onStudyChange($event)\"\r\n    [isSearchListOn]=\"isSearchListOn\">\r\n  </ctos-search-list>\r\n  <div *ngFor=\"let item of subHeaders; let i = index\" (click)=\"onTabClick(item.$moduleName, $event)\">\r\n    <!-- The check for disabled link in below ngClass directive needs to be modified when new added tabs are also to be disabled based on the criteria -->\r\n    <a [ngClass]=\"{ 'active': isTabActive(item) === true, 'disabled': disableLink === true}\"\r\n      href=\"javascript:void();\">{{ item.$name }}\r\n    </a>\r\n  </div>\r\n  <div class=\"float-right study-refresh-date\" *ngIf=\"studyRefreshDate\">\r\n    <span [innerHTML]=\"studyRefreshDateLabel\"></span> <span>:&nbsp;</span>\r\n    <span><strong>{{ studyRefreshDate | date: 'dd-MMM-yyyy' }}</strong></span>\r\n  </div>\r\n</div>");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/tab/tab.component.html":
/*!*********************************************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/tab/tab.component.html ***!
  \*********************************************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<ul>\r\n  <li *ngFor=\"let item of items\" [matTooltip]=\"'For a cohort plan, you must define one or more cohorts on the Cohort Design tab to enable the Countries tab.'\" matTooltipPosition=\"left\" [matTooltipClass]=\"'warn ctos-tooltip'\"\r\n    [matTooltipDisabled]=\"!showTooltip\" (mouseover)=\"getMouseEvent(item.label, item.enable)\" [ngClass]=\"{'active': selectedTab.label === item.label}\">\r\n    <span [innerHTML]=\"item.label\" (click)=\"selectTab(item)\" [ngClass]=\"{'disabled':item.enable===false}\"></span>\r\n  </li>\r\n</ul>");

/***/ }),

/***/ "../../node_modules/raw-loader/dist/cjs.js!./src/app/app.component.html":
/*!**************************************************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/raw-loader/dist/cjs.js!./src/app/app.component.html ***!
  \**************************************************************************************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("<router-outlet></router-outlet>");

/***/ }),

/***/ "../../node_modules/tslib/tslib.es6.js":
/*!*****************************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/node_modules/tslib/tslib.es6.js ***!
  \*****************************************************************************************************************************/
/*! exports provided: __extends, __assign, __rest, __decorate, __param, __metadata, __awaiter, __generator, __exportStar, __values, __read, __spread, __spreadArrays, __await, __asyncGenerator, __asyncDelegator, __asyncValues, __makeTemplateObject, __importStar, __importDefault */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__extends", function() { return __extends; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__assign", function() { return __assign; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__rest", function() { return __rest; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__decorate", function() { return __decorate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__param", function() { return __param; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__metadata", function() { return __metadata; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__awaiter", function() { return __awaiter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__generator", function() { return __generator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__exportStar", function() { return __exportStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__values", function() { return __values; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__read", function() { return __read; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spread", function() { return __spread; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__spreadArrays", function() { return __spreadArrays; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__await", function() { return __await; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncGenerator", function() { return __asyncGenerator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncDelegator", function() { return __asyncDelegator; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__asyncValues", function() { return __asyncValues; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__makeTemplateObject", function() { return __makeTemplateObject; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importStar", function() { return __importStar; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__importDefault", function() { return __importDefault; });
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */

var extendStatics = function(d, b) {
    extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return extendStatics(d, b);
};

function __extends(d, b) {
    extendStatics(d, b);
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}

var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    }
    return __assign.apply(this, arguments);
}

function __rest(s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
}

function __decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}

function __param(paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
}

function __metadata(metadataKey, metadataValue) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
}

function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

function __exportStar(m, exports) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}

function __values(o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
}

function __read(o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
}

function __spread() {
    for (var ar = [], i = 0; i < arguments.length; i++)
        ar = ar.concat(__read(arguments[i]));
    return ar;
}

function __spreadArrays() {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};

function __await(v) {
    return this instanceof __await ? (this.v = v, this) : new __await(v);
}

function __asyncGenerator(thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
}

function __asyncDelegator(o) {
    var i, p;
    return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
}

function __asyncValues(o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
}

function __makeTemplateObject(cooked, raw) {
    if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
    return cooked;
};

function __importStar(mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result.default = mod;
    return result;
}

function __importDefault(mod) {
    return (mod && mod.__esModule) ? mod : { default: mod };
}


/***/ }),

/***/ "../../product.constants.ts":
/*!******************************************************************************************************************!*\
  !*** D:/DecisionView/6.1Country/studyoptimizer/client/nworkspace/client-studyOptimizer-app/product.constants.ts ***!
  \******************************************************************************************************************/
/*! exports provided: BUILD_type, BUILD_id, BUILD_date, BUILD_version */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BUILD_type", function() { return BUILD_type; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BUILD_id", function() { return BUILD_id; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BUILD_date", function() { return BUILD_date; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BUILD_version", function() { return BUILD_version; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

var BUILD_type = 'production';
var BUILD_id = '600121';
var BUILD_date = 'FEB-26-2020 11:17:14';
var BUILD_version = '6.1';


/***/ }),

/***/ "../common-library/src/lib/common-angular-material/common-angular-material.module.ts":
/*!*******************************************************************************************!*\
  !*** ../common-library/src/lib/common-angular-material/common-angular-material.module.ts ***!
  \*******************************************************************************************/
/*! exports provided: CommonAngularMaterialModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonAngularMaterialModule", function() { return CommonAngularMaterialModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "../../node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "../../node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material */ "../../node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_material_moment_adapter__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material-moment-adapter */ "../../node_modules/@angular/material-moment-adapter/esm5/material-moment-adapter.es5.js");
/* harmony import */ var _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/autocomplete */ "../../node_modules/@angular/material/esm5/autocomplete.es5.js");
/* harmony import */ var _angular_material_form_field__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/form-field */ "../../node_modules/@angular/material/esm5/form-field.es5.js");
/* harmony import */ var _angular_material_input__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/input */ "../../node_modules/@angular/material/esm5/input.es5.js");
/* harmony import */ var _angular_material_menu__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/material/menu */ "../../node_modules/@angular/material/esm5/menu.es5.js");
/* harmony import */ var _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @angular/material/snack-bar */ "../../node_modules/@angular/material/esm5/snack-bar.es5.js");
/* harmony import */ var _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @angular/material/tooltip */ "../../node_modules/@angular/material/esm5/tooltip.es5.js");
/* harmony import */ var _ctos_date_adapter__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./ctos-date-adapter */ "../common-library/src/lib/common-angular-material/ctos-date-adapter.ts");
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @angular/cdk/overlay */ "../../node_modules/@angular/cdk/esm5/overlay.es5.js");
/* harmony import */ var _scroll__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./scroll */ "../common-library/src/lib/common-angular-material/scroll.ts");
/* harmony import */ var _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @angular/material/slide-toggle */ "../../node_modules/@angular/material/esm5/slide-toggle.es5.js");
















var CommonAngularMaterialModule = /** @class */ (function () {
    function CommonAngularMaterialModule() {
    }
    CommonAngularMaterialModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
            imports: [
                _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
                _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_6__["MatAutocompleteModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_10__["MatSnackBarModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatIconModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatTreeModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatNativeDateModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatTableModule"],
                _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_11__["MatTooltipModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatDialogModule"],
                _angular_material_menu__WEBPACK_IMPORTED_MODULE_9__["MatMenuModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatSelectModule"],
                _angular_material_input__WEBPACK_IMPORTED_MODULE_8__["MatInputModule"],
                _angular_material_form_field__WEBPACK_IMPORTED_MODULE_7__["MatFormFieldModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatTabsModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatCheckboxModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatRadioModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatDatepickerModule"],
                _angular_material_moment_adapter__WEBPACK_IMPORTED_MODULE_5__["MatMomentDateModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatButtonModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatButtonToggleModule"],
                _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_13__["OverlayModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatProgressSpinnerModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatPaginatorModule"],
                _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_15__["MatSlideToggleModule"]
            ],
            providers: [
                {
                    provide: _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_10__["MAT_SNACK_BAR_DEFAULT_OPTIONS"],
                    useValue: { duration: 2000, verticalPosition: 'top' }
                },
                {
                    provide: _angular_material__WEBPACK_IMPORTED_MODULE_4__["DateAdapter"],
                    useClass: _ctos_date_adapter__WEBPACK_IMPORTED_MODULE_12__["CTOSDateAdapter"],
                    deps: [_angular_material__WEBPACK_IMPORTED_MODULE_4__["MAT_DATE_LOCALE"]]
                },
                { provide: _angular_material__WEBPACK_IMPORTED_MODULE_4__["MAT_DATE_FORMATS"], useValue: _ctos_date_adapter__WEBPACK_IMPORTED_MODULE_12__["CTOS_DATE_FORMATS"] },
                {
                    provide: _angular_material__WEBPACK_IMPORTED_MODULE_4__["MAT_PROGRESS_SPINNER_DEFAULT_OPTIONS"],
                    useValue: { _forceAnimations: true, diameter: 100, strokeWidth: 6 }
                },
                {
                    provide: _angular_material__WEBPACK_IMPORTED_MODULE_4__["MAT_SELECT_SCROLL_STRATEGY"],
                    useFactory: _scroll__WEBPACK_IMPORTED_MODULE_14__["MAT_SCROLL_STRATEGY_FACTORY"],
                    deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_13__["Overlay"]]
                },
                {
                    provide: _angular_material_menu__WEBPACK_IMPORTED_MODULE_9__["MAT_MENU_SCROLL_STRATEGY"],
                    useFactory: _scroll__WEBPACK_IMPORTED_MODULE_14__["MAT_SCROLL_STRATEGY_FACTORY"],
                    deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_13__["Overlay"]]
                },
                {
                    provide: _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_6__["MAT_AUTOCOMPLETE_SCROLL_STRATEGY"],
                    useFactory: _scroll__WEBPACK_IMPORTED_MODULE_14__["MAT_SCROLL_STRATEGY_FACTORY"],
                    deps: [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_13__["Overlay"]]
                },
                {
                    provide: _angular_material__WEBPACK_IMPORTED_MODULE_4__["MAT_DIALOG_DEFAULT_OPTIONS"],
                    useValue: {
                        hasBackdrop: true,
                        disableClose: true,
                        backdropClass: 'backdrop'
                    }
                }
            ],
            declarations: [],
            exports: [
                _angular_material_autocomplete__WEBPACK_IMPORTED_MODULE_6__["MatAutocompleteModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_3__["ReactiveFormsModule"],
                _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_10__["MatSnackBarModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatIconModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatTreeModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatNativeDateModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatTableModule"],
                _angular_material_tooltip__WEBPACK_IMPORTED_MODULE_11__["MatTooltipModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatDialogModule"],
                _angular_material_menu__WEBPACK_IMPORTED_MODULE_9__["MatMenuModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatSelectModule"],
                _angular_material_input__WEBPACK_IMPORTED_MODULE_8__["MatInputModule"],
                _angular_material_form_field__WEBPACK_IMPORTED_MODULE_7__["MatFormFieldModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatTabsModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatCheckboxModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatRadioModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatDatepickerModule"],
                _angular_material_moment_adapter__WEBPACK_IMPORTED_MODULE_5__["MatMomentDateModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatButtonModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatButtonToggleModule"],
                _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_13__["OverlayModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatProgressSpinnerModule"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatPaginatorModule"],
                _angular_material_slide_toggle__WEBPACK_IMPORTED_MODULE_15__["MatSlideToggleModule"]
            ]
        })
    ], CommonAngularMaterialModule);
    return CommonAngularMaterialModule;
}());



/***/ }),

/***/ "../common-library/src/lib/common-angular-material/ctos-date-adapter.ts":
/*!******************************************************************************!*\
  !*** ../common-library/src/lib/common-angular-material/ctos-date-adapter.ts ***!
  \******************************************************************************/
/*! exports provided: CTOS_DATE_FORMATS, CTOSDateAdapter */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CTOS_DATE_FORMATS", function() { return CTOS_DATE_FORMATS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CTOSDateAdapter", function() { return CTOSDateAdapter; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_material_moment_adapter__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/material-moment-adapter */ "../../node_modules/@angular/material-moment-adapter/esm5/material-moment-adapter.es5.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment */ "../../node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _utils_service_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/service-constant */ "../common-library/src/lib/utils/service-constant.ts");




var moment = moment__WEBPACK_IMPORTED_MODULE_2__;
var CTOS_DATE_FORMATS = {
    parse: {
        dateInput: _utils_service_constant__WEBPACK_IMPORTED_MODULE_3__["VALID_DATE_FORMATS"]
    },
    display: {
        dateInput: 'DD-MMM-YYYY',
        monthYearLabel: 'MMM-YYYY',
        dateA11yLabel: 'DD-MMM-YYYY',
        monthYearA11yLabel: 'MMM-YYYY',
    },
};
var CTOSDateAdapter = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](CTOSDateAdapter, _super);
    function CTOSDateAdapter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    CTOSDateAdapter.prototype.parse = function (value, parseFormat) {
        if (value && typeof value === 'string') {
            return moment(value, parseFormat, true);
        }
        return value ? moment(value) : null;
    };
    /**
     * This is needed to override the default behaviour as invalid values are also considered as null
     * and empty values are also considered as null, so to verify if both are null that is previous value
     * and current value then the value change should be triggered.
     *
     * param first
     * param second
     * returns
     * memberof CTOSDateAdapter
     */
    CTOSDateAdapter.prototype.sameDate = function (first, second) {
        if (first && second) {
            var firstValid = this.isValid(first);
            var secondValid = this.isValid(second);
            if (firstValid && secondValid) {
                return !this.compareDate(first, second);
            }
            return firstValid === secondValid;
        }
        else {
            return first !== null && second !== null && first === second;
        }
    };
    return CTOSDateAdapter;
}(_angular_material_moment_adapter__WEBPACK_IMPORTED_MODULE_1__["MomentDateAdapter"]));



/***/ }),

/***/ "../common-library/src/lib/common-angular-material/scroll.ts":
/*!*******************************************************************!*\
  !*** ../common-library/src/lib/common-angular-material/scroll.ts ***!
  \*******************************************************************/
/*! exports provided: MAT_SCROLL_STRATEGY_FACTORY */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAT_SCROLL_STRATEGY_FACTORY", function() { return MAT_SCROLL_STRATEGY_FACTORY; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

function MAT_SCROLL_STRATEGY_FACTORY(overlay) {
    return function () { return overlay.scrollStrategies.close(); };
}


/***/ }),

/***/ "../common-library/src/lib/common-library.module.ts":
/*!**********************************************************!*\
  !*** ../common-library/src/lib/common-library.module.ts ***!
  \**********************************************************/
/*! exports provided: CommonLibraryModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonLibraryModule", function() { return CommonLibraryModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _components_components_module__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./components/components.module */ "../common-library/src/lib/components/components.module.ts");
/* harmony import */ var _services_pce_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/pce.service */ "../common-library/src/lib/services/pce.service.ts");
/* harmony import */ var _services_spinner_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./services/spinner.service */ "../common-library/src/lib/services/spinner.service.ts");





var CommonLibraryModule = /** @class */ (function () {
    function CommonLibraryModule() {
    }
    CommonLibraryModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            imports: [_components_components_module__WEBPACK_IMPORTED_MODULE_2__["ComponentsModule"]],
            exports: [_components_components_module__WEBPACK_IMPORTED_MODULE_2__["ComponentsModule"]],
            declarations: [],
            providers: [
                _services_pce_service__WEBPACK_IMPORTED_MODULE_3__["PCEService"],
                _services_spinner_service__WEBPACK_IMPORTED_MODULE_4__["SpinnerService"]
            ],
            entryComponents: []
        })
    ], CommonLibraryModule);
    return CommonLibraryModule;
}());



/***/ }),

/***/ "../common-library/src/lib/components/auth-main-header/auth-main-header.component.ts":
/*!*******************************************************************************************!*\
  !*** ../common-library/src/lib/components/auth-main-header/auth-main-header.component.ts ***!
  \*******************************************************************************************/
/*! exports provided: AuthMainHeaderComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthMainHeaderComponent", function() { return AuthMainHeaderComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");


var AuthMainHeaderComponent = /** @class */ (function () {
    function AuthMainHeaderComponent() {
        this.hideCustomerLogo = false;
    }
    AuthMainHeaderComponent.prototype.ngOnInit = function () {
    };
    /**
     * Hides image
     * @param event
     */
    AuthMainHeaderComponent.prototype.hideImage = function (event) {
        this.hideCustomerLogo = true;
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], AuthMainHeaderComponent.prototype, "logoUrl", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], AuthMainHeaderComponent.prototype, "appInfoUrl", void 0);
    AuthMainHeaderComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'ctos-auth-main-header',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./auth-main-header.component.html */ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/auth-main-header/auth-main-header.component.html")).default,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], AuthMainHeaderComponent);
    return AuthMainHeaderComponent;
}());



/***/ }),

/***/ "../common-library/src/lib/components/breadcrumb/breadcrumb.component.ts":
/*!*******************************************************************************!*\
  !*** ../common-library/src/lib/components/breadcrumb/breadcrumb.component.ts ***!
  \*******************************************************************************/
/*! exports provided: BreadcrumbComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreadcrumbComponent", function() { return BreadcrumbComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _breadcrumb_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./breadcrumb.service */ "../common-library/src/lib/components/breadcrumb/breadcrumb.service.ts");



var BreadcrumbComponent = /** @class */ (function () {
    /**
     *Creates an instance of BreadcrumbComponent.
     * @param breadcrumbsService
     * @memberof BreadcrumbComponent
     * subscribes to the breadcrumb observable of breadcrumb service for changes in breadcrumbs
     */
    function BreadcrumbComponent(breadcrumbsService) {
        var _this = this;
        this.breadcrumbsService = breadcrumbsService;
        // subscribe to the breadcrumb observable in service to update the view on change of subject
        this.breadcrumbsService.breadcrumbs$.subscribe(function (breadcrumbs) {
            _this.breadcrumbs = breadcrumbs;
        });
    }
    BreadcrumbComponent.prototype.ngOnInit = function () {
    };
    BreadcrumbComponent.ctorParameters = function () { return [
        { type: _breadcrumb_service__WEBPACK_IMPORTED_MODULE_2__["BreadcrumbService"] }
    ]; };
    BreadcrumbComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'ctos-breadcrumb',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./breadcrumb.component.html */ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/breadcrumb/breadcrumb.component.html")).default
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_breadcrumb_service__WEBPACK_IMPORTED_MODULE_2__["BreadcrumbService"]])
    ], BreadcrumbComponent);
    return BreadcrumbComponent;
}());



/***/ }),

/***/ "../common-library/src/lib/components/breadcrumb/breadcrumb.service.ts":
/*!*****************************************************************************!*\
  !*** ../common-library/src/lib/components/breadcrumb/breadcrumb.service.ts ***!
  \*****************************************************************************/
/*! exports provided: BreadcrumbService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BreadcrumbService", function() { return BreadcrumbService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var _utils_AppUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../utils/AppUtil */ "../common-library/src/lib/utils/AppUtil.ts");
/* harmony import */ var _utils_string_util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../utils/string-util */ "../common-library/src/lib/utils/string-util.ts");






var BreadcrumbService = /** @class */ (function () {
    /**
     *Creates an instance of BreadcrumbService.
     * @param activatedRoute
     * @memberof BreadcrumbService
     */
    function BreadcrumbService(activatedRoute) {
        this.activatedRoute = activatedRoute;
        this.breadcrumbsSubject = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
        this.breadcrumbs$ = this.breadcrumbsSubject.asObservable();
    }
    /**
     * Updates the breadcrumb observable with new breadcrumb values
     *
     * @param event
     * @memberof BreadcrumbService
     */
    BreadcrumbService.prototype.setBreadCrumb = function (event) {
        // check if navigation has ended
        if (event instanceof _angular_router__WEBPACK_IMPORTED_MODULE_2__["NavigationEnd"]) {
            var root = this.activatedRoute.root;
            var breadcrumbs = void 0;
            // extract the breadcrumbs from the route object
            breadcrumbs = this.getBreadcrumbs(root);
            // update the observable with new breadcrumbs
            this.breadcrumbsSubject.next(breadcrumbs);
        }
    };
    /**
     * Extracts breadcrumbs from the route object using
     * the data if passed in the route or the path segment in absence of data
     *
     * @param route
     * @param [url='']
     * @param [breadcrumbs=[]]
     * @returns Breadcrumb[]
     * @memberof BreadcrumbService
     */
    BreadcrumbService.prototype.getBreadcrumbs = function (route, url, breadcrumbs) {
        var e_1, _a;
        if (url === void 0) { url = ''; }
        if (breadcrumbs === void 0) { breadcrumbs = []; }
        var ROUTE_DATA_BREADCRUMB = 'breadcrumb';
        // get the child routes
        var children = route.children;
        // return if there are no more children
        if (children.length === 0) {
            return breadcrumbs;
        }
        try {
            // iterate over each children
            for (var children_1 = tslib__WEBPACK_IMPORTED_MODULE_0__["__values"](children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                var child = children_1_1.value;
                // verify primary route
                if (child.outlet !== _angular_router__WEBPACK_IMPORTED_MODULE_2__["PRIMARY_OUTLET"]) {
                    continue;
                }
                // verify the custom data property "breadcrumb" is specified on the route
                // if (!child.snapshot.data.hasOwnProperty(ROUTE_DATA_BREADCRUMB)) {
                //   return this.getBreadcrumbs(child, url, breadcrumbs);
                // }
                // get the route's URL segment
                var routeURL = _utils_AppUtil__WEBPACK_IMPORTED_MODULE_4__["AppUtil"].extractPathFromUrl(child.snapshot.url);
                // append route URL to URL
                url += "/" + routeURL;
                // extract the label for the breadcrumb from data if provided else set it as the url segment path
                var breadcrumbLabel = void 0;
                if (child.snapshot.data.hasOwnProperty(ROUTE_DATA_BREADCRUMB)) {
                    breadcrumbLabel = child.snapshot.data[ROUTE_DATA_BREADCRUMB];
                }
                else {
                    breadcrumbLabel = _utils_string_util__WEBPACK_IMPORTED_MODULE_5__["StringUtil"].camelize(routeURL);
                }
                // add breadcrumb
                var breadcrumb = {
                    label: breadcrumbLabel,
                    params: child.snapshot.params,
                    url: url
                };
                breadcrumbs.push(breadcrumb);
                // recursive
                return this.getBreadcrumbs(child, url, breadcrumbs);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    BreadcrumbService.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"] }
    ]; };
    BreadcrumbService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"]])
    ], BreadcrumbService);
    return BreadcrumbService;
}());



/***/ }),

/***/ "../common-library/src/lib/components/components.module.ts":
/*!*****************************************************************!*\
  !*** ../common-library/src/lib/components/components.module.ts ***!
  \*****************************************************************/
/*! exports provided: ComponentsModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentsModule", function() { return ComponentsModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "../../node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/forms */ "../../node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material */ "../../node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_material_button__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/material/button */ "../../node_modules/@angular/material/esm5/button.es5.js");
/* harmony import */ var _angular_material_dialog__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/material/dialog */ "../../node_modules/@angular/material/esm5/dialog.es5.js");
/* harmony import */ var _angular_material_icon__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @angular/material/icon */ "../../node_modules/@angular/material/esm5/icon.es5.js");
/* harmony import */ var _angular_material_menu__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @angular/material/menu */ "../../node_modules/@angular/material/esm5/menu.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _directives_label_control_directive__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../directives/label-control.directive */ "../common-library/src/lib/directives/label-control.directive.ts");
/* harmony import */ var _directives_signed_decimal_directive__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../directives/signed-decimal.directive */ "../common-library/src/lib/directives/signed-decimal.directive.ts");
/* harmony import */ var _directives_signed_integer_directive__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../directives/signed-integer.directive */ "../common-library/src/lib/directives/signed-integer.directive.ts");
/* harmony import */ var _common_angular_material_common_angular_material_module__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./../common-angular-material/common-angular-material.module */ "../common-library/src/lib/common-angular-material/common-angular-material.module.ts");
/* harmony import */ var _directives_confirm_equal_validator_directive__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./../directives/confirm-equal-validator.directive */ "../common-library/src/lib/directives/confirm-equal-validator.directive.ts");
/* harmony import */ var _breadcrumb_breadcrumb_component__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./breadcrumb/breadcrumb.component */ "../common-library/src/lib/components/breadcrumb/breadcrumb.component.ts");
/* harmony import */ var _breadcrumb_breadcrumb_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./breadcrumb/breadcrumb.service */ "../common-library/src/lib/components/breadcrumb/breadcrumb.service.ts");
/* harmony import */ var _confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./confirmation-dialog/confirmation-dialog.component */ "../common-library/src/lib/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _context_menu_context_menu_component__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./context-menu/context-menu.component */ "../common-library/src/lib/components/context-menu/context-menu.component.ts");
/* harmony import */ var _display_banner_display_banner_component__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./display-banner/display-banner.component */ "../common-library/src/lib/components/display-banner/display-banner.component.ts");
/* harmony import */ var _export_export_component__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./export/export.component */ "../common-library/src/lib/components/export/export.component.ts");
/* harmony import */ var _info_info_component__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./info/info.component */ "../common-library/src/lib/components/info/info.component.ts");
/* harmony import */ var _main_header_main_header_component__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./main-header/main-header.component */ "../common-library/src/lib/components/main-header/main-header.component.ts");
/* harmony import */ var _password_password_component__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./password/password.component */ "../common-library/src/lib/components/password/password.component.ts");
/* harmony import */ var _redirect_redirect_component__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./redirect/redirect.component */ "../common-library/src/lib/components/redirect/redirect.component.ts");
/* harmony import */ var _search_list_search_list_component__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./search-list/search-list.component */ "../common-library/src/lib/components/search-list/search-list.component.ts");
/* harmony import */ var _sub_header_sub_header_component__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./sub-header/sub-header.component */ "../common-library/src/lib/components/sub-header/sub-header.component.ts");
/* harmony import */ var _tab_tab_component__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./tab/tab.component */ "../common-library/src/lib/components/tab/tab.component.ts");
/* harmony import */ var _components_notes_notes_component__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ../components/notes/notes.component */ "../common-library/src/lib/components/notes/notes.component.ts");
/* harmony import */ var _auth_main_header_auth_main_header_component__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./auth-main-header/auth-main-header.component */ "../common-library/src/lib/components/auth-main-header/auth-main-header.component.ts");
/* harmony import */ var _nested_dropdown_nested_dropdown_component__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./nested-dropdown/nested-dropdown.component */ "../common-library/src/lib/components/nested-dropdown/nested-dropdown.component.ts");































var ComponentsModule = /** @class */ (function () {
    function ComponentsModule() {
    }
    ComponentsModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["NgModule"])({
            imports: [
                _angular_router__WEBPACK_IMPORTED_MODULE_9__["RouterModule"],
                _angular_common__WEBPACK_IMPORTED_MODULE_1__["CommonModule"],
                _common_angular_material_common_angular_material_module__WEBPACK_IMPORTED_MODULE_13__["CommonAngularMaterialModule"],
                _angular_forms__WEBPACK_IMPORTED_MODULE_3__["FormsModule"],
                _angular_material_menu__WEBPACK_IMPORTED_MODULE_8__["MatMenuModule"],
                _angular_material_icon__WEBPACK_IMPORTED_MODULE_7__["MatIconModule"],
                _angular_material_button__WEBPACK_IMPORTED_MODULE_5__["MatButtonModule"],
                _angular_material_dialog__WEBPACK_IMPORTED_MODULE_6__["MatDialogModule"]
            ],
            declarations: [
                _breadcrumb_breadcrumb_component__WEBPACK_IMPORTED_MODULE_15__["BreadcrumbComponent"],
                _main_header_main_header_component__WEBPACK_IMPORTED_MODULE_22__["MainHeaderComponent"],
                _sub_header_sub_header_component__WEBPACK_IMPORTED_MODULE_26__["SubHeaderComponent"],
                _search_list_search_list_component__WEBPACK_IMPORTED_MODULE_25__["SearchListComponent"],
                _password_password_component__WEBPACK_IMPORTED_MODULE_23__["PasswordComponent"],
                _directives_confirm_equal_validator_directive__WEBPACK_IMPORTED_MODULE_14__["ConfirmEqualValidatorDirective"],
                _confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_17__["ConfirmationDialogComponent"],
                _export_export_component__WEBPACK_IMPORTED_MODULE_20__["ExportComponent"],
                _redirect_redirect_component__WEBPACK_IMPORTED_MODULE_24__["RedirectComponent"],
                _display_banner_display_banner_component__WEBPACK_IMPORTED_MODULE_19__["DisplayBannerComponent"],
                _context_menu_context_menu_component__WEBPACK_IMPORTED_MODULE_18__["ContextMenuComponent"],
                _tab_tab_component__WEBPACK_IMPORTED_MODULE_27__["TabComponent"],
                _info_info_component__WEBPACK_IMPORTED_MODULE_21__["InfoComponent"],
                _auth_main_header_auth_main_header_component__WEBPACK_IMPORTED_MODULE_29__["AuthMainHeaderComponent"],
                _directives_signed_integer_directive__WEBPACK_IMPORTED_MODULE_12__["SignedIntegerDirective"],
                _directives_signed_decimal_directive__WEBPACK_IMPORTED_MODULE_11__["SignedDecimalDirective"],
                _directives_label_control_directive__WEBPACK_IMPORTED_MODULE_10__["LabelControlDirective"],
                _components_notes_notes_component__WEBPACK_IMPORTED_MODULE_28__["NotesComponent"],
                _nested_dropdown_nested_dropdown_component__WEBPACK_IMPORTED_MODULE_30__["NestedDropdownComponent"]
            ],
            providers: [_breadcrumb_breadcrumb_service__WEBPACK_IMPORTED_MODULE_16__["BreadcrumbService"]],
            exports: [
                _breadcrumb_breadcrumb_component__WEBPACK_IMPORTED_MODULE_15__["BreadcrumbComponent"],
                _main_header_main_header_component__WEBPACK_IMPORTED_MODULE_22__["MainHeaderComponent"],
                _sub_header_sub_header_component__WEBPACK_IMPORTED_MODULE_26__["SubHeaderComponent"],
                _search_list_search_list_component__WEBPACK_IMPORTED_MODULE_25__["SearchListComponent"],
                _directives_confirm_equal_validator_directive__WEBPACK_IMPORTED_MODULE_14__["ConfirmEqualValidatorDirective"],
                _confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_17__["ConfirmationDialogComponent"],
                _export_export_component__WEBPACK_IMPORTED_MODULE_20__["ExportComponent"],
                _display_banner_display_banner_component__WEBPACK_IMPORTED_MODULE_19__["DisplayBannerComponent"],
                _context_menu_context_menu_component__WEBPACK_IMPORTED_MODULE_18__["ContextMenuComponent"],
                _tab_tab_component__WEBPACK_IMPORTED_MODULE_27__["TabComponent"],
                _info_info_component__WEBPACK_IMPORTED_MODULE_21__["InfoComponent"],
                _auth_main_header_auth_main_header_component__WEBPACK_IMPORTED_MODULE_29__["AuthMainHeaderComponent"],
                _directives_signed_integer_directive__WEBPACK_IMPORTED_MODULE_12__["SignedIntegerDirective"],
                _directives_signed_decimal_directive__WEBPACK_IMPORTED_MODULE_11__["SignedDecimalDirective"],
                _directives_label_control_directive__WEBPACK_IMPORTED_MODULE_10__["LabelControlDirective"],
                _components_notes_notes_component__WEBPACK_IMPORTED_MODULE_28__["NotesComponent"],
                _nested_dropdown_nested_dropdown_component__WEBPACK_IMPORTED_MODULE_30__["NestedDropdownComponent"]
            ],
            entryComponents: [
                _password_password_component__WEBPACK_IMPORTED_MODULE_23__["PasswordComponent"],
                _redirect_redirect_component__WEBPACK_IMPORTED_MODULE_24__["RedirectComponent"],
                _display_banner_display_banner_component__WEBPACK_IMPORTED_MODULE_19__["DisplayBannerComponent"],
                _confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_17__["ConfirmationDialogComponent"],
                _angular_material__WEBPACK_IMPORTED_MODULE_4__["MatSpinner"],
                _components_notes_notes_component__WEBPACK_IMPORTED_MODULE_28__["NotesComponent"]
            ]
        })
    ], ComponentsModule);
    return ComponentsModule;
}());



/***/ }),

/***/ "../common-library/src/lib/components/confirmation-dialog/confirmation-dialog.component.ts":
/*!*************************************************************************************************!*\
  !*** ../common-library/src/lib/components/confirmation-dialog/confirmation-dialog.component.ts ***!
  \*************************************************************************************************/
/*! exports provided: ConfirmationDialogComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfirmationDialogComponent", function() { return ConfirmationDialogComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "../../node_modules/@angular/material/esm5/material.es5.js");



var ConfirmationDialogComponent = /** @class */ (function () {
    function ConfirmationDialogComponent(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        if (!data.okLabel) {
            data.okLabel = 'Ok';
        }
        if (!data.cancelLabel) {
            data.cancelLabel = 'Cancel';
        }
    }
    /**
     * Cancels confirmation dialog component
     * @param btnLabel
     */
    ConfirmationDialogComponent.prototype.cancel = function (btnLabel) {
        this.dialogRef.close({ action: btnLabel });
    };
    /**
     * confirmation dialog component
     * @param btnLabel
     */
    ConfirmationDialogComponent.prototype.ok = function (btnLabel) {
        this.dialogRef.close({ action: btnLabel });
    };
    /**
     * Shows cancel
     * @returns true if cancel
     */
    ConfirmationDialogComponent.prototype.showCancel = function () {
        var data = this.data;
        if (data && data.hasOwnProperty('showCancel')) {
            return data.showCancel;
        }
        return true;
    };
    ConfirmationDialogComponent.ctorParameters = function () { return [
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialogRef"] },
        { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_material__WEBPACK_IMPORTED_MODULE_2__["MAT_DIALOG_DATA"],] }] }
    ]; };
    ConfirmationDialogComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            // tslint:disable-next-line:component-selector
            selector: 'ctos-confirmation-dialog',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./confirmation-dialog.component.html */ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/confirmation-dialog/confirmation-dialog.component.html")).default
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__param"](1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_2__["MAT_DIALOG_DATA"])),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialogRef"], Object])
    ], ConfirmationDialogComponent);
    return ConfirmationDialogComponent;
}());



/***/ }),

/***/ "../common-library/src/lib/components/context-menu/context-menu.component.ts":
/*!***********************************************************************************!*\
  !*** ../common-library/src/lib/components/context-menu/context-menu.component.ts ***!
  \***********************************************************************************/
/*! exports provided: ContextMenuComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ContextMenuComponent", function() { return ContextMenuComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "../../node_modules/@angular/material/esm5/material.es5.js");



var ContextMenuComponent = /** @class */ (function () {
    /**
     * Creates an instance of context menu component.
     */
    function ContextMenuComponent() {
        this.fireEvent = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    ContextMenuComponent.prototype.ngOnInit = function () {
    };
    Object.defineProperty(ContextMenuComponent.prototype, "options", {
        /**
         * Gets options
         */
        get: function () {
            return this._options;
        },
        set: function (optionList) {
            this._options = optionList;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Menus click
     * @param name
     */
    ContextMenuComponent.prototype.menuClick = function (name) {
        this.fireEvent.emit(name);
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('menu', { static: true }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatMenu"])
    ], ContextMenuComponent.prototype, "matMenu", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])
    ], ContextMenuComponent.prototype, "fireEvent", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], ContextMenuComponent.prototype, "contextMenuClass", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], ContextMenuComponent.prototype, "xPosition", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], ContextMenuComponent.prototype, "yPosition", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], ContextMenuComponent.prototype, "heading", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Array),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Array])
    ], ContextMenuComponent.prototype, "options", null);
    ContextMenuComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            // tslint:disable-next-line:component-selector
            selector: 'ctos-context-menu',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./context-menu.component.html */ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/context-menu/context-menu.component.html")).default,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], ContextMenuComponent);
    return ContextMenuComponent;
}());



/***/ }),

/***/ "../common-library/src/lib/components/display-banner/display-banner.component.ts":
/*!***************************************************************************************!*\
  !*** ../common-library/src/lib/components/display-banner/display-banner.component.ts ***!
  \***************************************************************************************/
/*! exports provided: DisplayBannerComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DisplayBannerComponent", function() { return DisplayBannerComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material/snack-bar */ "../../node_modules/@angular/material/esm5/snack-bar.es5.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "../../node_modules/@angular/material/esm5/material.es5.js");




var DisplayBannerComponent = /** @class */ (function () {
    /**
     * Creates an instance of display banner component.
     * @param data
     * @param snackBarRef
     */
    function DisplayBannerComponent(data, snackBarRef) {
        this.data = data;
        this.snackBarRef = snackBarRef;
    }
    DisplayBannerComponent.prototype.ngOnInit = function () {
    };
    /**
     * Closes display banner component
     */
    DisplayBannerComponent.prototype.close = function () {
        this.snackBarRef.dismiss();
    };
    DisplayBannerComponent.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_SNACK_BAR_DATA"],] }] },
        { type: _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_2__["MatSnackBarRef"] }
    ]; };
    DisplayBannerComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'ctos-display-banner',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./display-banner.component.html */ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/display-banner/display-banner.component.html")).default
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__param"](0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_SNACK_BAR_DATA"])),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Object, _angular_material_snack_bar__WEBPACK_IMPORTED_MODULE_2__["MatSnackBarRef"]])
    ], DisplayBannerComponent);
    return DisplayBannerComponent;
}());



/***/ }),

/***/ "../common-library/src/lib/components/export/export.component.ts":
/*!***********************************************************************!*\
  !*** ../common-library/src/lib/components/export/export.component.ts ***!
  \***********************************************************************/
/*! exports provided: ExportComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ExportComponent", function() { return ExportComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _services_pce_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../services/pce.service */ "../common-library/src/lib/services/pce.service.ts");



var ExportComponent = /** @class */ (function () {
    function ExportComponent(pceService) {
        this.pceService = pceService;
        this.headerCells = {
            background: '#ffffff',
            color: '#ffffff'
        };
        this.cellAlignment = {
            textAlign: 'left'
        };
        this.count = 0;
    }
    ExportComponent.prototype.ngOnChanges = function (changes) {
        this.count = this.count + 1;
        if (this.startExport && this.count > 1) {
            if (changes.exportToExcelObj.currentValue.data) {
                this.excelexportdata.data = changes.exportToExcelObj.currentValue.data;
            }
            this.pceService.exportData([this.excelexportheader, this.excelexportdata, this.excelexportfooter]);
        }
    };
    ExportComponent.prototype.ngAfterViewInit = function () {
        if (this.startExport) {
            this.pceService.exportData([this.excelexportheader, this.excelexportdata, this.excelexportfooter]);
        }
    };
    ExportComponent.ctorParameters = function () { return [
        { type: _services_pce_service__WEBPACK_IMPORTED_MODULE_2__["PCEService"] }
    ]; };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ExportComponent.prototype, "startExport", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ExportComponent.prototype, "exportToExcelObj", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('excelexportdata', { static: true }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ExportComponent.prototype, "excelexportdata", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('excelexportheader', { static: true }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ExportComponent.prototype, "excelexportheader", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('excelexportfooter', { static: true }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], ExportComponent.prototype, "excelexportfooter", void 0);
    ExportComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            // tslint:disable-next-line:component-selector
            selector: 'ctos-export',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./export.component.html */ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/export/export.component.html")).default
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_pce_service__WEBPACK_IMPORTED_MODULE_2__["PCEService"]])
    ], ExportComponent);
    return ExportComponent;
}());



/***/ }),

/***/ "../common-library/src/lib/components/info/info.component.ts":
/*!*******************************************************************!*\
  !*** ../common-library/src/lib/components/info/info.component.ts ***!
  \*******************************************************************/
/*! exports provided: InfoComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InfoComponent", function() { return InfoComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");



var InfoComponent = /** @class */ (function () {
    function InfoComponent(route) {
        this.route = route;
    }
    InfoComponent.prototype.ngOnInit = function () {
        this.message = this.route.snapshot.data['info-message'];
    };
    InfoComponent.prototype.ngOnDestroy = function () {
        this.message = null;
    };
    InfoComponent.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"] }
    ]; };
    InfoComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'ctos-info',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./info.component.html */ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/info/info.component.html")).default,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"]])
    ], InfoComponent);
    return InfoComponent;
}());



/***/ }),

/***/ "../common-library/src/lib/components/main-header/main-header.component.ts":
/*!*********************************************************************************!*\
  !*** ../common-library/src/lib/components/main-header/main-header.component.ts ***!
  \*********************************************************************************/
/*! exports provided: MainHeaderComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MainHeaderComponent", function() { return MainHeaderComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "../../node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var _services_help_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../services/help.service */ "../common-library/src/lib/services/help.service.ts");
/* harmony import */ var _confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../confirmation-dialog/confirmation-dialog.component */ "../common-library/src/lib/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony import */ var _display_banner_display_banner_component__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../display-banner/display-banner.component */ "../common-library/src/lib/components/display-banner/display-banner.component.ts");
/* harmony import */ var _models_appWindow__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../../models/appWindow */ "../common-library/src/lib/models/appWindow.ts");
/* harmony import */ var _models_user_profile__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./../../models/user-profile */ "../common-library/src/lib/models/user-profile.ts");
/* harmony import */ var _services_configuration_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./../../services/configuration.service */ "../common-library/src/lib/services/configuration.service.ts");
/* harmony import */ var _services_error_terms_store_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./../../services/error-terms-store.service */ "../common-library/src/lib/services/error-terms-store.service.ts");
/* harmony import */ var _services_locale_app_resources_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./../../services/locale-app-resources.service */ "../common-library/src/lib/services/locale-app-resources.service.ts");
/* harmony import */ var _services_logout_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./../../services/logout.service */ "../common-library/src/lib/services/logout.service.ts");
/* harmony import */ var _utils_AppUtil__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./../../utils/AppUtil */ "../common-library/src/lib/utils/AppUtil.ts");
/* harmony import */ var _utils_service_constant__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./../../utils/service-constant */ "../common-library/src/lib/utils/service-constant.ts");
/* harmony import */ var _password_password_component__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./../password/password.component */ "../common-library/src/lib/components/password/password.component.ts");
/* harmony import */ var _services_dialog_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ../../services/dialog.service */ "../common-library/src/lib/services/dialog.service.ts");
/* harmony import */ var _services_server_status_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ../../services/server-status.service */ "../common-library/src/lib/services/server-status.service.ts");



















var MainHeaderComponent = /** @class */ (function () {
    /**
     * Creates an instance of main header component.
     * @param configurationService
     * @param router
     * @param errorTermsStoreService
     * @param localeAppResourcesService
     * @param dialog
     * @param snackBar
     * @param helpService
     * @param logoutService
     * @param dialogService
     * @param serverStatusService
     */
    function MainHeaderComponent(logoutService, configurationService, router, errorTermsStoreService, localeAppResourcesService, dialog, snackBar, helpService, dialogService, serverStatusService) {
        this.logoutService = logoutService;
        this.configurationService = configurationService;
        this.router = router;
        this.errorTermsStoreService = errorTermsStoreService;
        this.localeAppResourcesService = localeAppResourcesService;
        this.dialog = dialog;
        this.snackBar = snackBar;
        this.helpService = helpService;
        this.dialogService = dialogService;
        this.serverStatusService = serverStatusService;
        this.contextMenuClass = 'main-header-context-menu';
        this.toShowOverlay = false;
        this.hideCustomerLogo = false;
        this.headerTabClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    MainHeaderComponent.prototype.ngOnInit = function () {
        this.subscriptions = [];
        this.setUserProfile();
        this.show = false;
        this.toConfirmLogout = false;
        this.toAbout = false;
        this.successPasswordmessage = false;
        this.LogoutMessage1 = this.errorTermsStoreService.getErrorMessage('LogoutMessage1');
        this.LogoutMessage2 = this.errorTermsStoreService.getErrorMessage('LogoutMessage2');
        this.passwordResetSuccessful = this.errorTermsStoreService.getErrorMessage('PasswordResetSuccessful');
        this.OkLabel = this.localeAppResourcesService.getResource('OkLabel');
        this.CancelLabel = this.localeAppResourcesService.getResource('CancelLabel');
    };
    MainHeaderComponent.prototype.ngAfterViewInit = function () {
        var widget = window.AppcuesWidget(window.Appcues.user());
        widget.init('#my-widget', {
            position: 'left'
            // Optionally add a header and/or footer.
            // header: '<h2>Study Optimizer</h2>',
            // footer: '<p>Sample Footer</p>'
        });
    };
    MainHeaderComponent.prototype.ngOnChanges = function (changes) {
        if (changes.userProfile) {
            this.setUserProfile();
        }
    };
    /**
     * Sets user profile
     */
    MainHeaderComponent.prototype.setUserProfile = function () {
        if (this.userProfile !== undefined) {
            this.userInitials = _utils_AppUtil__WEBPACK_IMPORTED_MODULE_14__["AppUtil"].getNameInitials(this.userProfile.$name, this.userProfile.$nameSeparator);
            /** Add below code to implement requirement of SO-19533 **/
            var UserArr = this.userProfile.$name.split(' ');
            this.UserNameToolTip = UserArr.join('\n');
            if (UserArr.length > 1) {
                this.firstName = UserArr[0];
                delete UserArr[0];
                this.lastName = UserArr.join(' ');
            }
            else {
                this.firstName = UserArr.join(' ');
            }
            this.profileItems = this.userProfile.$items;
        }
        else {
            this.userInitials = '';
            this.UserNameToolTip = '';
            this.profileItems = [];
        }
    };
    // toggleProfile(value?: boolean) {
    //   if (value !== undefined) {
    //     this.show = value;
    //   } else {
    //     this.show = !this.show;
    //   }
    // }
    /**
     * Determines whether tab click on
     * @param moduleName
     */
    MainHeaderComponent.prototype.onTabClick = function (moduleName) {
        var _this = this;
        this.canDeactivate().subscribe(function (res) {
            if (res === true) {
                _this.headerTabClicked.emit(moduleName);
            }
        });
    };
    /**
     * Determines whether deactivate can
     * @param [isReset]
     * @returns deactivate
     */
    MainHeaderComponent.prototype.canDeactivate = function (isReset) {
        if (isReset === true) {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])(true);
        }
        if (this.dialogService.isStatusChanged === true) {
            return this.dialogService.confirm();
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["of"])(true);
    };
    /**
     * Gets resource
     * @param key
     * @returns resource
     */
    MainHeaderComponent.prototype.getResource = function (key) {
        return this.localeAppResourcesService.getResource(key);
    };
    /**
     * Gets action app resource
     * @returns action app resource
     */
    MainHeaderComponent.prototype.getActionAppResource = function () {
        return {
            about: this.getResource('HeaderAboutStudyOptimizer'),
            logout: this.getResource('HeaderLogout'),
            help: this.getResource('HeaderProfileHelp'),
            password: this.getResource('HeaderChangePassword')
        };
    };
    /**
     * Determines whether click action on
     * @param item
     */
    MainHeaderComponent.prototype.onClickAction = function (item) {
        if (item) {
            // this.toggleProfile();
            if (this.getActionAppResource().logout === item) {
                this.openConfirmLogoutDialog();
            }
            else if (this.getActionAppResource().about === item) {
                this.openAboutDialog();
            }
            else if (this.getActionAppResource().password === item) {
                this.openPasswordDialog();
            }
            else if (this.getActionAppResource().help === item) {
                this.helpService.openHelp();
            }
            else {
                this.router.navigate([item.toLowerCase()]);
            }
        }
    };
    /**
     * Opens confirm logout dialog
     */
    MainHeaderComponent.prototype.openConfirmLogoutDialog = function () {
        var _this = this;
        var logoutDialogRef = this.dialog.open(_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_6__["ConfirmationDialogComponent"], {
            width: _utils_service_constant__WEBPACK_IMPORTED_MODULE_15__["DIALOG_CONFIG"].LOGOUT.WIDTH,
            data: this.getLogoutDialogProp(),
            panelClass: _utils_service_constant__WEBPACK_IMPORTED_MODULE_15__["DIALOG_CONFIG"].LOGOUT.PANEL_CLASS,
            id: _utils_service_constant__WEBPACK_IMPORTED_MODULE_15__["DIALOG_CONFIG"].LOGOUT.ID
        });
        this.subscriptions.push(logoutDialogRef.afterClosed().subscribe(function (eventObject) {
            if (eventObject && eventObject.action === _this.getLogoutDialogProp().okLabel) {
                _this.logout();
            }
        }));
    };
    /**
     * Gets logout dialog prop
     * @returns
     */
    MainHeaderComponent.prototype.getLogoutDialogProp = function () {
        var logoutMsg = this.errorTermsStoreService.getErrorMessage('LogoutMessage1') +
            '<br>' +
            this.errorTermsStoreService.getErrorMessage('LogoutMessage2') +
            '<br>';
        return {
            heading: '',
            message: logoutMsg,
            prefixMaterialIcon: {
                name: 'help',
                color: '#0e6ca9',
                size: '65px'
            },
            okLabel: this.localeAppResourcesService.getResource('OkLabel'),
            cancelLabel: this.localeAppResourcesService.getResource('CancelLabel')
        };
    };
    /**
     * Logouts main header component
     */
    MainHeaderComponent.prototype.logout = function () {
        var _this = this;
        var actionParam = {};
        // TODO
        var subscription = this.logoutService.logout().subscribe(function (data) {
            if (data.result === _utils_service_constant__WEBPACK_IMPORTED_MODULE_15__["COMMON"].RESULT_OK) {
                if (_this.serverStatusService.serverStatus) {
                    if (_this.serverStatusService.serverStatus.loginRequired) {
                        var loginUrl = _this.configurationService.$loginUrl;
                        if (loginUrl) {
                            _models_appWindow__WEBPACK_IMPORTED_MODULE_8__["AppWindow"].getWindow().location.href = loginUrl;
                        }
                    }
                    else {
                        _models_appWindow__WEBPACK_IMPORTED_MODULE_8__["AppWindow"].getWindow().location.href = _this.serverStatusService.serverStatus.ssoRedirectURL;
                    }
                }
            }
            else if (data.result === _utils_service_constant__WEBPACK_IMPORTED_MODULE_15__["COMMON"].RESULT_ERROR) {
                console.log(data.error.message);
                throw new Error(data.error.message);
            }
        });
        this.subscriptions.push(subscription);
    };
    /**
     * Opens about dialog
     */
    MainHeaderComponent.prototype.openAboutDialog = function () {
        var logoutDialogRef = this.dialog.open(_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_6__["ConfirmationDialogComponent"], {
            width: _utils_service_constant__WEBPACK_IMPORTED_MODULE_15__["DIALOG_CONFIG"].ABOUT.WIDTH,
            data: this.getAboutDialogProp(),
            panelClass: _utils_service_constant__WEBPACK_IMPORTED_MODULE_15__["DIALOG_CONFIG"].ABOUT.PANEL_CLASS,
            id: _utils_service_constant__WEBPACK_IMPORTED_MODULE_15__["DIALOG_CONFIG"].ABOUT.ID
        });
    };
    MainHeaderComponent.prototype.getAboutDialogProp = function () {
        return {
            heading: this.aboutResource.aboutBoxTitle,
            message: this.aboutResource.aboutBoxVersion +
                '<br><br>' +
                this.aboutResource.aboutBoxDisclaimer,
            postfixImageUrl: this.aboutResource.logoUrl,
            okLabel: this.localeAppResourcesService.getResource('OkLabel'),
            showCancel: false
        };
    };
    MainHeaderComponent.prototype.openPasswordDialog = function () {
        var _this = this;
        var passwordDialogRef = this.dialog.open(_password_password_component__WEBPACK_IMPORTED_MODULE_16__["PasswordComponent"], {
            width: _utils_service_constant__WEBPACK_IMPORTED_MODULE_15__["DIALOG_CONFIG"].PASSWORD.WIDTH,
            data: this.getPasswordDialogProp(),
            panelClass: _utils_service_constant__WEBPACK_IMPORTED_MODULE_15__["DIALOG_CONFIG"].PASSWORD.PANEL_CLASS,
            id: _utils_service_constant__WEBPACK_IMPORTED_MODULE_15__["DIALOG_CONFIG"].PASSWORD.ID
        });
        this.subscriptions.push(passwordDialogRef.afterClosed().subscribe(function (eventObject) {
            if (eventObject) {
                console.log(eventObject.data);
                _this.showBanner('positive', 'positive-snackbar', 'assets/images/manageplans/icon-positive.png', 'PasswordResetSuccessful');
            }
        }));
    };
    /**
     * Gets password dialog prop
     * @returns
     */
    MainHeaderComponent.prototype.getPasswordDialogProp = function () {
        return {
            heading: this.passwordResource.changePassword,
            currentPassword: this.passwordResource.currentPassword,
            nonEmptyField: this.passwordResource.nonEmptyField,
            newPassword: this.passwordResource.newPassword,
            confirmPassword: this.passwordResource.confirmPassword,
            passwordMisMatchMessage: this.passwordResource.passwordMisMatchMessage,
            lengthRule: this.passwordResource.lengthRule,
            mixCharRule: this.passwordResource.mixCharRule,
            okLabel: this.localeAppResourcesService.getResource('OkLabel'),
            cancelLabel: this.localeAppResourcesService.getResource('CancelLabel')
        };
    };
    /**
     * Shows banner
     * @param messageType
     * @param panelClass
     * @param iconPath
     * @param messageCode
     */
    MainHeaderComponent.prototype.showBanner = function (messageType, panelClass, iconPath, messageCode) {
        this.snackBar.openFromComponent(_display_banner_display_banner_component__WEBPACK_IMPORTED_MODULE_7__["DisplayBannerComponent"], {
            data: {
                message: this.errorTermsStoreService.getErrorMessage(messageCode),
                icon: iconPath,
                messageType: messageType
            },
            panelClass: [panelClass]
        });
    };
    /**
     * Onclicks window
     */
    MainHeaderComponent.prototype.onclickWindow = function () {
        console.log('clicked');
    };
    /**
     * Hides image
     * @param event
     */
    MainHeaderComponent.prototype.hideImage = function (event) {
        this.hideCustomerLogo = true;
    };
    // @HostListener('keydown', ['$event'])
    // public keydown(event: any): void {
    //   if (event.keyCode === 27) {
    //     this.toggleProfile(false);
    //   }
    // }
    // @HostListener('document:click', ['$event'])
    // public documentClick(event: any): void {
    //   if (!this.contains(event.target)) {
    //     this.toggleProfile(false);
    //   }
    // }
    /**
     * Contains main header component
     * @param target
     * @returns true if contains
     */
    MainHeaderComponent.prototype.contains = function (target) {
        return (this.profileAnchor.nativeElement.contains(target) ||
            (this.profilePopup
                ? this.profilePopup.nativeElement.contains(target)
                : false));
    };
    MainHeaderComponent.prototype.ngOnDestroy = function () {
        this.items = null;
        this.userProfile = null;
        this.passwordComponent = null;
        this.profileItems = null;
        this.subscriptions.forEach(function (subscription) {
            subscription.unsubscribe();
        });
        this.subscriptions = null;
    };
    MainHeaderComponent.ctorParameters = function () { return [
        { type: _services_logout_service__WEBPACK_IMPORTED_MODULE_13__["LogoutService"] },
        { type: _services_configuration_service__WEBPACK_IMPORTED_MODULE_10__["ConfigurationService"] },
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"] },
        { type: _services_error_terms_store_service__WEBPACK_IMPORTED_MODULE_11__["ErrorTermsStoreService"] },
        { type: _services_locale_app_resources_service__WEBPACK_IMPORTED_MODULE_12__["LocaleAppResourcesService"] },
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"] },
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatSnackBar"] },
        { type: _services_help_service__WEBPACK_IMPORTED_MODULE_5__["HelpService"] },
        { type: _services_dialog_service__WEBPACK_IMPORTED_MODULE_17__["DialogService"] },
        { type: _services_server_status_service__WEBPACK_IMPORTED_MODULE_18__["ServerStatusService"] }
    ]; };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Array)
    ], MainHeaderComponent.prototype, "items", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _models_user_profile__WEBPACK_IMPORTED_MODULE_9__["UserProfile"])
    ], MainHeaderComponent.prototype, "userProfile", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], MainHeaderComponent.prototype, "logoUrl", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], MainHeaderComponent.prototype, "appInfoUrl", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], MainHeaderComponent.prototype, "alertConfirmUrl", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], MainHeaderComponent.prototype, "aboutResource", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], MainHeaderComponent.prototype, "passwordResource", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])
    ], MainHeaderComponent.prototype, "headerTabClicked", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('menu', { static: true }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatMenu"])
    ], MainHeaderComponent.prototype, "matMenu", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('profile', { static: true }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
    ], MainHeaderComponent.prototype, "profileAnchor", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('profilePopup', { read: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"], static: true }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
    ], MainHeaderComponent.prototype, "profilePopup", void 0);
    MainHeaderComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'ctos-main-header',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./main-header.component.html */ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/main-header/main-header.component.html")).default,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_logout_service__WEBPACK_IMPORTED_MODULE_13__["LogoutService"],
            _services_configuration_service__WEBPACK_IMPORTED_MODULE_10__["ConfigurationService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_3__["Router"],
            _services_error_terms_store_service__WEBPACK_IMPORTED_MODULE_11__["ErrorTermsStoreService"],
            _services_locale_app_resources_service__WEBPACK_IMPORTED_MODULE_12__["LocaleAppResourcesService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatSnackBar"],
            _services_help_service__WEBPACK_IMPORTED_MODULE_5__["HelpService"],
            _services_dialog_service__WEBPACK_IMPORTED_MODULE_17__["DialogService"],
            _services_server_status_service__WEBPACK_IMPORTED_MODULE_18__["ServerStatusService"]])
    ], MainHeaderComponent);
    return MainHeaderComponent;
}());



/***/ }),

/***/ "../common-library/src/lib/components/nested-dropdown/nested-dropdown.component.scss":
/*!*******************************************************************************************!*\
  !*** ../common-library/src/lib/components/nested-dropdown/nested-dropdown.component.scss ***!
  \*******************************************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9jb21tb24tbGlicmFyeS9zcmMvbGliL2NvbXBvbmVudHMvbmVzdGVkLWRyb3Bkb3duL25lc3RlZC1kcm9wZG93bi5jb21wb25lbnQuc2NzcyJ9 */");

/***/ }),

/***/ "../common-library/src/lib/components/nested-dropdown/nested-dropdown.component.ts":
/*!*****************************************************************************************!*\
  !*** ../common-library/src/lib/components/nested-dropdown/nested-dropdown.component.ts ***!
  \*****************************************************************************************/
/*! exports provided: NestedDropdownComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NestedDropdownComponent", function() { return NestedDropdownComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "../../node_modules/@angular/material/esm5/material.es5.js");



var NestedDropdownComponent = /** @class */ (function () {
    function NestedDropdownComponent() {
        this.optionClick = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    NestedDropdownComponent.prototype.ngOnInit = function () {
    };
    NestedDropdownComponent.prototype.optionClicked = function (item) {
        this.optionClick.emit(item);
    };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])
    ], NestedDropdownComponent.prototype, "optionClick", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('menu', { static: true }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatMenu"])
    ], NestedDropdownComponent.prototype, "menu", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Array)
    ], NestedDropdownComponent.prototype, "items", void 0);
    NestedDropdownComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'ctos-nested-dropdown',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./nested-dropdown.component.html */ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/nested-dropdown/nested-dropdown.component.html")).default,
            styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./nested-dropdown.component.scss */ "../common-library/src/lib/components/nested-dropdown/nested-dropdown.component.scss")).default]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], NestedDropdownComponent);
    return NestedDropdownComponent;
}());



/***/ }),

/***/ "../common-library/src/lib/components/notes/notes.component.ts":
/*!*********************************************************************!*\
  !*** ../common-library/src/lib/components/notes/notes.component.ts ***!
  \*********************************************************************/
/*! exports provided: NotesComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NotesComponent", function() { return NotesComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _utils_AppUtil__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../utils/AppUtil */ "../common-library/src/lib/utils/AppUtil.ts");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/material */ "../../node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _utils_service_constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/service-constant */ "../common-library/src/lib/utils/service-constant.ts");





var NotesComponent = /** @class */ (function () {
    function NotesComponent(dialogRef, countryNotesProp) {
        this.dialogRef = dialogRef;
        this.countryNotesProp = countryNotesProp;
        this.isEditMode = false;
        this.selectionIndex = null;
        this.isNoteContentEnabled = false;
        this.isNoteEditAccess = false;
        this.noteTemplate = {
            'indicator': '',
            'lastModifiedDate': '',
            'userId': '',
            'userName': '',
            'content': ''
        };
    }
    NotesComponent.prototype.ngOnInit = function () {
        this.noteTemplate = this.getEmptyNote();
        // this.isNoteContentEnabled = this.countryNotesProp.hasEditAccess && this.countryNotesProp.isEditablePlan;
        // this.isNoteEditAccess = this.countryNotesProp.hasEditAccess && this.countryNotesProp.isEditablePlan;
        // this.isNoteContentEnabled = false;
        this.areNotesEditable = this.countryNotesProp.areNotesEditable;
    };
    NotesComponent.prototype.cancel = function () {
        this.dialogRef.close();
    };
    NotesComponent.prototype.ok = function () {
        this.countryNotesProp.noteList.forEach(function (note) {
            if (!note.indicator) {
                note.indicator = _utils_service_constant__WEBPACK_IMPORTED_MODULE_4__["INDICATOR"].INSERT;
            }
        });
        this.dialogRef.close({ action: this.countryNotesProp.resources.SAVE, noteList: this.countryNotesProp.noteList });
    };
    NotesComponent.prototype.addComment = function () {
        this.noteTemplate.userId = this.countryNotesProp.userId;
        this.noteTemplate.userName = this.countryNotesProp.userName;
        this.noteTemplate.lastModifiedDate = _utils_AppUtil__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].formatDate(new Date(), _utils_service_constant__WEBPACK_IMPORTED_MODULE_4__["DATE_FORMAT"].NOTE_API_DATE_FORMAT_SMALL);
        if (!this.isEditMode) {
            this.countryNotesProp.noteList.push(this.noteTemplate);
        }
        else {
            this.noteTemplate.oldUserId = this.selectedNote.userId;
            this.noteTemplate.isModified = true;
            this.countryNotesProp.noteList[this.selectionIndex] = this.noteTemplate;
            this.isEditMode = false;
            this.selectionIndex = null;
        }
        this.isNoteContentEnabled = true;
        this.noteTemplate = this.getEmptyNote();
    };
    NotesComponent.prototype.getEmptyNote = function () {
        return {
            'indicator': '',
            'lastModifiedDate': _utils_AppUtil__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].formatDate(new Date(), _utils_service_constant__WEBPACK_IMPORTED_MODULE_4__["DATE_FORMAT"].NOTE_API_DATE_FORMAT_SMALL),
            'userId': this.countryNotesProp.userId,
            'userName': this.countryNotesProp.userName,
            'content': ''
        };
    };
    NotesComponent.prototype.onContentChange = function (event) {
        if (this.noteTemplate) {
            if (this.noteTemplate.indicator) {
                this.noteTemplate.indicator = _utils_service_constant__WEBPACK_IMPORTED_MODULE_4__["INDICATOR"].UPDATE;
            }
        }
    };
    NotesComponent.prototype.isEnabled = function () {
        if (this.countryNotesProp.areNotesEditable) {
            if (this.noteTemplate.content && this.noteTemplate.content.trim().length !== 0) {
                return true;
            }
        }
        return false;
    };
    NotesComponent.prototype.onNoteSelected = function (selectedNote, index) {
        this.selectionIndex = index;
        this.isEditMode = true;
        this.selectedNote = tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, selectedNote);
        this.noteTemplate = JSON.parse(JSON.stringify(selectedNote));
    };
    NotesComponent.prototype.resetNote = function () {
        this.isEditMode = false;
        this.selectionIndex = null;
        this.noteTemplate = this.getEmptyNote();
    };
    NotesComponent.prototype.removeNote = function (index) {
        if (this.countryNotesProp && this.countryNotesProp.noteList) {
            if (index > -1 && index < this.countryNotesProp.noteList.length) {
                if (!this.countryNotesProp.noteList[index].indicator) {
                    this.countryNotesProp.noteList.splice(index, 1);
                }
                else {
                    this.selectedNote = tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, this.countryNotesProp.noteList[index]);
                    this.countryNotesProp.noteList[index].indicator = _utils_service_constant__WEBPACK_IMPORTED_MODULE_4__["INDICATOR"].DELETE;
                    this.countryNotesProp.noteList[index].oldUserId = this.selectedNote.userId;
                    this.countryNotesProp.noteList[index].isModified = true;
                    this.isNoteContentEnabled = true;
                }
                if (index === this.selectionIndex) {
                    this.resetNote();
                }
            }
        }
    };
    NotesComponent.prototype.isDeletedNote = function (note) {
        return note.indicator === _utils_service_constant__WEBPACK_IMPORTED_MODULE_4__["INDICATOR"].DELETE;
    };
    NotesComponent.ctorParameters = function () { return [
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialogRef"] },
        { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_DIALOG_DATA"],] }] }
    ]; };
    NotesComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'ctos-notes',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./notes.component.html */ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/notes/notes.component.html")).default
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__param"](1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_3__["MAT_DIALOG_DATA"])),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_3__["MatDialogRef"], Object])
    ], NotesComponent);
    return NotesComponent;
}());



/***/ }),

/***/ "../common-library/src/lib/components/password/password.component.ts":
/*!***************************************************************************!*\
  !*** ../common-library/src/lib/components/password/password.component.ts ***!
  \***************************************************************************/
/*! exports provided: PasswordComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PasswordComponent", function() { return PasswordComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "../../node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var _services_error_terms_store_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../services/error-terms-store.service */ "../common-library/src/lib/services/error-terms-store.service.ts");
/* harmony import */ var _services_reset_password_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/reset-password.service */ "../common-library/src/lib/services/reset-password.service.ts");





var PasswordComponent = /** @class */ (function () {
    /**
     * Creates an instance of password component.
     * @param dialogRef
     * @param data
     * @param resetPasswordService
     * @param errorTermsStoreService
     */
    function PasswordComponent(dialogRef, data, resetPasswordService, errorTermsStoreService) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.resetPasswordService = resetPasswordService;
        this.errorTermsStoreService = errorTermsStoreService;
        // passWordPolicyList: Array<string> = ['LENGHTHRULE', 'MIXCHARRULE'];
        // nonEmptyField: string;
        // passwordMisMatchMessage: string;
        this.validationMessage = '';
        // rules: string[];
        this.showSuccessMessage = false;
        this.showError = false;
        if (!data.okLabel) {
            data.okLabel = 'Ok';
        }
        if (!data.cancelLabel) {
            data.cancelLabel = 'Cancel';
        }
    }
    PasswordComponent.prototype.ngOnInit = function () {
        this.getPasswordRulesList();
    };
    /**
     * Cancels password component
     * @param btnLabel
     */
    PasswordComponent.prototype.cancel = function (btnLabel) {
        this.dialogRef.close();
    };
    /**
     * password component
     * @param btnLabel
     * @param form
     */
    PasswordComponent.prototype.ok = function (btnLabel, form) {
        if (form.valid) {
            var passowordInfo = {
                currentPassword: form.value.currentPassword,
                newPassword: form.value.newPassword
            };
            this.changePassword(passowordInfo);
        }
    };
    /**
     * Changes password
     * @param payload
     */
    PasswordComponent.prototype.changePassword = function (payload) {
        var _this = this;
        this.resetPasswordService
            .changeCurrUserPassword(payload)
            .subscribe(function (data) {
            if (data.result !== 'OK') {
                _this.validationMessage = _this.errorTermsStoreService.getErrorMessage(data.error.errorCode);
                // this.showBanner(
                //   'positive',
                //   'positive-snackbar',
                //   'assets/images/manageplans/icon-positive.png',
                //   'PasswordResetSuccessful'
                // );
            }
            else {
                _this.dialogRef.close({ data: data });
            }
        });
    };
    /**
     * Hides success message
     */
    PasswordComponent.prototype.hideSuccessMessage = function () {
        this.showSuccessMessage = false;
        this.validationMessage = '';
    };
    /**
     * Gets password rules list
     */
    PasswordComponent.prototype.getPasswordRulesList = function () {
        this.data.lengthRule = this.data.lengthRule;
        var mixruleSplit = this.data.mixCharRule.split('\n');
        this.mixruleSplitHeader = mixruleSplit[0];
        this.mixruleSplit = mixruleSplit.splice(1, (mixruleSplit.length - 1));
    };
    PasswordComponent.ctorParameters = function () { return [
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialogRef"] },
        { type: undefined, decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"], args: [_angular_material__WEBPACK_IMPORTED_MODULE_2__["MAT_DIALOG_DATA"],] }] },
        { type: _services_reset_password_service__WEBPACK_IMPORTED_MODULE_4__["ResetPasswordService"] },
        { type: _services_error_terms_store_service__WEBPACK_IMPORTED_MODULE_3__["ErrorTermsStoreService"] }
    ]; };
    PasswordComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'ctos-password',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./password.component.html */ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/password/password.component.html")).default
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__param"](1, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Inject"])(_angular_material__WEBPACK_IMPORTED_MODULE_2__["MAT_DIALOG_DATA"])),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialogRef"], Object, _services_reset_password_service__WEBPACK_IMPORTED_MODULE_4__["ResetPasswordService"],
            _services_error_terms_store_service__WEBPACK_IMPORTED_MODULE_3__["ErrorTermsStoreService"]])
    ], PasswordComponent);
    return PasswordComponent;
}());



/***/ }),

/***/ "../common-library/src/lib/components/redirect/redirect.component.ts":
/*!***************************************************************************!*\
  !*** ../common-library/src/lib/components/redirect/redirect.component.ts ***!
  \***************************************************************************/
/*! exports provided: RedirectComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RedirectComponent", function() { return RedirectComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _models_appWindow__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../models/appWindow */ "../common-library/src/lib/models/appWindow.ts");
/* harmony import */ var _utils_AppUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../utils/AppUtil */ "../common-library/src/lib/utils/AppUtil.ts");
/* harmony import */ var _utils_service_constant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/service-constant */ "../common-library/src/lib/utils/service-constant.ts");






var RedirectComponent = /** @class */ (function () {
    /**
     * Creates an instance of redirect component.
     * @param route
     */
    function RedirectComponent(route) {
        this.route = route;
    }
    RedirectComponent.prototype.ngOnInit = function () {
        var queryParams = this.route.snapshot.queryParams;
        var url = _utils_AppUtil__WEBPACK_IMPORTED_MODULE_4__["AppUtil"].generateUrl(_utils_service_constant__WEBPACK_IMPORTED_MODULE_5__["BASE_HREF"], this.route.snapshot.data.externalUrlFragment);
        var addque = true;
        for (var i in queryParams) {
            if (queryParams[i] !== undefined) {
                if (addque) {
                    url += '?';
                    addque = false;
                }
                else {
                    url += '&';
                }
                url += i + '=' + queryParams[i];
            }
        }
        _models_appWindow__WEBPACK_IMPORTED_MODULE_3__["AppWindow"].getWindow().location.href = url;
    };
    RedirectComponent.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"] }
    ]; };
    RedirectComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'ctos-redirect',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./redirect.component.html */ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/redirect/redirect.component.html")).default
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"]])
    ], RedirectComponent);
    return RedirectComponent;
}());



/***/ }),

/***/ "../common-library/src/lib/components/search-list/search-list.component.ts":
/*!*********************************************************************************!*\
  !*** ../common-library/src/lib/components/search-list/search-list.component.ts ***!
  \*********************************************************************************/
/*! exports provided: SearchListComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SearchListComponent", function() { return SearchListComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "../../node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _utils_service_constant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../../utils/service-constant */ "../common-library/src/lib/utils/service-constant.ts");
/* harmony import */ var _services_dialog_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../../services/dialog.service */ "../common-library/src/lib/services/dialog.service.ts");







var SearchListComponent = /** @class */ (function () {
    /**
     * Creates an instance of search list component.
     * @param searchListFB
     * @param dialogService
     */
    function SearchListComponent(searchListFB, dialogService) {
        this.searchListFB = searchListFB;
        this.dialogService = dialogService;
        this.labels = {};
        this.toggleArrowFlag = false;
        this.itemSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.selectionChange = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    Object.defineProperty(SearchListComponent.prototype, "searchListFormGroupName", {
        get: function () {
            return this.searchListFormGroup;
        },
        set: function (value) {
            this.searchListFormGroup = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SearchListComponent.prototype, "$searchGroups", {
        /**
         * Getter $searchGroups
         * @return Array<any>
         */
        get: function () {
            return this.searchGroups;
        },
        enumerable: true,
        configurable: true
    });
    SearchListComponent.prototype.ngOnInit = function () {
        this.subscriptions = new Map();
        this.initializeSubjects();
        this.setFilter();
        this.setSearchGroups();
    };
    /**
     * on changes
     * @param changes
     */
    SearchListComponent.prototype.ngOnChanges = function (changes) {
        if (changes &&
            changes.searchListFormGroupName &&
            this.searchListFormGroupName.get('searchListControl') &&
            this.searchListFormGroupName.get('searchListControl').value) {
            this.removeSubscription();
            this.subscriptions = new Map();
            this.setFilter(this.searchListFormGroupName.get('searchListControl').value);
        }
    };
    /**
     * Gets selected item
     * @param selectedItemkey
     * @param list
     * @returns selected item
     */
    SearchListComponent.prototype.getSelectedItem = function (selectedItemkey, list) {
        var selectedItem;
        if (selectedItemkey !== undefined &&
            selectedItemkey !== null &&
            list !== undefined &&
            list !== null) {
            selectedItem =
                list.find(function (item) {
                    if (typeof selectedItemkey === 'string') {
                        return (item.id.toLowerCase() === selectedItemkey.toLowerCase());
                    }
                    else {
                        return item.key === selectedItemkey;
                    }
                }) || '';
        }
        else {
            selectedItem = '';
        }
        if (this.dialogService.selectedStudyKey === undefined ||
            this.dialogService.selectedStudyKey === null ||
            this.dialogService.selectedStudyKey === '') {
            this.dialogService.selectedStudyKey = selectedItem;
        }
        return selectedItem;
    };
    SearchListComponent.prototype.initializeSubjects = function () {
        this.recentlistItemsSubject = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
        this.allListItemsSubject = new rxjs__WEBPACK_IMPORTED_MODULE_3__["Subject"]();
    };
    /**
     * Setter setSearchGroups
     */
    SearchListComponent.prototype.setSearchGroups = function () {
        if (this.recentlistItemsSubject === undefined ||
            this.allListItemsSubject === undefined) {
            this.initializeSubjects();
        }
        // tslint:disable-next-line:prefer-const
        var searchGroups = [];
        // recentListItemsLabel condition is checked for not showing most recently list In copy plan
        if (this.searchListInput.recentListItemsLabel) {
            searchGroups.push({
                name: this.searchListInput.recentListItemsLabel,
                list: this.recentlistItemsSubject.asObservable()
            });
        }
        searchGroups.push({
            name: this.searchListInput.allListItemsLabel,
            list: this.allListItemsSubject.asObservable()
        });
        this.searchGroups = searchGroups;
    };
    /**
     * Sets filter
     * @param [initialValue]
     */
    SearchListComponent.prototype.setFilter = function (initialValue) {
        var _this = this;
        this.isFirstFilterCall = true;
        if (!this.subscriptions.has('valueChangeSubscription')) {
            var listControl = this.isSearchListOn ? 'filterListControl' : 'searchListControl';
            if (this.searchListFormGroupName
                .get(listControl)) {
                var valueChangeSubscription = this.searchListFormGroupName
                    .get(listControl)
                    .valueChanges.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["startWith"])(initialValue || ''), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["debounceTime"])(_utils_service_constant__WEBPACK_IMPORTED_MODULE_5__["DEBOUNCE_TIME"]), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (value) {
                    return typeof value === 'string' ? value : value.id;
                }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["distinctUntilChanged"])(function (oldValue, newValue) {
                    return oldValue === newValue;
                }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["mergeMap"])(function (item) {
                    return _this.filterItems(item, initialValue || _this.searchListInput.selectedItemKey);
                }))
                    .subscribe(function (data) { });
                this.subscriptions.set('valueChangeSubscription', valueChangeSubscription);
            }
        }
    };
    /**
     * Filters items
     * @param value
     * @param [selectedItemKey]
     * @returns items
     */
    SearchListComponent.prototype.filterItems = function (value, selectedItemKey) {
        var _this = this;
        var self = this;
        if (self.searchListInput.searchApi !== undefined) {
            var searchApiSubscription = self.searchListInput
                .searchApi(value)
                .subscribe(function (resp) {
                if (resp.allListItems && resp.allListItems.length > 0) {
                    self.recentlistItemsSubject.next(resp.recentListItems);
                    self.allListItemsSubject.next(resp.allListItems);
                }
                else if (resp.allListItems && resp.allListItems.length <= 0) {
                    self.recentlistItemsSubject.next([_this.searchListInput.recentListItemsLabel]);
                    self.allListItemsSubject.next([_this.searchListInput.allListItemsLabel]);
                }
                var selectedItem = self.getSelectedItem(selectedItemKey, resp.recentListItems);
                if (_this.isFirstFilterCall) {
                    self.searchListFormGroupName
                        .get('searchListControl')
                        .setValue(selectedItem);
                    _this.isFirstFilterCall = false;
                }
                _this.selectionChange.emit(selectedItem);
            });
            this.subscriptions.set('searchApiSubscription', searchApiSubscription);
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["of"])(self.searchGroups);
    };
    /**
     * Formats item
     * @param [item]
     * @returns item
     */
    SearchListComponent.prototype.formatItem = function (item) {
        var ret;
        if (!item) {
            return;
        }
        else if (typeof item === 'string') {
            ret = item;
        }
        else {
            ret = item.id;
        }
        return ret;
    };
    /**
     * Clicks search list component
     */
    SearchListComponent.prototype.click = function () {
        this.searchListFormGroup.get('filterListControl').setValue('');
    };
    /**
     * Determines whether blur on
     */
    SearchListComponent.prototype.onBlur = function () {
        var newValue = '';
        if (this.searchListFormGroup.get('searchListControl') &&
            this.searchListFormGroup.get('searchListControl').value) {
            if (this.searchListFormGroup.get('searchListControl').value.hasOwnProperty('searchListControl')) {
                newValue = this.searchListFormGroup.get('searchListControl').value.searchListControl;
            }
            else {
                newValue = this.searchListFormGroup.get('searchListControl').value;
            }
        }
        this.searchListFormGroup.get('searchListControl').setValue(newValue);
    };
    /**
     * Opens search list component
     */
    SearchListComponent.prototype.open = function () {
        this.toggleArrowFlag = true;
        if (this.searchListFormGroup.get('filterListControl') &&
            this.searchListFormGroup.get('filterListControl').value) {
            this.searchListFormGroup.get('filterListControl').setValue('');
        }
    };
    /**
     * Closes search list component
     */
    SearchListComponent.prototype.close = function () {
        if (this.searchListFormGroup.get('filterListControl') &&
            this.searchListFormGroup.get('filterListControl').value) {
            this.searchListFormGroup.get('filterListControl').setValue('');
        }
        this.toggleArrowFlag = false;
    };
    /**
     * Items selected
     * @param event
     */
    SearchListComponent.prototype.itemSelected = function (event) {
        var _this = this;
        var isReset = this.dialogService.isProceed !== undefined
            ? this.dialogService.isProceed
            : false;
        this.canDeactivate(isReset).subscribe(function (res) {
            if (res === true) {
                _this.dialogService.isStatusChanged = false;
                _this.selectionChange.emit(event.option.value);
                _this.itemSelect.emit(event);
                _this.searchbox.nativeElement.expanded = false;
                _this.searchbox.nativeElement.blur();
            }
            else {
                var values = _this.dialogService.selectedStudyKey;
                _this.searchListFormGroupName.get('searchListControl').setValue(values);
            }
        });
    };
    /**
     * Determines whether deactivate can
     * @param [isReset]
     * @returns deactivate
     */
    SearchListComponent.prototype.canDeactivate = function (isReset) {
        if (isReset === true) {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["of"])(true);
        }
        if (this.dialogService.isStatusChanged === true) {
            return this.dialogService.confirm();
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["of"])(true);
    };
    SearchListComponent.prototype.ngOnDestroy = function () {
        this.searchListInput = null;
        this.itemSelect = null;
        this.selectionChange = null;
        this.searchListFormGroupName = null;
        this.recentlistItemsSubject = null;
        this.allListItemsSubject = null;
        this.searchGroups = null;
        this.removeSubscription();
    };
    /**
     * Removes subscription
     */
    SearchListComponent.prototype.removeSubscription = function () {
        this.subscriptions.forEach(function (subscription) {
            subscription.unsubscribe();
        });
        this.subscriptions = null;
    };
    SearchListComponent.ctorParameters = function () { return [
        { type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"] },
        { type: _services_dialog_service__WEBPACK_IMPORTED_MODULE_6__["DialogService"] }
    ]; };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Boolean)
    ], SearchListComponent.prototype, "isSearchListOn", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], SearchListComponent.prototype, "searchListInput", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Boolean)
    ], SearchListComponent.prototype, "required", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]])
    ], SearchListComponent.prototype, "searchListFormGroupName", null);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], SearchListComponent.prototype, "labels", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])
    ], SearchListComponent.prototype, "itemSelect", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])
    ], SearchListComponent.prototype, "selectionChange", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewChild"])('searchbox', { static: false }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"])
    ], SearchListComponent.prototype, "searchbox", void 0);
    SearchListComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'ctos-search-list',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./search-list.component.html */ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/search-list/search-list.component.html")).default,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormBuilder"],
            _services_dialog_service__WEBPACK_IMPORTED_MODULE_6__["DialogService"]])
    ], SearchListComponent);
    return SearchListComponent;
}());



/***/ }),

/***/ "../common-library/src/lib/components/sub-header/sub-header.component.ts":
/*!*******************************************************************************!*\
  !*** ../common-library/src/lib/components/sub-header/sub-header.component.ts ***!
  \*******************************************************************************/
/*! exports provided: SubHeaderComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SubHeaderComponent", function() { return SubHeaderComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "../../node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var _services_dialog_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../services/dialog.service */ "../common-library/src/lib/services/dialog.service.ts");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");






var SubHeaderComponent = /** @class */ (function () {
    /**
     * Creates an instance of sub header component.
     * @param dialogService
     */
    function SubHeaderComponent(dialogService, router) {
        this.dialogService = dialogService;
        this.router = router;
        this.isSearchListOn = true;
        this.disableLink = false;
        this.itemSelect = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
        this.headerTabClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    Object.defineProperty(SubHeaderComponent.prototype, "searchListFormGroupName", {
        get: function () {
            return this.searchListFormGroup;
        },
        set: function (value) {
            this.searchListFormGroup = value;
        },
        enumerable: true,
        configurable: true
    });
    SubHeaderComponent.prototype.ngOnInit = function () { };
    /**
     * Determines whether tab click on
     * @param moduleName
     * @param $event
     */
    SubHeaderComponent.prototype.onTabClick = function (moduleName, $event) {
        var _this = this;
        var that = this;
        that.canDeactivate().subscribe(function (res) {
            if (that.disableLink === true && moduleName === 'MODULE_PLANNING') {
                $event.stopPropagation();
                $event.preventDefault();
            }
            else if (res === true) {
                _this.headerTabClicked.emit(moduleName);
            }
        });
    };
    /**
     * Items selected
     * @param event
     */
    SubHeaderComponent.prototype.itemSelected = function (event) {
        this.itemSelect.emit(event);
    };
    /**
     * Determines whether study change on
     * @param studyTag
     */
    SubHeaderComponent.prototype.onStudyChange = function (studyTag) {
        if (this.disablePlansTab === true && studyTag && studyTag.newPlanInd === true) {
            this.disableLink = true;
        }
        else {
            this.disableLink = false;
        }
    };
    /**
     * Determines whether deactivate can
     * @param [isReset]
     * @returns deactivate
     */
    SubHeaderComponent.prototype.canDeactivate = function (isReset) {
        if (isReset === true) {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["of"])(true);
        }
        if (this.dialogService.isStatusChanged === true) {
            return this.dialogService.confirm();
        }
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["of"])(true);
    };
    SubHeaderComponent.prototype.isTabActive = function (item) {
        var tabActive = false;
        var url = this.router.url.split('/');
        if (url.length > 1) {
            var currentUrl = url[1];
            tabActive = item.$name.toLowerCase() === currentUrl.toLowerCase();
        }
        return tabActive;
    };
    SubHeaderComponent.prototype.ngOnDestroy = function () {
        this.subHeaders = null;
        this.studyListInput = null;
        this.itemSelect = null;
    };
    SubHeaderComponent.ctorParameters = function () { return [
        { type: _services_dialog_service__WEBPACK_IMPORTED_MODULE_4__["DialogService"] },
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"] }
    ]; };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Array)
    ], SubHeaderComponent.prototype, "subHeaders", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], SubHeaderComponent.prototype, "studyRefreshDate", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], SubHeaderComponent.prototype, "studyRefreshDateLabel", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], SubHeaderComponent.prototype, "studyListInput", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])
    ], SubHeaderComponent.prototype, "itemSelect", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])
    ], SubHeaderComponent.prototype, "headerTabClicked", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Boolean)
    ], SubHeaderComponent.prototype, "disablePlansTab", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["FormGroup"]])
    ], SubHeaderComponent.prototype, "searchListFormGroupName", null);
    SubHeaderComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'ctos-sub-header',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./sub-header.component.html */ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/sub-header/sub-header.component.html")).default
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_services_dialog_service__WEBPACK_IMPORTED_MODULE_4__["DialogService"],
            _angular_router__WEBPACK_IMPORTED_MODULE_5__["Router"]])
    ], SubHeaderComponent);
    return SubHeaderComponent;
}());



/***/ }),

/***/ "../common-library/src/lib/components/tab/tab.component.ts":
/*!*****************************************************************!*\
  !*** ../common-library/src/lib/components/tab/tab.component.ts ***!
  \*****************************************************************/
/*! exports provided: TabComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TabComponent", function() { return TabComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");



var TabComponent = /** @class */ (function () {
    /**
     * Creates an instance of tab component.
     * @param activatedRoute
     */
    function TabComponent(activatedRoute) {
        this.activatedRoute = activatedRoute;
        this.tabClicked = new _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"]();
    }
    TabComponent.prototype.ngOnInit = function () {
        var currentRoutePath = this.activatedRoute.snapshot.firstChild.url[0]
            .path;
        if (this.items) {
            this.selectedTab = this.items.find(function (i) {
                return i.routePath === currentRoutePath;
            });
        }
    };
    /**
     * Selects tab
     * @param item
     * @returns
     */
    TabComponent.prototype.selectTab = function (item) {
        if (!item.enable) {
            return;
        }
        this.selectedTab = item;
        this.tabClicked.emit(item);
    };
    /**
     * Gets mouse event
     * @param tabName
     * @param enability
     */
    TabComponent.prototype.getMouseEvent = function (tabName, enability) {
        this.showTooltip = false;
        if (tabName === 'Countries' && !enability && this.isCohortPlan === 'Y') {
            this.showTooltip = true;
        }
    };
    /**
     * on destroy
     */
    TabComponent.prototype.ngOnDestroy = function () {
        this.selectedTab = null;
    };
    TabComponent.prototype.ngOnChanges = function (changes) {
        if (changes.items && changes.items.currentValue) {
            this.items = changes.items.currentValue;
        }
        if (changes.selectedTabItem && changes.selectedTabItem.currentValue) {
            this.selectedTab = changes.selectedTabItem.currentValue;
        }
    };
    TabComponent.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"] }
    ]; };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], TabComponent.prototype, "isCohortPlan", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Array)
    ], TabComponent.prototype, "items", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Output"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", _angular_core__WEBPACK_IMPORTED_MODULE_1__["EventEmitter"])
    ], TabComponent.prototype, "tabClicked", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], TabComponent.prototype, "selectedTabItem", void 0);
    TabComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            selector: 'ctos-tab',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./tab.component.html */ "../../node_modules/raw-loader/dist/cjs.js!../common-library/src/lib/components/tab/tab.component.html")).default,
            encapsulation: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ViewEncapsulation"].None
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"]])
    ], TabComponent);
    return TabComponent;
}());



/***/ }),

/***/ "../common-library/src/lib/directives/confirm-equal-validator.directive.ts":
/*!*********************************************************************************!*\
  !*** ../common-library/src/lib/directives/confirm-equal-validator.directive.ts ***!
  \*********************************************************************************/
/*! exports provided: ConfirmEqualValidatorDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfirmEqualValidatorDirective", function() { return ConfirmEqualValidatorDirective; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "../../node_modules/@angular/forms/fesm5/forms.js");



var ConfirmEqualValidatorDirective = /** @class */ (function () {
    function ConfirmEqualValidatorDirective() {
    }
    ConfirmEqualValidatorDirective_1 = ConfirmEqualValidatorDirective;
    /**
     * Validates confirm equal validator directive
     * @param control
     * @returns validate
     */
    ConfirmEqualValidatorDirective.prototype.validate = function (control) {
        var controlToCompare = control.parent.get(this.ctosConfirmEqualValidator);
        if (controlToCompare && controlToCompare.value !== control.value) {
            return { 'notEqual': true };
        }
        return null;
    };
    var ConfirmEqualValidatorDirective_1;
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], ConfirmEqualValidatorDirective.prototype, "ctosConfirmEqualValidator", void 0);
    ConfirmEqualValidatorDirective = ConfirmEqualValidatorDirective_1 = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
            // tslint:disable-next-line:directive-selector
            selector: '[ctosConfirmEqualValidator]',
            providers: [{
                    provide: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["NG_VALIDATORS"],
                    useExisting: ConfirmEqualValidatorDirective_1,
                    multi: true
                }]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], ConfirmEqualValidatorDirective);
    return ConfirmEqualValidatorDirective;
}());



/***/ }),

/***/ "../common-library/src/lib/directives/label-control.directive.ts":
/*!***********************************************************************!*\
  !*** ../common-library/src/lib/directives/label-control.directive.ts ***!
  \***********************************************************************/
/*! exports provided: LabelControlDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LabelControlDirective", function() { return LabelControlDirective; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/forms */ "../../node_modules/@angular/forms/fesm5/forms.js");



var LabelControlDirective = /** @class */ (function () {
    function LabelControlDirective(parent) {
        this.parent = parent;
    }
    Object.defineProperty(LabelControlDirective.prototype, "controlValue", {
        /**
         * Gets host binding
         */
        get: function () {
            return this.parent ? this.parent.control.get(this.ctosControlName).value : '';
        },
        enumerable: true,
        configurable: true
    });
    LabelControlDirective.ctorParameters = function () { return [
        { type: _angular_forms__WEBPACK_IMPORTED_MODULE_2__["ControlContainer"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] }
    ]; };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", String)
    ], LabelControlDirective.prototype, "ctosControlName", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostBinding"])('textContent'),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], LabelControlDirective.prototype, "controlValue", null);
    LabelControlDirective = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
            selector: 'label[ctosControlName]',
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__param"](0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"])()),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_forms__WEBPACK_IMPORTED_MODULE_2__["ControlContainer"]])
    ], LabelControlDirective);
    return LabelControlDirective;
}());



/***/ }),

/***/ "../common-library/src/lib/directives/signed-decimal.directive.ts":
/*!************************************************************************!*\
  !*** ../common-library/src/lib/directives/signed-decimal.directive.ts ***!
  \************************************************************************/
/*! exports provided: SignedDecimalDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignedDecimalDirective", function() { return SignedDecimalDirective; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");


var signedDecimalRegex = '^-?\\d*\\.{0,1}\\d+$';
var unsignedDecimalRegex = '^\\d*\\.{0,1}\\d+$';
var SignedDecimalDirective = /** @class */ (function () {
    function SignedDecimalDirective(el) {
        this.el = el;
        this.isSigned = false;
        this.inputElement = el.nativeElement;
    }
    /**
     * Hosts listener
     * @param e
     * @returns
     */
    /**
     * Params signed decimal directive
     * @param e
     * @returns
     */
    SignedDecimalDirective.prototype.onKeyDown = function (e) {
        if ([46, 8, 9, 27, 13, 190, 110].indexOf(e.keyCode) !== -1 || // Allow: Delete, Backspace, Tab, Escape, Enter, Decimal Point
            (e.keyCode === 65 && e.ctrlKey === true) || // Allow: Ctrl+A
            (e.keyCode === 67 && e.ctrlKey === true) || // Allow: Ctrl+C
            (e.keyCode === 86 && e.ctrlKey === true) || // Allow: Ctrl+V
            (e.keyCode === 88 && e.ctrlKey === true) || // Allow: Ctrl+X
            (e.keyCode === 65 && e.metaKey === true) || // Allow: Cmd+A (Mac)
            (e.keyCode === 67 && e.metaKey === true) || // Allow: Cmd+C (Mac)
            (e.keyCode === 86 && e.metaKey === true) || // Allow: Cmd+V (Mac)
            (e.keyCode === 88 && e.metaKey === true) || // Allow: Cmd+X (Mac)
            (e.keyCode >= 35 && e.keyCode <= 39) // Allow: Home, End, Left, Right
        ) {
            // let it happen, don't do anything
            return;
        }
        if (this.isSigned && [189, 109].indexOf(e.keyCode) !== -1) {
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) &&
            (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    };
    SignedDecimalDirective.prototype.onPaste = function (event) {
        event.preventDefault();
        var decimalRegex = unsignedDecimalRegex;
        if (this.isSigned) {
            decimalRegex = signedDecimalRegex;
        }
        var pastedInput = event.clipboardData
            .getData('text/plain');
        var valid = (new RegExp(decimalRegex)).test(pastedInput);
        var value = '';
        if (valid) {
            value = pastedInput;
        }
        document.execCommand('insertText', false, value);
    };
    SignedDecimalDirective.prototype.onDrop = function (event) {
        event.preventDefault();
        var decimalRegex = unsignedDecimalRegex;
        if (this.isSigned) {
            decimalRegex = signedDecimalRegex;
        }
        var textData = event.dataTransfer.getData('text');
        var valid = (new RegExp(decimalRegex)).test(textData);
        var value = '';
        if (valid) {
            value = textData;
        }
        this.inputElement.focus();
        document.execCommand('insertText', false, value);
    };
    SignedDecimalDirective.prototype.onChange = function (e) {
        var decimalRegex = unsignedDecimalRegex;
        if (this.isSigned) {
            decimalRegex = signedDecimalRegex;
        }
        var inputValue = e.target.value;
        var valid = (new RegExp(decimalRegex)).test(inputValue);
        if (!valid) {
            this.inputElement.value = '';
        }
    };
    SignedDecimalDirective.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
    ]; };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], SignedDecimalDirective.prototype, "isSigned", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('keydown', ['$event']),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Function),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [KeyboardEvent]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:returntype", void 0)
    ], SignedDecimalDirective.prototype, "onKeyDown", null);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('paste', ['$event']),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Function),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [ClipboardEvent]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:returntype", void 0)
    ], SignedDecimalDirective.prototype, "onPaste", null);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('drop', ['$event']),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Function),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [DragEvent]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:returntype", void 0)
    ], SignedDecimalDirective.prototype, "onDrop", null);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('change', ['$event']),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Function),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Event]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:returntype", void 0)
    ], SignedDecimalDirective.prototype, "onChange", null);
    SignedDecimalDirective = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
            selector: 'input[ctosSignedDecimal]'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]])
    ], SignedDecimalDirective);
    return SignedDecimalDirective;
}());



/***/ }),

/***/ "../common-library/src/lib/directives/signed-integer.directive.ts":
/*!************************************************************************!*\
  !*** ../common-library/src/lib/directives/signed-integer.directive.ts ***!
  \************************************************************************/
/*! exports provided: SignedIntegerDirective */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SignedIntegerDirective", function() { return SignedIntegerDirective; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");


var signedIntegerRegex = '^[+-]?[0-9]+$';
var unsignedIntegerRegex = '^[0-9]+$';
var SignedIntegerDirective = /** @class */ (function () {
    function SignedIntegerDirective(el) {
        this.el = el;
        this.isSigned = false;
        this.inputElement = el.nativeElement;
    }
    SignedIntegerDirective.prototype.onKeyDown = function (e) {
        if ([46, 8, 9, 27, 13].indexOf(e.keyCode) !== -1 || // Allow: Delete, Backspace, Tab, Escape, Enter
            (e.keyCode === 65 && e.ctrlKey === true) || // Allow: Ctrl+A
            (e.keyCode === 67 && e.ctrlKey === true) || // Allow: Ctrl+C
            (e.keyCode === 86 && e.ctrlKey === true) || // Allow: Ctrl+V
            (e.keyCode === 88 && e.ctrlKey === true) || // Allow: Ctrl+X
            (e.keyCode === 65 && e.metaKey === true) || // Allow: Cmd+A (Mac)
            (e.keyCode === 67 && e.metaKey === true) || // Allow: Cmd+C (Mac)
            (e.keyCode === 86 && e.metaKey === true) || // Allow: Cmd+V (Mac)
            (e.keyCode === 88 && e.metaKey === true) || // Allow: Cmd+X (Mac)
            (e.keyCode >= 35 && e.keyCode <= 39) // Allow: Home, End, Left, Right
        ) {
            // let it happen, don't do anything
            return;
        }
        if (this.isSigned && [189, 109].indexOf(e.keyCode) !== -1) {
            return;
        }
        // Ensure that it is a number and stop the keypress
        if ((e.shiftKey || (e.keyCode < 48 || e.keyCode > 57)) &&
            (e.keyCode < 96 || e.keyCode > 105)) {
            e.preventDefault();
        }
    };
    SignedIntegerDirective.prototype.onPaste = function (event) {
        event.preventDefault();
        var integerRegex = unsignedIntegerRegex;
        if (this.isSigned) {
            integerRegex = signedIntegerRegex;
        }
        var pastedInput = event.clipboardData
            .getData('text/plain');
        var valid = (new RegExp(integerRegex)).test(pastedInput);
        var value = '';
        if (valid) {
            value = pastedInput;
        }
        document.execCommand('insertText', false, value);
    };
    SignedIntegerDirective.prototype.onDrop = function (event) {
        event.preventDefault();
        var integerRegex = unsignedIntegerRegex;
        if (this.isSigned) {
            integerRegex = signedIntegerRegex;
        }
        var textData = event.dataTransfer.getData('text');
        var valid = (new RegExp(integerRegex)).test(textData);
        var value = '';
        if (valid) {
            value = textData;
        }
        this.inputElement.focus();
        document.execCommand('insertText', false, value);
    };
    SignedIntegerDirective.prototype.onChange = function (e) {
        var integerRegex = unsignedIntegerRegex;
        if (this.isSigned) {
            integerRegex = signedIntegerRegex;
        }
        var inputValue = e.target.value;
        var valid = (new RegExp(integerRegex)).test(inputValue);
        if (!valid) {
            this.inputElement.value = '';
        }
    };
    SignedIntegerDirective.ctorParameters = function () { return [
        { type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"] }
    ]; };
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Input"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Object)
    ], SignedIntegerDirective.prototype, "isSigned", void 0);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('keydown', ['$event']),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Function),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [KeyboardEvent]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:returntype", void 0)
    ], SignedIntegerDirective.prototype, "onKeyDown", null);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('paste', ['$event']),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Function),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [ClipboardEvent]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:returntype", void 0)
    ], SignedIntegerDirective.prototype, "onPaste", null);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('drop', ['$event']),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Function),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [DragEvent]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:returntype", void 0)
    ], SignedIntegerDirective.prototype, "onDrop", null);
    tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["HostListener"])('change', ['$event']),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:type", Function),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [Event]),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:returntype", void 0)
    ], SignedIntegerDirective.prototype, "onChange", null);
    SignedIntegerDirective = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Directive"])({
            selector: 'input[ctosSignedInteger]'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_core__WEBPACK_IMPORTED_MODULE_1__["ElementRef"]])
    ], SignedIntegerDirective);
    return SignedIntegerDirective;
}());



/***/ }),

/***/ "../common-library/src/lib/models/ApplicationError.ts":
/*!************************************************************!*\
  !*** ../common-library/src/lib/models/ApplicationError.ts ***!
  \************************************************************/
/*! exports provided: ApplicationError */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ApplicationError", function() { return ApplicationError; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

/**
 * Application error
 */
var ApplicationError = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](ApplicationError, _super);
    /**
     * Creates an instance of application error.
     * @param message
     * @param errorCode
     */
    function ApplicationError(message, errorCode) {
        var _this = _super.call(this, message) || this;
        _this.message = message;
        _this.errorCode = errorCode;
        _this.name = ApplicationError.name;
        Object.setPrototypeOf(_this, ApplicationError.prototype);
        return _this;
    }
    return ApplicationError;
}(Error));



/***/ }),

/***/ "../common-library/src/lib/models/api-end-points.enum.ts":
/*!***************************************************************!*\
  !*** ../common-library/src/lib/models/api-end-points.enum.ts ***!
  \***************************************************************/
/*! exports provided: APIEndPoints */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APIEndPoints", function() { return APIEndPoints; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

var APIEndPoints;
(function (APIEndPoints) {
    APIEndPoints["LOGIN"] = "login";
    APIEndPoints["LOGOUT"] = "logout";
    APIEndPoints["USER_DATA"] = "user/data";
    APIEndPoints["STUDY_TAGS"] = "study/tags";
    APIEndPoints["STUDY_TAGS_LIST"] = "study/tagsList";
    APIEndPoints["BASE_TERMS"] = "prelogin/terms";
    APIEndPoints["APP_DATA"] = "prelogin/appdata";
    APIEndPoints["SERVER_STATUS"] = "prelogin/serverstatus";
    APIEndPoints["USER_PREFERENCE"] = "user/preference";
    APIEndPoints["STUDY_DETAILS"] = "study/details";
    APIEndPoints["STUDY_SETTINGS"] = "study/settings";
    APIEndPoints["COHORT_DETAILS"] = "cohorts/details";
    APIEndPoints["STUDY_SUMMARY"] = "study/summary";
    APIEndPoints["FILTER_COUNTRY_DATA"] = "filter/countrydata";
    APIEndPoints["UPDATE_COUNTRY_NOTES"] = "study/country/notes";
    APIEndPoints["GETALLCURVES"] = "study/all-curves";
    APIEndPoints["GETALLMILESTONES"] = "getAllMileStones";
})(APIEndPoints || (APIEndPoints = {}));


/***/ }),

/***/ "../common-library/src/lib/models/api-payload.ts":
/*!*******************************************************!*\
  !*** ../common-library/src/lib/models/api-payload.ts ***!
  \*******************************************************/
/*! exports provided: APIPayload */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "APIPayload", function() { return APIPayload; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "../../node_modules/@angular/common/fesm5/http.js");


/**
 * API Payload
 */
var APIPayload = /** @class */ (function () {
    function APIPayload(command, queryParams, headers, moduleInfo, jsonRequest) {
        if (queryParams === void 0) { queryParams = null; }
        if (headers === void 0) { headers = null; }
        if (moduleInfo === void 0) { moduleInfo = null; }
        this.command = command;
        this.queryParams = queryParams;
        this.headers = headers;
        this.moduleInfo = moduleInfo;
        this.jsonRequest = jsonRequest;
        this.command = command;
        this.queryParams = this.getQueryParams(queryParams);
        this.headers = this.getHeaders(headers);
        this.moduleInfo = moduleInfo;
        this.jsonRequest = this.getJSONReq(jsonRequest);
    }
    APIPayload.prototype.getHeaders = function (headers) {
        var httpHeaders = {};
        for (var key in headers) {
            if (headers.hasOwnProperty(key)) {
                var element = headers[key];
                httpHeaders[key] = element;
            }
        }
        httpHeaders['Content-Type'] = 'application/json; charset=utf-8';
        // local time header
        httpHeaders['localTime'] = new Date().toString();
        // tenant id
        httpHeaders['tenantID'] = 'tenant1';
        // command header
        if (this.command) {
            httpHeaders['command'] = this.command;
        }
        if (this.moduleInfo) {
            // module header
            if (this.moduleInfo.moduleName) {
                httpHeaders['module'] = this.moduleInfo.moduleName;
            }
            // page name
            if (this.moduleInfo.pageName) {
                httpHeaders['page'] = this.moduleInfo.pageName;
            }
            // study key
            if (this.moduleInfo.studykey) {
                httpHeaders['studykey'] = this.moduleInfo.studykey.toString();
            }
            if (this.moduleInfo.plankey) {
                httpHeaders['plankey'] = this.moduleInfo.plankey.toString();
            }
        }
        return new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpHeaders"](httpHeaders);
    };
    APIPayload.prototype.getQueryParams = function (params) {
        var queryParams = {};
        for (var key in params) {
            if (params.hasOwnProperty(key)) {
                var element = params[key];
                queryParams[key] = element;
            }
        }
        return new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpParams"]({
            fromObject: queryParams
        });
    };
    APIPayload.prototype.getJSONReq = function (jsonRequest) {
        try {
            return jsonRequest ? JSON.stringify(jsonRequest) : null;
        }
        catch (error) {
            console.error('JSON stringify error', error);
            throw new Error('APIPayload: Error passing request object to JSON string');
        }
    };
    return APIPayload;
}());



/***/ }),

/***/ "../common-library/src/lib/models/app-bootstrap.ts":
/*!*********************************************************!*\
  !*** ../common-library/src/lib/models/app-bootstrap.ts ***!
  \*********************************************************/
/*! exports provided: AppBootstrap */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppBootstrap", function() { return AppBootstrap; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

var AppBootstrap = /** @class */ (function () {
    function AppBootstrap() {
    }
    AppBootstrap.prototype.init = function () {
    };
    AppBootstrap.prototype.call = function (environment, serverInfo, actionParam) {
    };
    return AppBootstrap;
}());



/***/ }),

/***/ "../common-library/src/lib/models/appWindow.ts":
/*!*****************************************************!*\
  !*** ../common-library/src/lib/models/appWindow.ts ***!
  \*****************************************************/
/*! exports provided: AppWindow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppWindow", function() { return AppWindow; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

var AppWindow = /** @class */ (function () {
    function AppWindow() {
    }
    AppWindow.getWindow = function () {
        return window;
    };
    return AppWindow;
}());



/***/ }),

/***/ "../common-library/src/lib/models/cache/cache.factory.ts":
/*!***************************************************************!*\
  !*** ../common-library/src/lib/models/cache/cache.factory.ts ***!
  \***************************************************************/
/*! exports provided: CacheFactory */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CacheFactory", function() { return CacheFactory; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./../../utils/cache/store-type.enum */ "../common-library/src/lib/utils/cache/store-type.enum.ts");
/* harmony import */ var _session_store__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./session-store */ "../common-library/src/lib/models/cache/session-store.ts");



/**
 * Cache factory
 */
var CacheFactory = /** @class */ (function () {
    function CacheFactory() {
    }
    CacheFactory.prototype.createStore = function (storeType, encryptionService, config, inMemory) {
        switch (storeType) {
            case _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_1__["StoreType"].InMemory:
                return inMemory;
            case _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_1__["StoreType"].Session:
                return new _session_store__WEBPACK_IMPORTED_MODULE_2__["SessionStore"](encryptionService, config);
            default:
                return null;
        }
    };
    return CacheFactory;
}());



/***/ }),

/***/ "../common-library/src/lib/models/cache/cryptoJS-encryption.ts":
/*!*********************************************************************!*\
  !*** ../common-library/src/lib/models/cache/cryptoJS-encryption.ts ***!
  \*********************************************************************/
/*! exports provided: CryptoJSEncryption */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CryptoJSEncryption", function() { return CryptoJSEncryption; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! crypto-js */ "../../node_modules/crypto-js/index.js");
/* harmony import */ var crypto_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(crypto_js__WEBPACK_IMPORTED_MODULE_1__);


/**
 * Crypto jsencryption
 */
var CryptoJSEncryption = /** @class */ (function () {
    function CryptoJSEncryption() {
    }
    CryptoJSEncryption.prototype.encrypt = function (obj, key) {
        var text = JSON.stringify(obj);
        // const key = CryptoJS.enc.Base64.parse('TEST1234');
        var encrypted = crypto_js__WEBPACK_IMPORTED_MODULE_1__["AES"].encrypt(text, key);
        return encrypted.toString();
    };
    CryptoJSEncryption.prototype.decrypt = function (text, key) {
        // const key = CryptoJS.enc.Base64.parse('TEST1234');
        var decrypted = crypto_js__WEBPACK_IMPORTED_MODULE_1__["AES"].decrypt(text.toString(), key);
        var obj = JSON.parse(decrypted.toString(crypto_js__WEBPACK_IMPORTED_MODULE_1__["enc"].Utf8));
        return obj;
    };
    return CryptoJSEncryption;
}());



/***/ }),

/***/ "../common-library/src/lib/models/cache/session-store.ts":
/*!***************************************************************!*\
  !*** ../common-library/src/lib/models/cache/session-store.ts ***!
  \***************************************************************/
/*! exports provided: SessionStore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SessionStore", function() { return SessionStore; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../utils/cache/encryption-action.enum */ "../common-library/src/lib/utils/cache/encryption-action.enum.ts");




var SessionStore = /** @class */ (function () {
    function SessionStore(encryptionService, config) {
        this.encryptionService = encryptionService;
        this.config = config;
        this.maxAge = config.cacheMaxAge;
    }
    // constructor() {
    //  }
    /**
     * Gets session store
     *
     * This method will check if cache key is available in cache
     * then it will check the encryption flag if it is false then
     * return the value in observable form. If it is true then decrypt the value
     * and return in observable form
     * If key not present in cache then execute the this.post method
     * after the successful exection of  this.post observable method (which return the observable)
     * set the key and value in cache
     * @param key
     * @param [callback]
     * @returns
     */
    SessionStore.prototype.get = function (key, callback) {
        var _this = this;
        if (this.hasValidCachedValue(key)) {
            if (this.isEncrypt) {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])(this.encryptionService.decrypt(sessionStorage.getItem(key)));
            }
            else {
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])(JSON.parse(sessionStorage.getItem(key)));
            }
            //  return of(JSON.parse(sessionStorage.getItem(key)));
        }
        if (callback && callback instanceof rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"]) {
            console.log("%c Calling api for " + key, 'color: purple');
            return callback.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["tap"])(function (value) {
                _this.set(key, value);
            }));
        }
        else {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["throwError"])('Requested key is not available in Cache');
        }
    };
    /**
     * Sets session store
     * Check the encryption flag if it true then store the value in encrypted format
     * other wise store the value in JSON.stringify format.
     * @param key
     * @param value
     */
    SessionStore.prototype.set = function (key, value) {
        // const encryptedValue = this.encryptionService.encrypt(value);
        // sessionStorage.setItem(key, JSON.stringify(value));
        // sessionStorage.setItem(key, encryptedValue);
        if (this.isEncrypt) {
            var encryptedValue = this.encryptionService.encrypt(value);
            sessionStorage.setItem(key, encryptedValue);
        }
        else {
            sessionStorage.setItem(key, JSON.stringify(value));
        }
    };
    /**
     * Calls session store
     * @param [fallback]
     * @param [maxAge]
     * @returns call
     */
    SessionStore.prototype.call = function (fallback, maxAge) {
        if (fallback && fallback instanceof rxjs__WEBPACK_IMPORTED_MODULE_1__["Observable"]) {
            return fallback.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["tap"])(function (value) { return value; }));
        }
    };
    /**
     * Removes session store
     * @param key
     */
    SessionStore.prototype.remove = function (key) {
        if (this.hasValidCachedValue(key)) {
            sessionStorage.removeItem(key);
        }
    };
    /**
     * Determines whether valid cached value has
     * @param key
     * @returns true if valid cached value
     */
    SessionStore.prototype.hasValidCachedValue = function (key) {
        var returnVal = false;
        if (sessionStorage.getItem(key) === null) {
            returnVal = false;
        }
        else {
            returnVal = true;
        }
        return returnVal;
    };
    /**
     * Keys exist
     * @param key
     * @returns
     */
    SessionStore.prototype.keyExist = function (key) {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])(this.hasValidCachedValue(key));
    };
    /**
     * Sets cache age
     * @param [age]
     */
    SessionStore.prototype.setCacheAge = function (age) {
        if (age === void 0) { age = 0; }
        this.maxAge = age;
    };
    /**
     * Sets encryption
     * set the encryption flag
     * @param [encrypt]
     */
    SessionStore.prototype.setEncryption = function (encrypt) {
        this.isEncrypt = (encrypt === _utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_3__["EncryptionAction"].encrypt) ? true : false;
    };
    return SessionStore;
}());



/***/ }),

/***/ "../common-library/src/lib/models/ctos-window.ts":
/*!*******************************************************!*\
  !*** ../common-library/src/lib/models/ctos-window.ts ***!
  \*******************************************************/
/*! exports provided: CtosWindow */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CtosWindow", function() { return CtosWindow; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var _appWindow__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./appWindow */ "../common-library/src/lib/models/appWindow.ts");



var CtosWindow = /** @class */ (function () {
    function CtosWindow() {
    }
    CtosWindow.prototype.getParameterByName = function (name) {
        var url = _appWindow__WEBPACK_IMPORTED_MODULE_2__["AppWindow"].getWindow().location.href;
        name = name.replace(/[[]]/g, '\$&');
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');
        var results = regex.exec(url);
        if (!results) {
            return null;
        }
        if (!results[2]) {
            return '';
        }
        return decodeURIComponent(results[2].replace('/+/g', ' '));
    };
    CtosWindow.prototype.redirectAsPerParams = function () {
    };
    CtosWindow.prototype.userHasPrivilegesForModule = function (moduleId) {
        return Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])('');
    };
    CtosWindow.prototype.navigateToModule = function (moduleName) {
    };
    return CtosWindow;
}());



/***/ }),

/***/ "../common-library/src/lib/models/http-verbs.ts":
/*!******************************************************!*\
  !*** ../common-library/src/lib/models/http-verbs.ts ***!
  \******************************************************/
/*! exports provided: HttpVerbs */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpVerbs", function() { return HttpVerbs; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

var HttpVerbs;
(function (HttpVerbs) {
    HttpVerbs["get"] = "get";
    HttpVerbs["post"] = "post";
    HttpVerbs["put"] = "put";
    HttpVerbs["delete"] = "delete";
    HttpVerbs["patch"] = "patch";
})(HttpVerbs || (HttpVerbs = {}));


/***/ }),

/***/ "../common-library/src/lib/models/list-item.ts":
/*!*****************************************************!*\
  !*** ../common-library/src/lib/models/list-item.ts ***!
  \*****************************************************/
/*! exports provided: ListItem */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ListItem", function() { return ListItem; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

var ListItem = /** @class */ (function () {
    function ListItem($name, $url, $moduleName, $isEnabled, $isVisible) {
        this.name = $name;
        this.url = $url;
        this.moduleName = $moduleName;
        this.isEnabled = $isEnabled;
        this.isVisible = $isVisible;
    }
    Object.defineProperty(ListItem.prototype, "$name", {
        /**
         * Getter $name
         * @return string
         */
        get: function () {
            return this.name;
        },
        /**
         * Setter $name
         * @param string value
         */
        set: function (value) {
            this.name = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "$url", {
        /**
         * Getter $url
         * @return string
         */
        get: function () {
            return this.url;
        },
        /**
         * Setter $url
         * @param string value
         */
        set: function (value) {
            this.url = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "$moduleName", {
        /**
        * Getter $moduleName
        * @return string
        */
        get: function () {
            return this.moduleName;
        },
        /**
         * Setter $moduleName
         * @param string value
         */
        set: function (value) {
            this.moduleName = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "$isEnabled", {
        /**
         * Getter $isEnabled
         * @return string
         */
        get: function () {
            return this.isEnabled;
        },
        /**
         * Setter $isEnabled
         * @param string value
         */
        set: function (value) {
            this.isEnabled = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ListItem.prototype, "$isVisible", {
        /**
         * Getter $isVisible
         * @return string
         */
        get: function () {
            return this.isVisible;
        },
        /**
         * Setter $isVisible
         * @param string value
         */
        set: function (value) {
            this.isVisible = value;
        },
        enumerable: true,
        configurable: true
    });
    return ListItem;
}());



/***/ }),

/***/ "../common-library/src/lib/models/payload.ts":
/*!***************************************************!*\
  !*** ../common-library/src/lib/models/payload.ts ***!
  \***************************************************/
/*! exports provided: Payload */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Payload", function() { return Payload; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

/**
 * Payload
 */
var Payload = /** @class */ (function () {
    /**
     * Creates an instance of payload.
     * @param command
     * @param params
     * @param xmlRequest
     */
    function Payload(command, params, xmlRequest) {
        this.command = command;
        this.params = params;
        this.xmlRequest = xmlRequest;
    }
    return Payload;
}());



/***/ }),

/***/ "../common-library/src/lib/models/user-idle.config.ts":
/*!************************************************************!*\
  !*** ../common-library/src/lib/models/user-idle.config.ts ***!
  \************************************************************/
/*! exports provided: UserIdleConfig */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserIdleConfig", function() { return UserIdleConfig; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

var UserIdleConfig = /** @class */ (function () {
    function UserIdleConfig() {
    }
    return UserIdleConfig;
}());



/***/ }),

/***/ "../common-library/src/lib/models/user-profile.ts":
/*!********************************************************!*\
  !*** ../common-library/src/lib/models/user-profile.ts ***!
  \********************************************************/
/*! exports provided: UserProfile */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserProfile", function() { return UserProfile; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

var UserProfile = /** @class */ (function () {
    function UserProfile($name, $items, $nameSeparator) {
        this.name = $name;
        this.items = $items;
        this.nameSeparator = $nameSeparator;
    }
    Object.defineProperty(UserProfile.prototype, "$name", {
        /**
         * Getter $name
         * @return string
         */
        get: function () {
            return this.name;
        },
        /**
         * Setter $name
         * @param string value
         */
        set: function (value) {
            this.name = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserProfile.prototype, "$items", {
        /**
         * Getter $items
         * @return ListItem[]
         */
        get: function () {
            return this.items;
        },
        /**
         * Setter $items
         * @param ListItem[] value
         */
        set: function (value) {
            this.items = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UserProfile.prototype, "$nameSeparator", {
        /**
         * Getter $nameSeparator
         * @return string
         */
        get: function () {
            return this.nameSeparator;
        },
        /**
         * Setter $nameSeparator
         * @param string value
         */
        set: function (value) {
            this.nameSeparator = value;
        },
        enumerable: true,
        configurable: true
    });
    return UserProfile;
}());



/***/ }),

/***/ "../common-library/src/lib/services/base-connection.service.ts":
/*!*********************************************************************!*\
  !*** ../common-library/src/lib/services/base-connection.service.ts ***!
  \*********************************************************************/
/*! exports provided: BaseConnectionService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseConnectionService", function() { return BaseConnectionService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../utils/cache/cache-type.enum */ "../common-library/src/lib/utils/cache/cache-type.enum.ts");
/* harmony import */ var _utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../utils/cache/encryption-action.enum */ "../common-library/src/lib/utils/cache/encryption-action.enum.ts");
/* harmony import */ var _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../utils/cache/store-type.enum */ "../common-library/src/lib/utils/cache/store-type.enum.ts");
/* harmony import */ var _utils_service_constant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../utils/service-constant */ "../common-library/src/lib/utils/service-constant.ts");
/* harmony import */ var _dependency_manager_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./dependency-manager.service */ "../common-library/src/lib/services/dependency-manager.service.ts");








var BaseConnectionService = /** @class */ (function () {
    /**
     * Creates an instance of base connection service.
     * @param dependencyManagerService
     */
    function BaseConnectionService(dependencyManagerService) {
        this.dependencyManagerService = dependencyManagerService;
    }
    /**
     * Sends request
     *
     * It call the dependencyManagerService get method which return the api result.
     * It contains the payloadObj (xmlRequest which pass in api call)
     * and action interface parameter.
     * It call the setDefault method and setting the default values.
     *
     * @param payloadObj
     * @param [baseParam]
     * @returns data
     */
    BaseConnectionService.prototype.sendRequest = function (payloadObj, baseParam) {
        if (!payloadObj) {
            throw new Error('PayloadObj can not be undefined or empty');
        }
        var xmlRequest;
        if (typeof payloadObj === 'string') {
            xmlRequest = payloadObj;
        }
        else {
            xmlRequest = payloadObj.xmlRequest;
        }
        console.warn('BaseConnection ->sendRequest [DEPRECATED]:' +
            ' Directly passing XMLRequest as string is no longer supported!  XMLRequest :: ', xmlRequest);
        var cmdName = xmlRequest.match(/<command name=\"(\w+)\"/i)[1];
        var actionParam = {};
        if (!baseParam) {
            baseParam = actionParam;
        }
        baseParam = this.setDefault(baseParam);
        if (!baseParam.xmlRequest) {
            baseParam.xmlRequest = xmlRequest;
        }
        if (!baseParam.cmdName) {
            baseParam.cmdName = cmdName;
        }
        return this.dependencyManagerService.get(baseParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (data) {
            return data;
        }));
    };
    /**
     * Sends request
     *
     * It call the dependencyManagerService get method which return the api result.
     * It contains the payloadObj (jsonRequest which pass in api call)
     * and action interface parameter.
     * It call the setDefault method and setting the default values.
     *
     * @param payloadObj
     * @param [actionParam]
     * @returns res
     */
    BaseConnectionService.prototype.send = function (payloadObj, actionParam) {
        if (!payloadObj) {
            throw new Error('PayloadObj can not be undefined or empty');
        }
        console.warn('BaseConnection ->sendRequest:', payloadObj.jsonRequest);
        var cmdName = payloadObj.command;
        actionParam = !actionParam ? {} : actionParam;
        actionParam = this.setDefault(actionParam);
        if (!actionParam.cmdName) {
            actionParam.cmdName = cmdName;
        }
        return this.dependencyManagerService.setDependencies(payloadObj, actionParam)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) {
            return res;
        }));
    };
    /**
     * Sets default
     * sendRequest function is caller of setDefault method.
     *
     * Default value
     * reportError=true
     * storeType=InMemory
     * cacheType=nonSticky
     * encryption=false
     * isSelf= false
     *
     * @param [baseParam]
     * @returns
     */
    BaseConnectionService.prototype.setDefault = function (baseParam) {
        if (!baseParam.url) {
            baseParam.url = _utils_service_constant__WEBPACK_IMPORTED_MODULE_6__["DISPATCH_URL"];
        }
        if (baseParam.reportError === undefined || baseParam.reportError === null) {
            baseParam.reportError = true;
        }
        if (!baseParam.cacheType) {
            baseParam.cacheType = _utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_3__["CacheType"].nonsticky;
        }
        if (!baseParam.storeType) {
            baseParam.storeType = _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_5__["StoreType"].InMemory;
        }
        if (!baseParam.encryption) {
            baseParam.encryption = _utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_4__["EncryptionAction"].noencrypt;
        }
        if (baseParam.isSelf === undefined || baseParam.isSelf === null) {
            baseParam.isSelf = false;
        }
        // to call studyoptimizer app by default(after login)
        if (!baseParam.isSSOEndPoint) {
            baseParam.isSSOEndPoint = false;
        }
        /* if (!baseParam.endPoint) {
            baseParam.endPoint = true;
        } */
        if (!baseParam.prelogin) {
            baseParam.prelogin = false;
        }
        return baseParam;
    };
    BaseConnectionService.ctorParameters = function () { return [
        { type: _dependency_manager_service__WEBPACK_IMPORTED_MODULE_7__["DependencyManagerService"] }
    ]; };
    BaseConnectionService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_dependency_manager_service__WEBPACK_IMPORTED_MODULE_7__["DependencyManagerService"]])
    ], BaseConnectionService);
    return BaseConnectionService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/base-payload-command.service.ts":
/*!**************************************************************************!*\
  !*** ../common-library/src/lib/services/base-payload-command.service.ts ***!
  \**************************************************************************/
/*! exports provided: BasePayloadCommandService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BasePayloadCommandService", function() { return BasePayloadCommandService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _models_payload__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../models/payload */ "../common-library/src/lib/models/payload.ts");
/* harmony import */ var _utils_string_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../utils/string-util */ "../common-library/src/lib/utils/string-util.ts");
/* harmony import */ var _models_api_payload__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/api-payload */ "../common-library/src/lib/models/api-payload.ts");





var BasePayloadCommandService = /** @class */ (function () {
    /**
     * Creates an instance of base payload command service.
     */
    function BasePayloadCommandService() {
    }
    /**
     * Gets xmltag
     * @param tags
     * @returns the xml elements
     */
    BasePayloadCommandService.prototype.getXMLTag = function (tags) {
        // If the content is not an Object or an Array return the value
        if (typeof tags !== 'object') {
            if (typeof tags === 'string') {
                tags = _utils_string_util__WEBPACK_IMPORTED_MODULE_3__["StringUtil"].escapeHTML(tags);
            }
            return tags;
        }
        var req = '';
        // For each Value that you have in the object or an Array process it for a new tag
        for (var key in tags) {
            if (!tags.hasOwnProperty(key)) {
                continue;
            }
            // If The Data is not in the form of an Array parse the OBject for parameters and tags
            if (Object.prototype.toString.call(tags) !== '[object Array]') {
                if (key !== 'params' && key !== 'value') {
                    req += "<" + key;
                    if (tags[key] && tags[key].params !== undefined) {
                        // console.log('Params:', tags[key].params);
                        for (var value in tags[key].params) {
                            // req += ' ' + value + '=\'' + tags[key].params[value] + '\'';
                            if (value) {
                                req += " " + value + "=\"" + tags[key].params[value] + "\"";
                            }
                        }
                    }
                    req += ">";
                }
            }
            if (key !== 'params') {
                req += this.getXMLTag(tags[key]);
            }
            if (Object.prototype.toString.call(tags) !== '[object Array]') {
                if (key !== 'params' && key !== 'value') {
                    req += "</" + key + ">";
                }
            }
        }
        return req;
    };
    /**
     * Builds request
     *
     * It will generate the xmlRequest
     * Create the serviceRequest xml root tag
     * Based on command parameter value, create the command xml tag
     * If params parameter value is not null then iterate it and
     * create the parameter tag under the command xml tag
     * check the commandTags parameter if it is not null then call the getXMLTag method and set
     * the output in request variable.
     * create the UserAction xml tag and add module, page and localtime xml tag.
     * e.g.
     * const params = categories: {
          category: 'login'
      }
     * buildRequest('GetTerms',params.categories);
     * Output
     *  <serviceRequest xmlns="http://www.coprindm.com">
        <command name="GetTerms">
          <parameter name="category">login</parameter>
        </command>
        <userAction>
        <module>STDLST</module>
        <page>MNGHILST</page>
          <localTime>Thu Jun 21 10:21:46 GMT+0530 2018</localTime>
        </userAction>
      </serviceRequest>
     * If the commandTags paramter is not null then call the getXMLTag method
     * e.g. const tempObject = {
        criteriaList: {
          value: [ {
            criterionVal: {
            params: {
              criterionId: 'THERAPY'
            },
            value: 'All1'
          }},
          {
            criterionVal: {
            params: {
              criterionId: 'ASSET'
            },
            value: 'All2'
          }}
          ]
        }
      };
     * buildRequest('GetTerms',{},{},tempObject);
     * Output
     *<serviceRequest xmlns="http://www.coprindm.com">
        <command name="GetStudyList">
          <criteriaList>
            <criterionVal criterionId="THERAPY">All1</criterionVal>
               <criterionVal criterionId="ASSET">All2</criterionVal>
          </criteriaList>
        </command>
        <userAction>
          <localTime>Thu Jun 21 12:25:23 GMT+0530 2018</localTime>
        </userAction>
      </serviceRequest>
     * @param command
     * @param [params]
     * @param [tags]
     * @param [commandTags]
     * @param [moduleInfo]
     * @returns xmlRequest
     */
    BasePayloadCommandService.prototype.buildRequest = function (command, params, tags, commandTags, moduleInfo) {
        if (params === void 0) { params = {}; }
        if (tags === void 0) { tags = null; }
        if (commandTags === void 0) { commandTags = null; }
        if (moduleInfo === void 0) { moduleInfo = null; }
        // let cacheResponse = (!!params && !!params.cacheResponse),
        // cacheId = command;
        var req = "<serviceRequest xmlns=\"http://www.coprindm.com\">";
        var key;
        req += "<command name=\"" + command + "\">";
        if (params !== null) {
            // if (cacheResponse) {
            // delete cacheResponse prop from params as it's used flagging BaseConnection.sendRequest to cache response or not.
            // delete params.cacheResponse;
            // }
            for (key in params) {
                if (key) {
                    var paramsVal = '';
                    if (typeof params[key] === 'string') {
                        paramsVal = _utils_string_util__WEBPACK_IMPORTED_MODULE_3__["StringUtil"].escapeHTML(params[key]);
                    }
                    else {
                        paramsVal = params[key];
                    }
                    req += "<parameter name=\"" + key + "\">" + paramsVal + "</parameter>";
                    // cacheId += '_' + key + '-' + params[key];
                }
                // @NOTE should we consider truncating cache id as it might get really long for long list of parameters!
            }
        }
        if (null !== commandTags && undefined !== commandTags) {
            req += this.getXMLTag(commandTags);
        }
        req += "</command>";
        req += "<userAction>";
        // To add module and page detail parameters
        if (moduleInfo) {
            if (moduleInfo.moduleName) {
                req += "<module>" + moduleInfo.moduleName + "</module>";
            }
            if (moduleInfo.pageName) {
                req += "<page>" + moduleInfo.pageName + "</page>";
            }
            if (moduleInfo.studykey) {
                req += "<studykey>" + moduleInfo.studykey + "</studykey>";
            }
        }
        req += "<localTime>" + (new Date()).toString() + "</localTime>";
        req += "</userAction>";
        if (null !== tags) {
            for (key in tags) {
                if (key) {
                    req += "<" + key + ">" + tags[key] + "</" + key + ">";
                }
            }
        }
        req += "</serviceRequest>";
        return new _models_payload__WEBPACK_IMPORTED_MODULE_2__["Payload"](command, params, req);
    };
    BasePayloadCommandService.prototype.buildAPIRequest = function (command, params, tags, commandTags, moduleInfo) {
        if (params === void 0) { params = {}; }
        if (tags === void 0) { tags = null; }
        if (commandTags === void 0) { commandTags = null; }
        if (moduleInfo === void 0) { moduleInfo = null; }
        return new _models_api_payload__WEBPACK_IMPORTED_MODULE_4__["APIPayload"](command, params, moduleInfo);
    };
    BasePayloadCommandService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], BasePayloadCommandService);
    return BasePayloadCommandService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/base-terms.service.ts":
/*!****************************************************************!*\
  !*** ../common-library/src/lib/services/base-terms.service.ts ***!
  \****************************************************************/
/*! exports provided: BaseTermsService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BaseTermsService", function() { return BaseTermsService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/cache/encryption-action.enum */ "../common-library/src/lib/utils/cache/encryption-action.enum.ts");
/* harmony import */ var _utils_cache_key_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../utils/cache-key.enum */ "../common-library/src/lib/utils/cache-key.enum.ts");
/* harmony import */ var _utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../utils/cache/cache-type.enum */ "../common-library/src/lib/utils/cache/cache-type.enum.ts");
/* harmony import */ var _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../utils/cache/store-type.enum */ "../common-library/src/lib/utils/cache/store-type.enum.ts");
/* harmony import */ var _base_connection_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base-connection.service */ "../common-library/src/lib/services/base-connection.service.ts");
/* harmony import */ var _payload_command_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./payload-command.service */ "../common-library/src/lib/services/payload-command.service.ts");
/* harmony import */ var _models_api_end_points_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/api-end-points.enum */ "../common-library/src/lib/models/api-end-points.enum.ts");










var BaseTermsService = /** @class */ (function () {
    /**
     * Creates an instance of base terms service.
     * @param baseConnectionService
     * @param payloadCommandService
     */
    function BaseTermsService(baseConnectionService, payloadCommandService) {
        this.baseConnectionService = baseConnectionService;
        this.payloadCommandService = payloadCommandService;
        this.appResources = null;
        this.appPropertyList = {};
        /**
         * Common terms of base terms service
         */
        this._commonTerms = null;
    }
    /**
     * Load Term Service
     *
     * The first api call will load the GetTerms data of terms category.
     * Based on parameter the second api call will load the Getterms data of login or error category.
     * e.g.
     *
       ProductName available in  terms api call
        {
          "name": "ProductName",
          "value": "IQVIA StudyOptimizer"
        }
     *  login api call
     *  {
          "name": "LoginWelcome",
          "value": "<font color='#333333'>Welcome to !ProductName!<\/font>"
        }
     * Since productname is available in terms api hence first call the terms api and set the information in
     * _commonTerms variable and then call the login api.
     *
     * @param params
     * @param [actionParam]
     * @returns login or error terminology information
     */
    BaseTermsService.prototype.loadData = function (params, actionParam) {
        if (!params) {
            throw new Error("Params can not be empty or undefined in base term servie");
        }
        if (!this.typeCheck(params)) {
            throw new Error("Invalid params object");
        }
        var that = this;
        var termsPayload = this.payloadCommandService.getCommandDetails(params.commandName, params.category);
        var baseParam = {};
        baseParam = Object.assign({}, actionParam);
        baseParam.cacheKey = _utils_cache_key_enum__WEBPACK_IMPORTED_MODULE_4__["CacheKey"].TermKey;
        return that.baseConnectionService.sendRequest(termsPayload, baseParam)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return res; }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["mergeMap"])(function (data) {
            if (data.terminologies.term) {
                that._commonTerms = [];
                Object.assign(that._commonTerms, data.terminologies);
                termsPayload = that.payloadCommandService.getCommandDetails(params.commandName, params.category);
                var param = {};
                if (!actionParam) {
                    actionParam = param;
                }
                return that.baseConnectionService.sendRequest(termsPayload, actionParam)
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
                    if (response.terminologies) {
                        var rTerms = response.terminologies;
                        return rTerms;
                    }
                }));
            }
        }));
    };
    BaseTermsService.prototype.load = function (params, actionParam) {
        if (!params) {
            throw new Error("Params can not be empty or undefined in base term servie");
        }
        if (!this.typeCheck(params)) {
            throw new Error("Invalid params object");
        }
        var that = this;
        var baseParam = {};
        if (!actionParam) {
            actionParam = baseParam;
        }
        var termsPayload;
        if (actionParam.endPoint) {
            termsPayload = that.payloadCommandService.getApiRequest(params.commandName, params.category);
            return that.baseConnectionService.send(termsPayload, actionParam)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
                if (response.terminologies) {
                    var rTerms = response.terminologies;
                    return rTerms;
                }
            }));
        }
        else {
            termsPayload = that.payloadCommandService.getCommandDetails(params.commandName, params.category);
            return that.baseConnectionService.sendRequest(termsPayload, actionParam)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (response) {
                if (response.terminologies) {
                    var rTerms = response.terminologies;
                    return rTerms;
                }
            }));
        }
    };
    /**
     * Resolves value
     *
     * It returns the value from Terms.
     * e.g. Pass the 'ProductName' as input for the resolveValue method.
     * It search the information in terms and return the value like 'IQVIA StudyOptimizer'
     * _commonTerms.term - Terms data.
     *
     * @param str
     * @returns
     */
    BaseTermsService.prototype.resolveValue = function (str) {
        if (!str) {
            return;
        }
        var terms = this._commonTerms.term;
        str = str.toString().replace(/!(.*?)!/g, function (match, token) {
            var term = terms.find(function (x) {
                return x.name === token;
            });
            return term ? term.value : match;
        });
        return str;
    };
    /**
     * Gets term
     * @param termParam
     * @param [actionParam]
     * @returns term
     * get the term information.
     */
    BaseTermsService.prototype.getTerm = function (termParam, actionParam) {
        if (!termParam) {
            throw Error("term param can not be empty or undefined in base term servie");
        }
        if (!this.typeCheck(termParam)) {
            throw Error("Invalid params object");
        }
        var that = this;
        actionParam = !actionParam ? {} : actionParam;
        actionParam.storeType = _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_6__["StoreType"].Session;
        actionParam.cacheType = _utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_5__["CacheType"].sticky;
        actionParam.encryption = _utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_3__["EncryptionAction"].encrypt;
        actionParam.cmdName = ''; // reset cmd name
        actionParam.xmlRequest = '';
        actionParam.cacheKey = _utils_cache_key_enum__WEBPACK_IMPORTED_MODULE_4__["CacheKey"].TermKey;
        if (actionParam.endPoint) {
            actionParam.url = _models_api_end_points_enum__WEBPACK_IMPORTED_MODULE_9__["APIEndPoints"].BASE_TERMS;
        }
        var termsPayload;
        if (actionParam.endPoint) {
            termsPayload = this.payloadCommandService.getApiRequest(termParam.commandName, termParam.category);
            return that.baseConnectionService.send(termsPayload, actionParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (data) {
                var result = null;
                if (data.terminologies && data.terminologies.term) {
                    that._commonTerms = [];
                    Object.assign(that._commonTerms, data.terminologies);
                    result = data.terminologies;
                }
                return result;
            }));
        }
        else {
            termsPayload = this.payloadCommandService.getCommandDetails(termParam.commandName, termParam.category);
            return that.baseConnectionService.sendRequest(termsPayload, actionParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (data) {
                var result = null;
                if (data.terminologies && data.terminologies.term) {
                    that._commonTerms = [];
                    Object.assign(that._commonTerms, data.terminologies);
                    result = data.terminologies;
                }
                return result;
            }));
        }
    };
    /**
     * Sets property base list
     * Creating appPropertyList map for application properties to avoid loop
     */
    BaseTermsService.prototype.setPropertyBaseList = function () {
        if (!this.appResources) {
            return;
        }
        var iLen = this.appResources.term.length;
        for (var i = 0; i < iLen; i++) {
            this.appPropertyList[this.appResources.term[i].name] = this.appResources.term[i].value;
        }
    };
    BaseTermsService.prototype.typeCheck = function (obj) {
        return (obj.category !== undefined && obj.commandName !== undefined);
    };
    BaseTermsService.ctorParameters = function () { return [
        { type: _base_connection_service__WEBPACK_IMPORTED_MODULE_7__["BaseConnectionService"] },
        { type: _payload_command_service__WEBPACK_IMPORTED_MODULE_8__["PayloadCommandService"] }
    ]; };
    BaseTermsService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_base_connection_service__WEBPACK_IMPORTED_MODULE_7__["BaseConnectionService"],
            _payload_command_service__WEBPACK_IMPORTED_MODULE_8__["PayloadCommandService"]])
    ], BaseTermsService);
    return BaseTermsService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/cache/cache-store-manager.service.ts":
/*!*******************************************************************************!*\
  !*** ../common-library/src/lib/services/cache/cache-store-manager.service.ts ***!
  \*******************************************************************************/
/*! exports provided: CacheStoreManagerService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CacheStoreManagerService", function() { return CacheStoreManagerService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _models_cache_cache_factory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./../../models/cache/cache.factory */ "../common-library/src/lib/models/cache/cache.factory.ts");
/* harmony import */ var _services_configuration_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../../services/configuration.service */ "../common-library/src/lib/services/configuration.service.ts");
/* harmony import */ var _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../../utils/cache/store-type.enum */ "../common-library/src/lib/utils/cache/store-type.enum.ts");
/* harmony import */ var _encryption_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./encryption.service */ "../common-library/src/lib/services/cache/encryption.service.ts");
/* harmony import */ var _in_memory_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./in-memory.service */ "../common-library/src/lib/services/cache/in-memory.service.ts");







var CacheStoreManagerService = /** @class */ (function () {
    /**
     * Creates an instance of cache store manager service.
     * @param encryptionService
     * @param config
     * @param inMemory
     */
    function CacheStoreManagerService(encryptionService, config, inMemory) {
        this.encryptionService = encryptionService;
        this.config = config;
        this.inMemory = inMemory;
        this.factory = null;
        this.factory = new _models_cache_cache_factory__WEBPACK_IMPORTED_MODULE_2__["CacheFactory"]();
    }
    /**
     * Gets cache store manager service
     *
     * This method will call the get method of cache classes (session, inmemory etc.)
     * @param key
     * @param [callback]
     * @returns
     */
    CacheStoreManagerService.prototype.get = function (key, callback) {
        return this.cachingStore.get(key, callback);
    };
    /**
     * Sets cache store manager service
     *
     * This method will set the value on cache classes (session, inmemory etc.)
     * @param key
     * @param value
     */
    CacheStoreManagerService.prototype.set = function (key, value) {
        this.cachingStore.set(key, value);
    };
    /**
     * Removes cache store manager service
     *
     * This method will remove the key and value from cache (session, inmemory etc.)
     * @param [key]
     */
    CacheStoreManagerService.prototype.remove = function (key) {
        this.cachingStore.remove(key);
    };
    /**
     * Calls cache store manager service
     * @param [callback]
     * @returns
     */
    CacheStoreManagerService.prototype.call = function (callback) {
        return this.cachingStore.call(callback);
    };
    /**
     * Keys exist
     *
     * It will check the key exist in cache.
     *
     * @param [key]
     * @returns
     */
    CacheStoreManagerService.prototype.keyExist = function (key) {
        return this.cachingStore.keyExist(key);
    };
    /**
     * Sets caching store
     *
     * This method will call the factory method and set the instance
     * of cache classes (session, localstorage etc) in
     * cachingStore variable.
     * If the storeType is in memory then the factory method will return the
     * singleton instance of inMemoryService to cachingStore variable.
     * Set the caching age.
     * If the storeType is not in memory then the cachingStore will call the setEncryption mehtod
     * to set the encryption.
     * @param storeType
     * @param [encryptionAction]
     * @param [age]
     */
    CacheStoreManagerService.prototype.setCachingStore = function (storeType, encryptionAction, age) {
        this.cachingStore = this.factory.createStore(storeType, this.encryptionService, this.config, this.inMemory);
        this.cachingStore.setCacheAge(age);
        if (storeType !== _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_4__["StoreType"].InMemory) {
            this.cachingStore.setEncryption(encryptionAction);
        }
    };
    CacheStoreManagerService.ctorParameters = function () { return [
        { type: _encryption_service__WEBPACK_IMPORTED_MODULE_5__["EncryptionService"] },
        { type: _services_configuration_service__WEBPACK_IMPORTED_MODULE_3__["ConfigurationService"] },
        { type: _in_memory_service__WEBPACK_IMPORTED_MODULE_6__["InMemoryService"] }
    ]; };
    CacheStoreManagerService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_encryption_service__WEBPACK_IMPORTED_MODULE_5__["EncryptionService"],
            _services_configuration_service__WEBPACK_IMPORTED_MODULE_3__["ConfigurationService"],
            _in_memory_service__WEBPACK_IMPORTED_MODULE_6__["InMemoryService"]])
    ], CacheStoreManagerService);
    return CacheStoreManagerService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/cache/encryption.service.ts":
/*!**********************************************************************!*\
  !*** ../common-library/src/lib/services/cache/encryption.service.ts ***!
  \**********************************************************************/
/*! exports provided: EncryptionService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EncryptionService", function() { return EncryptionService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");


var EncryptionService = /** @class */ (function () {
    function EncryptionService() {
    }
    /**
     * Sets encryption
     * @param encryption
     */
    EncryptionService.prototype.setEncryption = function (encryption) {
        this.encryption = encryption;
    };
    /**
     * Sets key
     * @param key
     */
    EncryptionService.prototype.setKey = function (key) {
        this.key = key;
    };
    /**
     * Encrypts encryption service
     * @param obj
     * @param [key]
     * @returns encrypt
     */
    EncryptionService.prototype.encrypt = function (obj, key) {
        if (key === void 0) { key = this.key; }
        var ret = null;
        if (this.encryption !== undefined && key !== undefined) {
            ret = this.encryption.encrypt(obj, key);
        }
        else {
            throw new Error('Encryption object or key not set');
        }
        return ret;
    };
    /**
     * Decrypts encryption service
     * @param text
     * @param [key]
     * @returns decrypt
     */
    EncryptionService.prototype.decrypt = function (text, key) {
        if (key === void 0) { key = this.key; }
        var ret = null;
        if (this.encryption !== undefined && key !== undefined) {
            ret = this.encryption.decrypt(text, key);
        }
        else {
            throw new Error('Encryption object or key not set');
        }
        return ret;
    };
    EncryptionService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], EncryptionService);
    return EncryptionService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/cache/in-memory.service.ts":
/*!*********************************************************************!*\
  !*** ../common-library/src/lib/services/cache/in-memory.service.ts ***!
  \*********************************************************************/
/*! exports provided: InMemoryService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "InMemoryService", function() { return InMemoryService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _configuration_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../configuration.service */ "../common-library/src/lib/services/configuration.service.ts");





var InMemoryService = /** @class */ (function () {
    /**
     * Creates an instance of in memory service.
     * @param config
     */
    function InMemoryService(config) {
        this.config = config;
        this.cache = new Map();
        this.inFlightObservables = new Map();
        this.maxAge = config.cacheMaxAge;
    }
    /**
     * Gets in memory service
     *
     * This method will check if cache key is available in cache
     * then it will return the value in observable form.
     * If key not present in cache then execute the this.post method
     * after the successful exection of  this.post observable method (which return the observable)
     * set the key and value in cache
     *
     * @param key
     * @param [callback]
     * @returns get
     */
    InMemoryService.prototype.get = function (key, callback) {
        var _this = this;
        if (this.hasValidCachedValue(key)) {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(this.cache.get(key).value);
        }
        /*
        if (this.inFlightObservables.has(key)) {
          return this.inFlightObservables.get(key);
        } else if (callback && callback instanceof Observable) {
          this.inFlightObservables.set(key, new Subject());
          console.log(`%c Calling api in memory for ${key}`, 'color: purple');
          return callback.pipe(tap((value) => { this.set(key, value); }));
        } else {
          return throwError('Requested key is not available in Cache');
        }
       */
        if (callback && callback instanceof rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"]) {
            console.log("%c Calling api for " + key, 'color: purple');
            return callback.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (value) {
                _this.set(key, value);
            }));
        }
        else {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["throwError"])('Requested key is not available in Cache');
        }
    };
    /**
     * Sets in memory service
     * @param key
     * @param value
     */
    InMemoryService.prototype.set = function (key, value) {
        // this.cache.set(key, { value: value, expiry: Date.now() + this.maxAge });
        this.cache.set(key, { value: value, expiry: 0 });
        // this.notifyInFlightObservers(key, value);
        /**Testing */
        console.log("%c In Memory data", "color: green");
        console.log(this.cache);
    };
    /**
     * Has in memory service
     * @param key
     * @returns true if has
     */
    InMemoryService.prototype.has = function (key) {
        return this.cache.has(key);
    };
    /**
     * Calls in memory service
     * @param [fallback]
     * @returns call
     */
    InMemoryService.prototype.call = function (fallback) {
        if (fallback && fallback instanceof rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"]) {
            return fallback.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (value) { return value; }));
        }
    };
    /**
     * Determines whether valid cached value has
     * @param key
     * @returns true if valid cached value
     */
    InMemoryService.prototype.hasValidCachedValue = function (key) {
        /*
        if (this.cache.has(key)) {
          if (this.cache.get(key).expiry < Date.now()) {
            this.cache.delete(key);
            return false;
          }
          return true;
        } else {
          return false;
        }*/
        var returnVal = false;
        if (this.cache.get(key)) {
            returnVal = true;
        }
        else {
            returnVal = false;
        }
        return returnVal;
    };
    /**
     * Notifys in flight observers
     * @param key
     * @param value
     */
    InMemoryService.prototype.notifyInFlightObservers = function (key, value) {
        if (this.inFlightObservables.has(key)) {
            var inFlight = this.inFlightObservables.get(key);
            var observersCount = inFlight.observers.length;
            if (observersCount) {
                console.log("%cNotifying " + inFlight.observers.length + " flight subscribers for " + key, 'color: Swap');
                inFlight.next(value);
            }
            inFlight.complete();
            this.inFlightObservables.delete(key);
        }
    };
    /**
     * Removes in memory service
     * @param key
     */
    InMemoryService.prototype.remove = function (key) {
        var _this = this;
        //  this.cache.clear();
        //  this.inFlightObservables.clear();
        if (this.cache.has(key)) {
            this.cache.delete(key);
        }
        else {
            this.cache.forEach(function (value, actualKey) {
                if (actualKey.search(key)) {
                    _this.cache.delete(actualKey);
                }
            });
        }
        console.log("%c In memory remove key " + key, "color:purple");
        console.log("%c Current In Memory data", "color: green");
        console.log(this.cache);
    };
    /**
     * Sets cache age
     * @param [age]
     */
    InMemoryService.prototype.setCacheAge = function (age) {
        if (age === void 0) { age = 0; }
        this.maxAge = age;
    };
    InMemoryService.ctorParameters = function () { return [
        { type: _configuration_service__WEBPACK_IMPORTED_MODULE_4__["ConfigurationService"] }
    ]; };
    InMemoryService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_configuration_service__WEBPACK_IMPORTED_MODULE_4__["ConfigurationService"]])
    ], InMemoryService);
    return InMemoryService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/configuration.service.ts":
/*!*******************************************************************!*\
  !*** ../common-library/src/lib/services/configuration.service.ts ***!
  \*******************************************************************/
/*! exports provided: ConfigurationService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ConfigurationService", function() { return ConfigurationService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _cache_encryption_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cache/encryption.service */ "../common-library/src/lib/services/cache/encryption.service.ts");



var ConfigurationService = /** @class */ (function () {
    /**
     * Creates an instance of configuration service.
     * @param encryptionService
     */
    function ConfigurationService(encryptionService) {
        this.encryptionService = encryptionService;
    }
    Object.defineProperty(ConfigurationService.prototype, "encryptKey", {
        /**
         * Gets encrypt key
         */
        get: function () {
            return this.encryptionKey;
        },
        /**
         * Sets encrypt key
         */
        set: function (v) {
            this.encryptionKey = v;
            this.encryptionService.setKey(this.encryptionKey);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "cacheMaxAge", {
        /**
         * Gets cache max age
         */
        get: function () {
            return this.cacheAge;
        },
        /**
         * Sets cache max age
         */
        set: function (v) {
            this.cacheAge = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "encryptType", {
        /**
         * Gets encrypt type
         */
        get: function () {
            return this.encryptionType;
        },
        /**
         * Sets encrypt type
         */
        set: function (v) {
            this.encryptionType = v;
            this.encryptionService.setEncryption(this.encryptionType);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "dispatchUrl", {
        /**
         * Gets dispatch url
         */
        get: function () {
            return this.dispatchedUrl;
        },
        /**
         * Sets dispatch url
         */
        set: function (v) {
            this.dispatchedUrl = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "appUrl", {
        /**
         * Gets app url
         */
        get: function () {
            return this.applicationUrl;
        },
        /**
         * Sets app url
         */
        set: function (v) {
            this.applicationUrl = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "$loginUrl", {
        /**
           * Getter $loginUrl
           * @return string
           */
        get: function () {
            return this.loginUrl;
        },
        /**
         * Setter $loginUrl
         * @param string value
         */
        set: function (value) {
            this.loginUrl = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "authUrl", {
        /**
         * Gets app url
         */
        get: function () {
            return this._authUrl;
        },
        /**
         * Sets app url
         */
        set: function (v) {
            this._authUrl = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ConfigurationService.prototype, "soApiUrl", {
        /**
         * Gets app url
         */
        get: function () {
            return this._soApiUrl;
        },
        /**
         * Sets app url
         */
        set: function (v) {
            this._soApiUrl = v;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Sets config
     *
     * Set the application configuration
     * encryptionKey
     * cacheAge
     * encryptionType
     * applicationUrl
     * @param environment
     */
    ConfigurationService.prototype.setConfig = function (environment) {
        if (environment) {
            if (!this.typeCheck(environment)) {
                throw new Error("Invalid environment object");
            }
            this.encryptKey = environment.clientEncryptionKey;
            this.cacheMaxAge = environment.cacheAge;
            this.encryptType = environment.cryptoJS;
            this.appUrl = environment.app_url;
            this.$loginUrl = environment.login_url;
            this.authUrl = environment.authUrl;
            this.soApiUrl = environment.soApiUrl;
        }
        else {
            throw new Error("Environment object is empty");
        }
    };
    ConfigurationService.prototype.typeCheck = function (obj) {
        return (obj.clientEncryptionKey !== undefined && obj.cacheAge !== undefined
            && obj.cryptoJS !== undefined && obj.app_url !== undefined && obj.login_url !== undefined);
    };
    ConfigurationService.ctorParameters = function () { return [
        { type: _cache_encryption_service__WEBPACK_IMPORTED_MODULE_2__["EncryptionService"] }
    ]; };
    ConfigurationService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_cache_encryption_service__WEBPACK_IMPORTED_MODULE_2__["EncryptionService"]])
    ], ConfigurationService);
    return ConfigurationService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/data.service.ts":
/*!**********************************************************!*\
  !*** ../common-library/src/lib/services/data.service.ts ***!
  \**********************************************************/
/*! exports provided: DataService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DataService", function() { return DataService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "../../node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _utils_service_constant__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../utils/service-constant */ "../common-library/src/lib/utils/service-constant.ts");
/* harmony import */ var _models_http_verbs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/http-verbs */ "../common-library/src/lib/models/http-verbs.ts");
/* harmony import */ var _configuration_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./configuration.service */ "../common-library/src/lib/services/configuration.service.ts");
/* harmony import */ var _rest_api_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./rest-api.service */ "../common-library/src/lib/services/rest-api.service.ts");









var DataService = /** @class */ (function (_super) {
    tslib__WEBPACK_IMPORTED_MODULE_0__["__extends"](DataService, _super);
    /**
     * Creates an instance of data service.
     * @param httpClient
     */
    function DataService(httpClient, configService) {
        var _this = _super.call(this, httpClient) || this;
        _this.httpClient = httpClient;
        _this.configService = configService;
        return _this;
    }
    /**
     * Posts data service
     * It call the server api using httpClient
     * @param payload
     * @returns Data
     */
    DataService.prototype.postData = function (payload, redirectUrl) {
        if (redirectUrl === void 0) { redirectUrl = _utils_service_constant__WEBPACK_IMPORTED_MODULE_5__["DISPATCH_URL"]; }
        var headers = new _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpHeaders"]({ 'Content-Type': 'application/x-www-form-urlencoded' });
        return this.httpClient.post(redirectUrl, 'payload=' + encodeURIComponent(payload) + '&output=json', { headers: headers, withCredentials: true }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["catchError"])(this.handleError('post', [])));
    };
    /**
     * Handles error
     * @param [operation]
     * @param [result]
     * @returns
     */
    DataService.prototype.handleError = function (operation, result) {
        if (operation === void 0) { operation = 'operation'; }
        return function (error) {
            // TODO: send the error to remote logging infrastructure
            console.error(error); // log to console instead
            // TODO: better job of transforming error for user consumption
            console.log(operation + " failed: " + error.message);
            // Let the app keep running by returning an empty result.
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_3__["of"])(result);
        };
    };
    /**
     *
     * It call the dataService.postData method which return the data in form of observable
     * @param cmdName
     * @param [xmlRequest]
     * @param [reportError]
     * @returns of(data)
     */
    DataService.prototype.post = function (cmdName, xmlRequest, reportError, redirectUrl) {
        if (reportError === void 0) { reportError = true; }
        if (!cmdName) {
            throw new Error("Command name can not be empty");
        }
        return this.postData(xmlRequest, redirectUrl).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (data) {
            if (!data.serviceResponse) {
                console.log('Could not find serviceResponse object.' +
                    'Trying to parse response as XML string for xml request :: XMLRequest: %s', xmlRequest);
                var xmlParsed = false, errStr = '';
                try {
                    var dom = (new DOMParser()).parseFromString(data, 'text/xml');
                    data = JSON.parse(window.xml2json(dom, '', ''));
                    xmlParsed = true;
                    console.log('Parse XML String', data);
                }
                catch (error) {
                    console.error('Response XML data parsing error ', error);
                    errStr = 'Failed to parse response data!' + error;
                    throw Error("Failed to parse response data!");
                }
                if (!xmlParsed) {
                    console.log(errStr);
                    return errStr;
                }
            }
            //
            if (data.serviceResponse.result === _utils_service_constant__WEBPACK_IMPORTED_MODULE_5__["COMMON"].RESULT_OK || !data.serviceResponse.result) {
                // TODO:: Implement add to cache mechanism here
            }
            else if (data.serviceResponse.result.toUpperCase() === _utils_service_constant__WEBPACK_IMPORTED_MODULE_5__["COMMON"].RESULT_ERROR) {
                if (reportError) {
                    var error = {
                        desc: data.serviceResponse.error.errorCode + ' : ' + data.serviceResponse.error.message,
                        text: '----------------------------------------------' +
                            '--------------------------\nError Stack for command **' + cmdName + '**\n------' +
                            '------------------------------------------------------------------\n' + data.serviceResponse.error.stack
                    };
                    error = Object.assign({}, error, data.serviceResponse.error);
                    console.error('BaseConnection -> error', data.serviceResponse);
                    // TODO:: Implement raising exception or error here
                }
            }
            else {
                console.error('BaseConnection -> error2', data.serviceResponse);
            }
            return data.serviceResponse;
        }));
    };
    /**
    *This method is used to give an http get call
    *
    * @param url
    * @param headers
    * @returns Observable<any>
    * @memberof DataService
    */
    DataService.prototype.get = function (url, headers) {
        return this.httpClient.get(url, headers);
    };
    /**
     * Rest Api End point Integration
     */
    /**
     *
     * It call the dataService.postData method which return the data in form of observable
     * @param cmdName
     * @param [payload]
     * @param [reportError]
     * @returns of(data)
     */
    DataService.prototype.sendData = function (cmdName, payload, baseParam, reportError) {
        if (reportError === void 0) { reportError = true; }
        if (!cmdName) {
            throw new Error("Command name can not be empty");
        }
        return this.sendRequestToServer(payload, baseParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_4__["map"])(function (data) {
            console.log(data);
            if (!data.serviceResponse) {
                var error = {
                    status: 200,
                    message: 'No content found or No records found'
                };
                console.error(error.message);
                throw error;
            }
            if (data.serviceResponse.result === _utils_service_constant__WEBPACK_IMPORTED_MODULE_5__["COMMON"].RESULT_OK || !data.serviceResponse.result) {
                // TODO:: Implement add to cache mechanism here
            }
            else if (data.serviceResponse.result.toUpperCase() === _utils_service_constant__WEBPACK_IMPORTED_MODULE_5__["COMMON"].RESULT_ERROR) {
                if (reportError) {
                    var error = {
                        desc: data.serviceResponse.error.errorCode + ' : ' + data.serviceResponse.error.message,
                        text: '----------------------------------------------' +
                            '--------------------------\nError Stack for command **' + cmdName + '**\n------' +
                            '------------------------------------------------------------------\n' + data.serviceResponse.error.stack
                    };
                    error = Object.assign({}, error, data.serviceResponse.error);
                    console.error('BaseConnection -> error', data.serviceResponse);
                    // TODO:: Implement raising exception or error here
                }
            }
            else {
                console.error('BaseConnection -> error2', data.serviceResponse);
            }
            return data.serviceResponse;
        }));
    };
    DataService.prototype.getHttpOptions = function (payload, baseParam) {
        var httpOptions = { headers: payload.headers, params: payload.queryParams, withCredentials: false };
        if (!baseParam.prelogin) {
            httpOptions = tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, httpOptions, { withCredentials: true });
        }
        return httpOptions;
    };
    DataService.prototype.getEndPointUrl = function (baseParam) {
        var endPointUrl = '';
        if (baseParam.isSSOEndPoint) {
            endPointUrl = this.configService.authUrl;
        }
        else {
            endPointUrl = this.configService.soApiUrl;
        }
        return endPointUrl;
    };
    DataService.prototype.sendRequestToServer = function (payload, baseParam) {
        if (!baseParam.httpMethod) {
            baseParam.httpMethod = _models_http_verbs__WEBPACK_IMPORTED_MODULE_6__["HttpVerbs"].get;
        }
        if (!baseParam.url) {
            throw new Error('Rest end point url can not be empty, please set Action Url.');
        }
        var httpOptions = this.getHttpOptions(payload, baseParam);
        var endPointUrl = this.getEndPointUrl(baseParam);
        if (!endPointUrl) {
            throw new Error('Rest end point url can not be empty.');
        }
        switch (baseParam.httpMethod) {
            case _models_http_verbs__WEBPACK_IMPORTED_MODULE_6__["HttpVerbs"].get:
                return this.getMethod(endPointUrl, baseParam, httpOptions); // will rename - affects on app1
            case _models_http_verbs__WEBPACK_IMPORTED_MODULE_6__["HttpVerbs"].post:
                return this.postMethod(endPointUrl, baseParam, httpOptions, payload.jsonRequest); // will rename - affects on app1
            case _models_http_verbs__WEBPACK_IMPORTED_MODULE_6__["HttpVerbs"].put:
                return this.put(endPointUrl, baseParam, httpOptions, payload.jsonRequest);
            case _models_http_verbs__WEBPACK_IMPORTED_MODULE_6__["HttpVerbs"].delete:
                return this.delete(endPointUrl, baseParam, httpOptions, payload.id);
            default:
                // return of([]);
                throw new Error('Http method not found!');
        }
    };
    DataService.ctorParameters = function () { return [
        { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"] },
        { type: _configuration_service__WEBPACK_IMPORTED_MODULE_7__["ConfigurationService"] }
    ]; };
    DataService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpClient"],
            _configuration_service__WEBPACK_IMPORTED_MODULE_7__["ConfigurationService"]])
    ], DataService);
    return DataService;
}(_rest_api_service__WEBPACK_IMPORTED_MODULE_8__["RestApiService"]));



/***/ }),

/***/ "../common-library/src/lib/services/dependency-manager.service.ts":
/*!************************************************************************!*\
  !*** ../common-library/src/lib/services/dependency-manager.service.ts ***!
  \************************************************************************/
/*! exports provided: DependencyManagerService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DependencyManagerService", function() { return DependencyManagerService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/cache/cache-type.enum */ "../common-library/src/lib/utils/cache/cache-type.enum.ts");
/* harmony import */ var _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/cache/store-type.enum */ "../common-library/src/lib/utils/cache/store-type.enum.ts");
/* harmony import */ var _cache_cache_store_manager_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cache/cache-store-manager.service */ "../common-library/src/lib/services/cache/cache-store-manager.service.ts");
/* harmony import */ var _data_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./data.service */ "../common-library/src/lib/services/data.service.ts");







// const dependencyList: any = <any>require('../assets/data/getDependencyList.json');
var DependencyManagerService = /** @class */ (function () {
    /**
     * Creates an instance of dependency manager service.
     * @param cacheStoreManagerService
     * @param dataService
     */
    function DependencyManagerService(cacheStoreManagerService, dataService) {
        this.cacheStoreManagerService = cacheStoreManagerService;
        this.dataService = dataService;
    }
    /**
     * Gets dependency manager service
     *
     * Check the cacheKey in action parameter
     * if it is undefined then call the post method. On success of the call, clear if any dependencies specified.
     * If it is not null or defined then check cacheType, if cacheType is non sticky then
     * set the storeType is in-memory. If no storeType information pass in parameter
     * then the default value of storeType is in-memory.
     * If no encryption information pass in parameter then the default value of encryption is false.
     * Set the reference of cache classes (session, in-memory etc) by calling the cacheStoreManagerService.SetCachingStore() function.
     * Call the cacheStoreManager get method, It will check if cache key available in cache
     * then it will return the value in observable form. If not then
     * execute the this.post method and set the response in cache and return the value in observable form
     * if there are dependency list then purge the dependency list means remove the key from cache.
     * @param baseParam
     * @returns get
     */
    DependencyManagerService.prototype.get = function (baseParam) {
        var _this = this;
        if (!baseParam.cacheKey) {
            return this.dataService.post(baseParam.cmdName, baseParam.xmlRequest, baseParam.reportError, baseParam.url)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["tap"])(function () {
                _this.cacheStoreManagerService.setCachingStore(baseParam.storeType);
                _this.clearDependencies(baseParam.dependencyList);
            }));
        }
        else {
            baseParam.storeType = (baseParam.cacheType === _utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_3__["CacheType"].nonsticky) ? _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_4__["StoreType"].InMemory : baseParam.storeType;
            this.cacheStoreManagerService.setCachingStore(baseParam.storeType, baseParam.encryption);
            if (baseParam.isSelf === true) {
                this.clearDependencies(baseParam.dependencyList);
            }
            return this.cacheStoreManagerService.get(baseParam.cacheKey, this.dataService.post(baseParam.cmdName, baseParam.xmlRequest, baseParam.reportError, baseParam.url))
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["tap"])(function () {
                if (baseParam.isSelf === false) {
                    _this.clearDependencies(baseParam.dependencyList);
                }
            }));
        }
    };
    /**
     * Gets dependency manager service
     *
     * Check the cacheKey in action parameter
     * if it is undefined then call the post method. On success of the call, clear if any dependencies specified.
     * If it is not null or defined then check cacheType, if cacheType is non sticky then
     * set the storeType is in-memory. If no storeType information pass in parameter
     * then the default value of storeType is in-memory.
     * If no encryption information pass in parameter then the default value of encryption is false.
     * Set the reference of cache classes (session, in-memory etc) by calling the cacheStoreManagerService.SetCachingStore() function.
     * Call the cacheStoreManager get method, It will check if cache key available in cache
     * then it will return the value in observable form. If not then
     * execute the this.post method and set the response in cache and return the value in observable form
     * if there are dependency list then purge the dependency list means remove the key from cache.
     * @param baseParam
     * @returns get
     */
    DependencyManagerService.prototype.setDependencies = function (payload, baseParam) {
        var _this = this;
        if (!baseParam.cacheKey) {
            return this.dataService.sendData(baseParam.cmdName, payload, baseParam, baseParam.reportError)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["tap"])(function () {
                _this.cacheStoreManagerService.setCachingStore(baseParam.storeType);
                _this.clearDependencies(baseParam.dependencyList);
            }));
        }
        else {
            baseParam.storeType = (baseParam.cacheType === _utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_3__["CacheType"].nonsticky) ? _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_4__["StoreType"].InMemory : baseParam.storeType;
            this.cacheStoreManagerService.setCachingStore(baseParam.storeType, baseParam.encryption);
            if (baseParam.isSelf === true) {
                this.clearDependencies(baseParam.dependencyList);
            }
            return this.cacheStoreManagerService.get(baseParam.cacheKey, this.dataService.sendData(baseParam.cmdName, payload, baseParam, baseParam.reportError))
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["tap"])(function () {
                if (baseParam.isSelf === false) {
                    _this.clearDependencies(baseParam.dependencyList);
                }
            }));
        }
    };
    DependencyManagerService.prototype.clearDependencies = function (dependencies) {
        var _this = this;
        if (dependencies && dependencies.length > 0) {
            dependencies.map(function (key) {
                _this.cacheStoreManagerService.remove(key);
            });
        }
    };
    DependencyManagerService.ctorParameters = function () { return [
        { type: _cache_cache_store_manager_service__WEBPACK_IMPORTED_MODULE_5__["CacheStoreManagerService"] },
        { type: _data_service__WEBPACK_IMPORTED_MODULE_6__["DataService"] }
    ]; };
    DependencyManagerService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_cache_cache_store_manager_service__WEBPACK_IMPORTED_MODULE_5__["CacheStoreManagerService"],
            _data_service__WEBPACK_IMPORTED_MODULE_6__["DataService"]])
    ], DependencyManagerService);
    return DependencyManagerService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/dialog.service.ts":
/*!************************************************************!*\
  !*** ../common-library/src/lib/services/dialog.service.ts ***!
  \************************************************************/
/*! exports provided: DialogService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DialogService", function() { return DialogService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/material */ "../../node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _utils_service_constant__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/service-constant */ "../common-library/src/lib/utils/service-constant.ts");
/* harmony import */ var _locale_app_resources_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./locale-app-resources.service */ "../common-library/src/lib/services/locale-app-resources.service.ts");
/* harmony import */ var _components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/confirmation-dialog/confirmation-dialog.component */ "../common-library/src/lib/components/confirmation-dialog/confirmation-dialog.component.ts");







var DialogService = /** @class */ (function () {
    function DialogService(localeAppResourcesService, dialog) {
        this.localeAppResourcesService = localeAppResourcesService;
        this.dialog = dialog;
    }
    Object.defineProperty(DialogService.prototype, "isStatusChanged", {
        get: function () {
            return (this._isStatusChanged === undefined ? false : this._isStatusChanged);
        },
        set: function (v) {
            this._isStatusChanged = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DialogService.prototype, "selectedStudyKey", {
        get: function () {
            return this._selectedStudyKey;
        },
        set: function (v) {
            this._selectedStudyKey = v;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DialogService.prototype, "isProceed", {
        get: function () {
            return this._isProceed;
        },
        set: function (v) {
            this._isProceed = v;
        },
        enumerable: true,
        configurable: true
    });
    DialogService.prototype.confirm = function () {
        var _this = this;
        var confirmation = false;
        var dialogRef = this.showUnsavedDataConfirmation();
        return dialogRef.afterClosed().pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (res) {
            var eventObject = res;
            if (eventObject && eventObject.action === _this.getConfirmProp().okLabel) {
                confirmation = true;
            }
            else if (eventObject && eventObject.action === _this.getConfirmProp().cancelLabel) {
                confirmation = false;
            }
            return confirmation;
        }));
    };
    DialogService.prototype.showUnsavedDataConfirmation = function (data) {
        data = data || this.getConfirmProp();
        var dialogRef = this.dialog.open(_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_6__["ConfirmationDialogComponent"], {
            width: _utils_service_constant__WEBPACK_IMPORTED_MODULE_4__["DIALOG_CONFIG"].CONFIRM_UNSAVED_DATA.WIDTH,
            data: data,
            panelClass: _utils_service_constant__WEBPACK_IMPORTED_MODULE_4__["DIALOG_CONFIG"].DELETE_PLAN.PANEL_CLASS,
            id: 'warnDataLossOnNavDialog'
        });
        return dialogRef;
    };
    DialogService.prototype.getConfirmProp = function () {
        return {
            heading: this.localeAppResourcesService.getResource('unsavedTitle'),
            message: this.localeAppResourcesService.getResource('unsavedMessage'),
            okLabel: this.localeAppResourcesService.getResource(_utils_service_constant__WEBPACK_IMPORTED_MODULE_4__["ALERT_TYPE"].OkLabel),
            cancelLabel: this.localeAppResourcesService.getResource(_utils_service_constant__WEBPACK_IMPORTED_MODULE_4__["ALERT_TYPE"].CancelLabel)
        };
    };
    DialogService.ctorParameters = function () { return [
        { type: _locale_app_resources_service__WEBPACK_IMPORTED_MODULE_5__["LocaleAppResourcesService"] },
        { type: _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"] }
    ]; };
    DialogService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_locale_app_resources_service__WEBPACK_IMPORTED_MODULE_5__["LocaleAppResourcesService"],
            _angular_material__WEBPACK_IMPORTED_MODULE_2__["MatDialog"]])
    ], DialogService);
    return DialogService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/error-terms-store.service.ts":
/*!***********************************************************************!*\
  !*** ../common-library/src/lib/services/error-terms-store.service.ts ***!
  \***********************************************************************/
/*! exports provided: ErrorTermsStoreService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorTermsStoreService", function() { return ErrorTermsStoreService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _utils_service_constant__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils/service-constant */ "../common-library/src/lib/utils/service-constant.ts");
/* harmony import */ var _utils_string_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/string-util */ "../common-library/src/lib/utils/string-util.ts");
/* harmony import */ var _utils_AppUtil__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/AppUtil */ "../common-library/src/lib/utils/AppUtil.ts");





var ErrorTermsStoreService = /** @class */ (function () {
    /**
     * Creates an instance of error terms store service.
     */
    function ErrorTermsStoreService() {
        this.errorTerminologies = null;
        this.errorCodeBase = {};
    }
    /**
     * Creates error code base
     * @param errorTerminologies
     */
    ErrorTermsStoreService.prototype.createErrorCodeBase = function (errorTerminologies) {
        var that = this;
        that.errorTerminologies = errorTerminologies;
        var iLen = that.errorTerminologies.term.length;
        for (var i = 0; i < iLen; i++) {
            that.errorCodeBase[that.errorTerminologies.term[i].name] = that.errorTerminologies.term[i].value;
        }
    };
    /**
     * Gets error message
     * @param name
     * @returns
     */
    ErrorTermsStoreService.prototype.getErrorMessage = function (name) {
        var that = this;
        if (!isNaN(name)) {
            return that.errorCodeBase['E' + name];
        }
        else {
            return that.errorCodeBase[name];
        }
    };
    /**
   * Method to extract the error messages from error store and concat all messages into one
   * @param errors
   * @returns consolidated error message
   * @memberof ErrorTermsStoreService
   */
    ErrorTermsStoreService.prototype.consolidateValidationErrors = function (errors, fsiDate, fssDate) {
        var _this = this;
        var errorMessage = '';
        if (errors) {
            // tslint:disable-next-line:prefer-const
            var errorMessages_1 = [];
            Object.keys(errors).forEach(function (errorCode) {
                // tslint:disable-next-line:no-shadowed-variable
                var errorMessage = _this.getErrorMessage(errorCode);
                if (!errorMessage) {
                    if (errorCode === _utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].MAX.error) {
                        errorMessage =
                            _this.getErrorMessage(_utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].MAX.message) +
                                ' ' +
                                errors.max.max + '.';
                    }
                    else if (errorCode === _utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].MIN.error) {
                        errorMessage =
                            _this.getErrorMessage(_utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].MIN.message) +
                                ' ' +
                                errors.min.min + '.';
                    }
                    else if (errorCode === _utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].MAT_DATEPICKER_PARSE.error) {
                        errorMessage = _this.getErrorMessage(_utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].MAT_DATEPICKER_PARSE.message);
                    }
                    else if (errorCode === _utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].DAYS_TO_SI_AFTER_ARTB.error) {
                        errorMessage = _this.getErrorMessage(_utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].DAYS_TO_SI_AFTER_ARTB.message);
                    }
                    else if (errorCode === _utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].FSI_REQUIRED_FOR_FSS.error) {
                        errorMessage = _this.getErrorMessage(_utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].FSI_REQUIRED_FOR_FSS.message);
                    }
                    else if (errorCode === _utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].REQUIRED.error) {
                        errorMessage = _this.getErrorMessage(_utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].REQUIRED.message);
                    }
                    else if (errorCode === _utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].ARTB_LT_EQ_FSI.error) {
                        errorMessage = _utils_string_util__WEBPACK_IMPORTED_MODULE_3__["StringUtil"].interpolate(_this.getErrorMessage(_utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].ARTB_LT_EQ_FSI.message), [_utils_AppUtil__WEBPACK_IMPORTED_MODULE_4__["AppUtil"].formatDateStrict(errors.ARTB_LT_EQ_FSI.ARTB_LT_EQ_FSI)]);
                    }
                    else if (errorCode === _utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].ARTB__LT_EQ_FSS.error) {
                        errorMessage = _utils_string_util__WEBPACK_IMPORTED_MODULE_3__["StringUtil"].interpolate(_this.getErrorMessage(_utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].ARTB__LT_EQ_FSS.message), [_utils_AppUtil__WEBPACK_IMPORTED_MODULE_4__["AppUtil"].formatDateStrict(errors.ARTB__LT_EQ_FSS.ARTB__LT_EQ_FSS)]);
                    }
                    else if (errorCode === _utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].FSI_GT_TLSS.error) {
                        errorMessage = _utils_string_util__WEBPACK_IMPORTED_MODULE_3__["StringUtil"].interpolate(_this.getErrorMessage(_utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].FSI_GT_TLSS.message), [_utils_AppUtil__WEBPACK_IMPORTED_MODULE_4__["AppUtil"].formatDateStrict(errors.FSI_GT_TLSS.FSI_GT_TLSS)]);
                    }
                    else if (errorCode === _utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].FSILT_ERROR.error) {
                        errorMessage = _utils_string_util__WEBPACK_IMPORTED_MODULE_3__["StringUtil"].interpolate(_this.getErrorMessage(_utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].FSILT_ERROR.message), [_utils_AppUtil__WEBPACK_IMPORTED_MODULE_4__["AppUtil"].formatDateStrict(errors.FSILT_ERROR.FSILT_ERROR)]);
                    }
                    else if (errorCode === _utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].DEPENDENCY_ERROR.error) {
                        errorMessage = _utils_string_util__WEBPACK_IMPORTED_MODULE_3__["StringUtil"].interpolate(_this.getErrorMessage(_utils_service_constant__WEBPACK_IMPORTED_MODULE_2__["CUSTOM_ERROR_CODES"].DEPENDENCY_ERROR.message), [_utils_AppUtil__WEBPACK_IMPORTED_MODULE_4__["AppUtil"].formatDateStrict(errors.DEPENDENCY_ERROR.DEPENDENCY_ERROR)]);
                    }
                }
                errorMessages_1.push(errorMessage);
            });
            errorMessage = errorMessages_1.join('\n');
        }
        return errorMessage;
    };
    ErrorTermsStoreService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [])
    ], ErrorTermsStoreService);
    return ErrorTermsStoreService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/error-terms.service.ts":
/*!*****************************************************************!*\
  !*** ../common-library/src/lib/services/error-terms.service.ts ***!
  \*****************************************************************/
/*! exports provided: ErrorTermsService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ErrorTermsService", function() { return ErrorTermsService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/cache/encryption-action.enum */ "../common-library/src/lib/utils/cache/encryption-action.enum.ts");
/* harmony import */ var _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/cache/store-type.enum */ "../common-library/src/lib/utils/cache/store-type.enum.ts");
/* harmony import */ var _utils_cache_key_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../utils/cache-key.enum */ "../common-library/src/lib/utils/cache-key.enum.ts");
/* harmony import */ var _utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../utils/cache/cache-type.enum */ "../common-library/src/lib/utils/cache/cache-type.enum.ts");
/* harmony import */ var _utils_service_constant__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./../utils/service-constant */ "../common-library/src/lib/utils/service-constant.ts");
/* harmony import */ var _base_connection_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./base-connection.service */ "../common-library/src/lib/services/base-connection.service.ts");
/* harmony import */ var _error_terms_store_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./error-terms-store.service */ "../common-library/src/lib/services/error-terms-store.service.ts");
/* harmony import */ var _payload_command_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./payload-command.service */ "../common-library/src/lib/services/payload-command.service.ts");
/* harmony import */ var _models_api_end_points_enum__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../models/api-end-points.enum */ "../common-library/src/lib/models/api-end-points.enum.ts");













var ErrorTermsService = /** @class */ (function () {
    /**
     * Creates an instance of error terms service.
     * @param baseConnectionService
     * @param payloadCommandService
     * @param errorTermsStoreService
     */
    function ErrorTermsService(baseConnectionService, payloadCommandService, errorTermsStoreService) {
        this.baseConnectionService = baseConnectionService;
        this.payloadCommandService = payloadCommandService;
        this.errorTermsStoreService = errorTermsStoreService;
    }
    /**
     * Gets error terminologies
     * @param params
     * @param [cacheType]
     * @returns error terminologies
     */
    ErrorTermsService.prototype.getErrorTerminologies = function (params, actionParam) {
        if (!params) {
            throw new Error("params can not be empty or undefined");
        }
        if (!this.typeCheck(params)) {
            throw new Error("Invalid params object");
        }
        actionParam = !actionParam ? {} : actionParam;
        actionParam.cacheKey = _utils_cache_key_enum__WEBPACK_IMPORTED_MODULE_6__["CacheKey"].TermErrorKey;
        actionParam.cacheType = _utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_7__["CacheType"].sticky;
        actionParam.storeType = _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_5__["StoreType"].Session;
        actionParam.encryption = _utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_4__["EncryptionAction"].encrypt;
        actionParam.cmdName = ''; // reset cmd name
        actionParam.xmlRequest = '';
        var moduleInfo = {
            moduleName: 'NEWPLANTAB'
        };
        if (actionParam.endPoint) {
            actionParam.url = _models_api_end_points_enum__WEBPACK_IMPORTED_MODULE_12__["APIEndPoints"].BASE_TERMS;
        }
        var that = this;
        var errorTermsPayload;
        if (actionParam.endPoint) {
            errorTermsPayload = that.payloadCommandService.getApiRequest(params.commandName, params.categoriesError, null, moduleInfo);
            if (!that.errorTermsStoreService.errorTerminologies) {
                return that.baseConnectionService.send(errorTermsPayload, actionParam)
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
                    if (response.result === _utils_service_constant__WEBPACK_IMPORTED_MODULE_8__["COMMON"].RESULT_OK) {
                        that.errorTermsStoreService.createErrorCodeBase(response.terminologies);
                        return 'ok';
                    }
                    else {
                        return 'failed';
                    }
                }));
            }
            else {
                return rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"].create('ok');
            }
        }
        else {
            errorTermsPayload = that.payloadCommandService.getCommandDetails(params.commandName, params.categoriesError, null, null, moduleInfo);
            if (!that.errorTermsStoreService.errorTerminologies) {
                return that.baseConnectionService.sendRequest(errorTermsPayload, actionParam)
                    .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
                    if (response.result === _utils_service_constant__WEBPACK_IMPORTED_MODULE_8__["COMMON"].RESULT_OK) {
                        that.errorTermsStoreService.createErrorCodeBase(response.terminologies);
                        return 'ok';
                    }
                    else {
                        return 'failed';
                    }
                }));
            }
            else {
                return rxjs__WEBPACK_IMPORTED_MODULE_2__["Observable"].create('ok');
            }
        }
    };
    ErrorTermsService.prototype.typeCheck = function (obj) {
        return (obj.categoriesError !== undefined && obj.commandName !== undefined);
    };
    ErrorTermsService.ctorParameters = function () { return [
        { type: _base_connection_service__WEBPACK_IMPORTED_MODULE_9__["BaseConnectionService"] },
        { type: _payload_command_service__WEBPACK_IMPORTED_MODULE_11__["PayloadCommandService"] },
        { type: _error_terms_store_service__WEBPACK_IMPORTED_MODULE_10__["ErrorTermsStoreService"] }
    ]; };
    ErrorTermsService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_base_connection_service__WEBPACK_IMPORTED_MODULE_9__["BaseConnectionService"], _payload_command_service__WEBPACK_IMPORTED_MODULE_11__["PayloadCommandService"],
            _error_terms_store_service__WEBPACK_IMPORTED_MODULE_10__["ErrorTermsStoreService"]])
    ], ErrorTermsService);
    return ErrorTermsService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/help.service.ts":
/*!**********************************************************!*\
  !*** ../common-library/src/lib/services/help.service.ts ***!
  \**********************************************************/
/*! exports provided: HelpService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HelpService", function() { return HelpService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _models_appWindow__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../models/appWindow */ "../common-library/src/lib/models/appWindow.ts");
/* harmony import */ var _utils_help_constants__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/help-constants */ "../common-library/src/lib/utils/help-constants.ts");
/* harmony import */ var _utils_service_constant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../utils/service-constant */ "../common-library/src/lib/utils/service-constant.ts");
/* harmony import */ var _base_connection_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base-connection.service */ "../common-library/src/lib/services/base-connection.service.ts");
/* harmony import */ var _payload_command_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./payload-command.service */ "../common-library/src/lib/services/payload-command.service.ts");









var HelpService = /** @class */ (function () {
    function HelpService(route, payloadCommandService, baseConnectionService) {
        this.route = route;
        this.payloadCommandService = payloadCommandService;
        this.baseConnectionService = baseConnectionService;
    }
    HelpService.prototype.openHelp = function () {
        var windowObj = _models_appWindow__WEBPACK_IMPORTED_MODULE_4__["AppWindow"].getWindow();
        // let url =
        //     windowObj.location.protocol +
        //     '//' +
        //     windowObj.location.hostname +
        //     ':' +
        //     windowObj.location.port +
        //     '/';
        // if (BASE_HREF) {
        //     url += BASE_HREF + '/';
        // }
        // url += HELP_INDEX_PAGE_PATH;
        var activeRoute = this.route;
        if (activeRoute) {
            while (activeRoute.firstChild) {
                activeRoute = activeRoute.firstChild;
            }
            var activeRouteHelpId = (activeRoute.snapshot && activeRoute.snapshot.data
                && activeRoute.snapshot.data.helpId) ? activeRoute.snapshot.data.helpId : _utils_help_constants__WEBPACK_IMPORTED_MODULE_5__["DEFAULT_HELP_ID"];
            // url += HELP_MAP[activeRouteHelpId];
            // windowObj.open(url, '_blank', 'width=1100,height=500');
            var params = {
                pagecontext: activeRouteHelpId
            };
            var moduleInfo = {
                moduleName: 'NEWPLANTAB'
            };
            var hostedHelpPayload = this.payloadCommandService.getCommandDetails(_utils_help_constants__WEBPACK_IMPORTED_MODULE_5__["HOSTED_HELP_COMMAND"], params, null, null, moduleInfo);
            this.baseConnectionService.sendRequest(hostedHelpPayload, { url: _utils_help_constants__WEBPACK_IMPORTED_MODULE_5__["HOSTED_HELP_URL"] }).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (resp) {
                if (resp.result === _utils_service_constant__WEBPACK_IMPORTED_MODULE_6__["COMMON"].RESULT_OK) {
                    return resp.helpUrl;
                }
                else {
                    return null;
                }
            })).subscribe(function (helpUrl) {
                if (helpUrl) {
                    windowObj.open(helpUrl, '_blank', 'width=1100,height=500');
                }
            });
        }
    };
    HelpService.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"] },
        { type: _payload_command_service__WEBPACK_IMPORTED_MODULE_8__["PayloadCommandService"] },
        { type: _base_connection_service__WEBPACK_IMPORTED_MODULE_7__["BaseConnectionService"] }
    ]; };
    HelpService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["ActivatedRoute"],
            _payload_command_service__WEBPACK_IMPORTED_MODULE_8__["PayloadCommandService"],
            _base_connection_service__WEBPACK_IMPORTED_MODULE_7__["BaseConnectionService"]])
    ], HelpService);
    return HelpService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/locale-app-resources.service.ts":
/*!**************************************************************************!*\
  !*** ../common-library/src/lib/services/locale-app-resources.service.ts ***!
  \**************************************************************************/
/*! exports provided: LocaleAppResourcesService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LocaleAppResourcesService", function() { return LocaleAppResourcesService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../utils/cache/encryption-action.enum */ "../common-library/src/lib/utils/cache/encryption-action.enum.ts");
/* harmony import */ var _utils_cache_key_enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../utils/cache-key.enum */ "../common-library/src/lib/utils/cache-key.enum.ts");
/* harmony import */ var _utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../utils/cache/cache-type.enum */ "../common-library/src/lib/utils/cache/cache-type.enum.ts");
/* harmony import */ var _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../utils/cache/store-type.enum */ "../common-library/src/lib/utils/cache/store-type.enum.ts");
/* harmony import */ var _base_terms_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./base-terms.service */ "../common-library/src/lib/services/base-terms.service.ts");
/* harmony import */ var _models_api_end_points_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/api-end-points.enum */ "../common-library/src/lib/models/api-end-points.enum.ts");










var LocaleAppResourcesService = /** @class */ (function () {
    /**
     * Creates an instance of locale app resources service.
     * @param baseTermsService
     */
    function LocaleAppResourcesService(baseTermsService) {
        this.baseTermsService = baseTermsService;
        this.appResources = null;
        this.appPropertyList = {};
    }
    /**
     * Gets app resources
     *
     * Get the application resource information
     *
     * @param [cacheType]
     * @returns
     */
    LocaleAppResourcesService.prototype.getAppResources = function (params, actionParam) {
        actionParam = !actionParam ? {} : actionParam;
        actionParam.cacheKey = _utils_cache_key_enum__WEBPACK_IMPORTED_MODULE_5__["CacheKey"].TermApplicationKey;
        actionParam.storeType = _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_7__["StoreType"].Session;
        actionParam.cacheType = _utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_6__["CacheType"].sticky;
        actionParam.encryption = _utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_4__["EncryptionAction"].encrypt;
        actionParam.cmdName = ''; // reset cmd name
        actionParam.xmlRequest = '';
        if (actionParam.endPoint) {
            actionParam.url = _models_api_end_points_enum__WEBPACK_IMPORTED_MODULE_9__["APIEndPoints"].BASE_TERMS;
        }
        var that = this;
        if (that.appResources === null) {
            return this.baseTermsService.load(params, actionParam)
                .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
                that.appResources = response;
                that.setPropertyBaseList();
                return response;
            }));
        }
        else {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(that.appResources);
        }
    };
    /**
     * Sets property base list
     * Creating appPropertyList map for application properties to avoid loop
     */
    LocaleAppResourcesService.prototype.setPropertyBaseList = function () {
        if (!this.appResources) {
            return;
        }
        var iLen = this.appResources.term.length;
        for (var i = 0; i < iLen; i++) {
            this.appPropertyList[this.appResources.term[i].name] = this.appResources.term[i].value;
        }
    };
    /**
     * Gets resource
     * To get application property value by passing name
     *
     * @param name
     * @returns
     */
    LocaleAppResourcesService.prototype.getResource = function (name) {
        var resourcesValue = '';
        if (this.appPropertyList) {
            resourcesValue = this.baseTermsService.resolveValue(this.appPropertyList[name]);
        }
        return resourcesValue;
    };
    /**
     * Gets res
     * @param arrRes
     * @returns res
     */
    LocaleAppResourcesService.prototype.getRes = function (arrRes) {
        var obj = {};
        if (this.appResources) {
            for (var i = 0, total = this.appResources.term.length; i < total; i++) {
                for (var j = 0; j < arrRes.length; j++) {
                    if (this.appResources.term[i].name === arrRes[j]) {
                        obj['' + this.appResources.term[i].name + ''] = this.baseTermsService.resolveValue(this.appResources.term[i].value);
                    }
                }
            }
        }
        return obj;
    };
    LocaleAppResourcesService.ctorParameters = function () { return [
        { type: _base_terms_service__WEBPACK_IMPORTED_MODULE_8__["BaseTermsService"] }
    ]; };
    LocaleAppResourcesService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_base_terms_service__WEBPACK_IMPORTED_MODULE_8__["BaseTermsService"]])
    ], LocaleAppResourcesService);
    return LocaleAppResourcesService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/login-terms.service.ts":
/*!*****************************************************************!*\
  !*** ../common-library/src/lib/services/login-terms.service.ts ***!
  \*****************************************************************/
/*! exports provided: LoginTermsService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LoginTermsService", function() { return LoginTermsService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _utils_cache_key_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../utils/cache-key.enum */ "../common-library/src/lib/utils/cache-key.enum.ts");
/* harmony import */ var _utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../utils/cache/cache-type.enum */ "../common-library/src/lib/utils/cache/cache-type.enum.ts");
/* harmony import */ var _utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../utils/cache/encryption-action.enum */ "../common-library/src/lib/utils/cache/encryption-action.enum.ts");
/* harmony import */ var _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./../utils/cache/store-type.enum */ "../common-library/src/lib/utils/cache/store-type.enum.ts");
/* harmony import */ var _base_terms_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./base-terms.service */ "../common-library/src/lib/services/base-terms.service.ts");
/* harmony import */ var _models_api_end_points_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/api-end-points.enum */ "../common-library/src/lib/models/api-end-points.enum.ts");










var LoginTermsService = /** @class */ (function () {
    /**
     * Creates an instance of login terms service.
     * @param baseTermsService
     */
    function LoginTermsService(baseTermsService) {
        this.baseTermsService = baseTermsService;
        /**
         * Login terminologies of login terms service
         */
        this._loginTerminologies = null;
        this.terms = null;
    }
    /**
     * Gets login terminologies
     * @param params
     * @param [cacheType]
     * @returns login terminology information
     */
    LoginTermsService.prototype.getLoginTerminologies = function (params, actionParam) {
        if (!params) {
            throw new Error("Params can not be empty or undefined");
        }
        if (!this.typeCheck(params)) {
            throw new Error("Invalid params object");
        }
        var that = this;
        actionParam = !actionParam ? {} : actionParam;
        actionParam.cacheType = _utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_5__["CacheType"].sticky;
        actionParam.storeType = _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_7__["StoreType"].Session;
        actionParam.encryption = _utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_6__["EncryptionAction"].encrypt;
        actionParam.cacheKey = _utils_cache_key_enum__WEBPACK_IMPORTED_MODULE_4__["CacheKey"].TermLoginKey;
        actionParam.cmdName = ''; // reset cmd name
        actionParam.xmlRequest = '';
        if (actionParam.endPoint) {
            actionParam.url = _models_api_end_points_enum__WEBPACK_IMPORTED_MODULE_9__["APIEndPoints"].BASE_TERMS;
        }
        if (that._loginTerminologies === null) {
            return that.baseTermsService.load(params, actionParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function (response) {
                that._loginTerminologies = response;
                return response;
            }));
        }
        else {
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])([]);
        }
    };
    /**
     * Gets term
     * get the login term value according to input
     * e.g.
     * getTerm(LoginWelcome);
     * Ouptput
     * <font color='#333333'>Welcome to IQVIA<\/font>
     * @param name
     * @returns
     */
    LoginTermsService.prototype.getTerm = function (name) {
        var termValue = '';
        /* if (!this._loginTerminologies) {
            return termValue;
        } */
        for (var i = 0, iLen = this._loginTerminologies.term.length; i < iLen; i++) {
            if (this._loginTerminologies.term[i].name === name) {
                termValue = this.baseTermsService.resolveValue(this._loginTerminologies.term[i].value);
                break;
            }
        }
        return termValue;
    };
    LoginTermsService.prototype.typeCheck = function (obj) {
        return (obj.category !== undefined && obj.commandName !== undefined);
    };
    LoginTermsService.ctorParameters = function () { return [
        { type: _base_terms_service__WEBPACK_IMPORTED_MODULE_8__["BaseTermsService"] }
    ]; };
    LoginTermsService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_base_terms_service__WEBPACK_IMPORTED_MODULE_8__["BaseTermsService"]])
    ], LoginTermsService);
    return LoginTermsService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/logout.service.ts":
/*!************************************************************!*\
  !*** ../common-library/src/lib/services/logout.service.ts ***!
  \************************************************************/
/*! exports provided: LogoutService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LogoutService", function() { return LogoutService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _utils_service_constant__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./../utils/service-constant */ "../common-library/src/lib/utils/service-constant.ts");
/* harmony import */ var _base_connection_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./base-connection.service */ "../common-library/src/lib/services/base-connection.service.ts");
/* harmony import */ var _payload_command_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./payload-command.service */ "../common-library/src/lib/services/payload-command.service.ts");
/* harmony import */ var _models_api_end_points_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../models/api-end-points.enum */ "../common-library/src/lib/models/api-end-points.enum.ts");
/* harmony import */ var _models_http_verbs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../models/http-verbs */ "../common-library/src/lib/models/http-verbs.ts");








var LogoutService = /** @class */ (function () {
    function LogoutService(payloadCommandService, baseConnectionService) {
        this.payloadCommandService = payloadCommandService;
        this.baseConnectionService = baseConnectionService;
    }
    LogoutService.prototype.logout = function () {
        // const that = this;
        // const moduleInfo = {
        //     moduleName: 'NEWPLANTAB'
        // };
        // const logoutPayload = that.payloadCommandService.getCommandDetails(LOGOUT_PARAMS.commandName, null, null, null, moduleInfo);
        // return that.baseConnectionService.sendRequest(logoutPayload).pipe(map((resp) => {
        //     if (resp.result === COMMON.RESULT_OK) {
        //         sessionStorage.clear();
        //     }
        //     return resp;
        // }));
        var payload = this.payloadCommandService.getApiRequest(_utils_service_constant__WEBPACK_IMPORTED_MODULE_3__["LOGOUT_PARAMS"].commandName, null, null, null);
        var actionParam = {};
        actionParam.url = _models_api_end_points_enum__WEBPACK_IMPORTED_MODULE_6__["APIEndPoints"].LOGOUT; // compulsory
        actionParam.isSSOEndPoint = true;
        actionParam.httpMethod = _models_http_verbs__WEBPACK_IMPORTED_MODULE_7__["HttpVerbs"].get;
        actionParam.prelogin = false; // passing withCredential true
        return this.baseConnectionService.send(payload, actionParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (resp) {
            if (resp.result === _utils_service_constant__WEBPACK_IMPORTED_MODULE_3__["COMMON"].RESULT_OK) {
                sessionStorage.clear();
            }
            return resp;
        }));
    };
    LogoutService.ctorParameters = function () { return [
        { type: _payload_command_service__WEBPACK_IMPORTED_MODULE_5__["PayloadCommandService"] },
        { type: _base_connection_service__WEBPACK_IMPORTED_MODULE_4__["BaseConnectionService"] }
    ]; };
    LogoutService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_payload_command_service__WEBPACK_IMPORTED_MODULE_5__["PayloadCommandService"],
            _base_connection_service__WEBPACK_IMPORTED_MODULE_4__["BaseConnectionService"]])
    ], LogoutService);
    return LogoutService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/payload-command.service.ts":
/*!*********************************************************************!*\
  !*** ../common-library/src/lib/services/payload-command.service.ts ***!
  \*********************************************************************/
/*! exports provided: PayloadCommandService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PayloadCommandService", function() { return PayloadCommandService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _base_payload_command_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base-payload-command.service */ "../common-library/src/lib/services/base-payload-command.service.ts");
/* harmony import */ var _models_api_payload__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../models/api-payload */ "../common-library/src/lib/models/api-payload.ts");




var PayloadCommandService = /** @class */ (function () {
    /**
     * Creates an instance of payload command service.
     * @param basePayloadCommand
     */
    function PayloadCommandService(basePayloadCommand) {
        this.basePayloadCommand = basePayloadCommand;
    }
    /**
     * Gets command details
     * It called the basePayloadCommand.buildRequest method which returns the xmlRequest
     * @param [command]
     * @param [params]
     * @param [tags]
     * @param [commandtags]
     * @param [moduleInfo]
     * @returns xmlRequest
     */
    PayloadCommandService.prototype.getCommandDetails = function (command, params, tags, commandtags, moduleInfo) {
        if (params === void 0) { params = null; }
        if (tags === void 0) { tags = null; }
        if (commandtags === void 0) { commandtags = null; }
        if (moduleInfo === void 0) { moduleInfo = null; }
        if (!command) {
            throw new Error("Command name can not be empty");
        }
        return this.basePayloadCommand.buildRequest(command, params, tags, commandtags, moduleInfo);
    };
    /**
     * Gets command details
     * It called the basePayloadCommand.buildRequest method which returns the xmlRequest
     * @param [command]
     * @param [queryParams]
     * @param [headers]
     * @param [moduleInfo]
     * @param [req]
     */
    PayloadCommandService.prototype.getApiRequest = function (command, queryParams, headers, moduleInfo, req) {
        if (queryParams === void 0) { queryParams = null; }
        if (headers === void 0) { headers = null; }
        if (moduleInfo === void 0) { moduleInfo = null; }
        if (!command) {
            throw new Error("Command name can not be empty");
        }
        return new _models_api_payload__WEBPACK_IMPORTED_MODULE_3__["APIPayload"](command, queryParams, headers, moduleInfo, req);
    };
    PayloadCommandService.ctorParameters = function () { return [
        { type: _base_payload_command_service__WEBPACK_IMPORTED_MODULE_2__["BasePayloadCommandService"] }
    ]; };
    PayloadCommandService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_base_payload_command_service__WEBPACK_IMPORTED_MODULE_2__["BasePayloadCommandService"]])
    ], PayloadCommandService);
    return PayloadCommandService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/pce.service.ts":
/*!*********************************************************!*\
  !*** ../common-library/src/lib/services/pce.service.ts ***!
  \*********************************************************/
/*! exports provided: PCEService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PCEService", function() { return PCEService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "../../node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! xlsx */ "../../node_modules/xlsx/xlsx.js");
/* harmony import */ var xlsx__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(xlsx__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _services_locale_app_resources_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../services/locale-app-resources.service */ "../common-library/src/lib/services/locale-app-resources.service.ts");
/* harmony import */ var _utils_index_enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../utils/index.enum */ "../common-library/src/lib/utils/index.enum.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! file-saver */ "../../node_modules/file-saver/dist/FileSaver.min.js");
/* harmony import */ var file_saver__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(file_saver__WEBPACK_IMPORTED_MODULE_7__);









var PCEService = /** @class */ (function () {
    function PCEService(datePipe, localAppResource) {
        this.datePipe = datePipe;
        this.localAppResource = localAppResource;
        this.exportObj = {};
    }
    // copy
    PCEService.prototype.setDataForCopy = function (dataArray) {
        var headerData = this.jsonfyPlanCardHeaderData(this.header);
        var copyString = this.convertArrayToString(headerData, true);
        copyString += this.convertArrayToString(dataArray);
        copyString += this.appendFooter(copyString);
        this.setTextToCopy(copyString);
    };
    PCEService.prototype.jsonfyPlanCardHeaderData = function (data) {
        var result = [];
        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                result.push({
                    A: key,
                    B: data[key]
                });
            }
        }
        return result;
    };
    PCEService.prototype.planCardHeaderData = function (header) {
        if (header) {
            this.header = header;
        }
    };
    PCEService.prototype.convertArrayToString = function (data, hideTopRow) {
        if (hideTopRow === void 0) { hideTopRow = false; }
        var copystring = '';
        if (!hideTopRow) {
            copystring += this.setRowHeader(data[0]);
        }
        for (var j = 0; j < data.length; j++) {
            for (var key in data[j]) {
                if (data[j].hasOwnProperty(key)) {
                    copystring += '"' + data[j][key] + '"\t';
                }
            }
            copystring += '\r\n';
        }
        copystring += '\r\n';
        return copystring;
    };
    PCEService.prototype.setRowHeader = function (data) {
        var str = '';
        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                str += '"' + key + '"\t';
            }
        }
        str += '\n';
        return str;
    };
    PCEService.prototype.appendFooter = function (copystring) {
        return '\r\n' + this.getFooter();
    };
    PCEService.prototype.getFooter = function () {
        var FOOTER = this.localAppResource.getResource('FooterForReports');
        return FOOTER;
    };
    PCEService.prototype.setTextToCopy = function (data) {
        var success = false;
        var tmpElem = document.createElement('textarea');
        tmpElem.style.position = 'fixed';
        tmpElem.style.top = '0px';
        tmpElem.style.left = '-99999px';
        tmpElem.setAttribute('readonly', '');
        tmpElem.value = data;
        document.body.appendChild(tmpElem);
        tmpElem.select();
        tmpElem.focus();
        tmpElem.setSelectionRange(0, tmpElem.value.length);
        var succeeded;
        try {
            succeeded = window.document.execCommand('copy');
            success = true;
            console.warn('copy success status:', succeeded);
            if (!succeeded) {
                throw succeeded;
            }
        }
        catch (err) {
            success = false;
        }
        document.body.removeChild(tmpElem);
        tmpElem = null;
        return success;
    };
    // export
    PCEService.prototype.exportData = function (components) {
        if (components.length > 0) {
            Promise.all([
                components[_utils_index_enum__WEBPACK_IMPORTED_MODULE_5__["Index"].FIRST].workbookOptions(),
                components[_utils_index_enum__WEBPACK_IMPORTED_MODULE_5__["Index"].SECOND].workbookOptions(),
                components[_utils_index_enum__WEBPACK_IMPORTED_MODULE_5__["Index"].THIRD].workbookOptions()
            ]).then(function (workbooks) {
                workbooks[_utils_index_enum__WEBPACK_IMPORTED_MODULE_5__["Index"].FIRST].sheets[_utils_index_enum__WEBPACK_IMPORTED_MODULE_5__["Index"].FIRST].rows = workbooks[_utils_index_enum__WEBPACK_IMPORTED_MODULE_5__["Index"].FIRST].sheets[_utils_index_enum__WEBPACK_IMPORTED_MODULE_5__["Index"].FIRST].rows.concat([{}], workbooks[_utils_index_enum__WEBPACK_IMPORTED_MODULE_5__["Index"].SECOND].sheets[_utils_index_enum__WEBPACK_IMPORTED_MODULE_5__["Index"].FIRST].rows, workbooks[_utils_index_enum__WEBPACK_IMPORTED_MODULE_5__["Index"].THIRD].sheets[_utils_index_enum__WEBPACK_IMPORTED_MODULE_5__["Index"].FIRST].rows);
                components[_utils_index_enum__WEBPACK_IMPORTED_MODULE_5__["Index"].FIRST].save(workbooks[_utils_index_enum__WEBPACK_IMPORTED_MODULE_5__["Index"].FIRST]);
            });
        }
    };
    PCEService.prototype.exportExcelData = function (data, fileName) {
        var header = this.header;
        var tempHeader = this.jsonfyPlanCardHeaderData(header);
        var tempFooterArray = [];
        var footerData = this.getFooter();
        tempFooterArray.push({ ' ': footerData });
        var worksheet = xlsx__WEBPACK_IMPORTED_MODULE_3__["utils"].json_to_sheet(tempHeader, {
            skipHeader: true
        });
        var wb = xlsx__WEBPACK_IMPORTED_MODULE_3__["utils"].book_new();
        var headerCount = Object.keys(header).length + 2;
        xlsx__WEBPACK_IMPORTED_MODULE_3__["utils"].sheet_add_json(worksheet, data, { origin: 'A' + headerCount });
        xlsx__WEBPACK_IMPORTED_MODULE_3__["utils"].sheet_add_json(worksheet, tempFooterArray, {
            skipHeader: true,
            origin: -1
        });
        xlsx__WEBPACK_IMPORTED_MODULE_3__["utils"].book_append_sheet(wb, worksheet, 'Sheet1');
        xlsx__WEBPACK_IMPORTED_MODULE_3__["writeFile"](wb, fileName);
    };
    // print
    PCEService.prototype.setDataForPrint = function (dataArray) {
        var dataHtml = this.createDataTableForPrint(dataArray);
        var fntz = '10px';
        var htmlstr = this.getPlanCardHeaderForPrint(fntz) +
            dataHtml +
            this.getPlanCardFooterForPrint(fntz);
        this.doPrintFrame(htmlstr);
    };
    PCEService.prototype.execPCECommand = function (command, eleW, name) {
        switch (command.action) {
            case 'ExportGraph':
                return this.exportGraph(command, eleW, name);
            case 'PrintGraph':
                return this.printGraph(command);
            case 'CopyGraph':
                return this.copyGraph(command, name);
            case 'copyCohortData':
                return this.copyCohort(command);
        }
        return rxjs__WEBPACK_IMPORTED_MODULE_6__["EMPTY"];
    };
    PCEService.prototype.copyGraph = function (cmd, name) {
        var _this = this;
        return new rxjs__WEBPACK_IMPORTED_MODULE_6__["Observable"](function (observer) {
            if (name === 'copy') {
                var headerData = _this.jsonfyPlanCardHeaderData(cmd.header);
                var copyString = _this.convertArrayToString(headerData, true);
                copyString += 'Milestones\t\r\n\r\n';
                headerData = _this.jsonfyPlanCardHeaderData(cmd.metaData.milestone);
                copyString += _this.convertArrayToString(headerData, true);
                copyString += 'Chart Data:\t\r\n\r\n';
                copyString += _this.convertArrayToString(cmd.metaData.curve);
                copyString += _this.appendFooter(copyString);
                _this.setTextToCopy(copyString);
                cmd.copyString = copyString;
                observer.next(cmd);
            }
        });
    };
    PCEService.prototype.copyCohort = function (cmd) {
        var _this = this;
        return new rxjs__WEBPACK_IMPORTED_MODULE_6__["Observable"](function (observer) {
            var headerData = _this.jsonfyPlanCardHeaderData(cmd.header);
            var copyString = _this.convertArrayToString(headerData, true);
            if (cmd.metaData.cohortData.length > 0) {
                copyString += 'Cohort\t\r\n\r\n';
                copyString += _this.convertArrayToString(cmd.metaData.cohortData);
            }
            if (cmd.metaData.dependencyData.length > 0) {
                copyString += 'Dependency\t\r\n\r\n';
                copyString += _this.convertArrayToString(cmd.metaData.dependencyData);
            }
            copyString += _this.appendFooter(copyString);
            _this.setTextToCopy(copyString);
            observer.next(cmd);
        });
    };
    PCEService.prototype.printGraph = function (cmd) {
        var _this = this;
        return new rxjs__WEBPACK_IMPORTED_MODULE_6__["Observable"](function (observer) {
            html2canvas(cmd.domElement).then(function (canvas) {
                var dataHtml = '<img src="' + canvas.toDataURL() + '">';
                var headerStr = _this.getHeaderAsHtmlStr(cmd.header);
                var fntz = '10px';
                var htmlstr = headerStr + dataHtml + _this.getPlanCardFooterForPrint(fntz);
                _this.doPrintFrame(htmlstr);
                observer.next(cmd);
            });
        });
    };
    PCEService.prototype.exportGraph = function (cmd, eleW, name) {
        var _this = this;
        return new rxjs__WEBPACK_IMPORTED_MODULE_6__["Observable"](function (observer) {
            html2canvas(cmd.domElement).then(function (canvas) {
                var fntz = '10px';
                var imgsrc = _this.getHeaderAsHtmlStr(cmd.header);
                var windowContent = '<div >';
                windowContent += imgsrc;
                windowContent += '<div><img src="' + canvas.toDataURL() + '"></div>';
                windowContent += _this.getPlanCardFooterForPrint(fntz);
                windowContent += '</div>';
                var tmpDiv = document.createElement('div');
                tmpDiv.setAttribute('id', 'dummyexportDiv');
                tmpDiv.innerHTML = windowContent;
                // style the div so that html2canvas can find it...
                console.log('html2canvas', windowContent);
                tmpDiv.style.position = 'absolute';
                tmpDiv.style.left = '0px';
                tmpDiv.style.top = '0px';
                tmpDiv.style.zIndex = '-1';
                tmpDiv.style.backgroundColor = 'white';
                tmpDiv.style.padding = '45px';
                document.body.appendChild(tmpDiv);
                html2canvas(tmpDiv).then(function (cnvs) {
                    console.log(canvas.toDataURL());
                    _this.downloadCanvas(cnvs, 'png', name, _this.save);
                    observer.next(cmd);
                });
            });
        });
    };
    PCEService.prototype.downloadCanvas = function (canvas, format, name, callback) {
        canvas.toBlob(function (blob) {
            var filesize = Math.round(blob[length] / 1024) + ' KB';
            if (callback) {
                callback(blob, filesize, name);
            }
        });
    };
    PCEService.prototype.save = function (dataBlob, filesize, name) {
        Object(file_saver__WEBPACK_IMPORTED_MODULE_7__["saveAs"])(dataBlob, name + '.png'); // FileSaver.js function
        var ref = document.getElementById('dummyexportDiv');
        ref.parentNode.removeChild(ref);
    };
    PCEService.prototype.createDataTableForPrint = function (data) {
        var tempstring = '<div style="margin-top:20px;"><table>';
        tempstring += this.createHeaderForPrint(data[0]);
        tempstring += '<tbody>';
        for (var j = 0; j < data.length; j++) {
            tempstring += '<tr>';
            for (var key in data[j]) {
                if (data[j].hasOwnProperty(key)) {
                    tempstring += '<td>' + data[j][key] + '</td>';
                }
            }
            tempstring += '</tr>';
        }
        tempstring += '</tbody></table></div>';
        return tempstring;
    };
    PCEService.prototype.createHeaderForPrint = function (data) {
        var str = '<thead><tr>';
        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                str += '<th>' + key + '</th>';
            }
        }
        str += '</tr></thead>';
        return str;
    };
    PCEService.prototype.getHeaderAsHtmlStr = function (data) {
        var str = '<div class="header" style="font: 11pt sans-serif;color:"#000" font-size:${fntz}">' +
            '<table>';
        for (var key in data) {
            if (data.hasOwnProperty(key)) {
                str +=
                    '<tr>' +
                        '  <td> ' +
                        key +
                        '</td>' +
                        '<td>' +
                        data[key] +
                        '</td>' +
                        '</tr>';
            }
        }
        str += '</table></div>';
        return str;
    };
    PCEService.prototype.getPlanCardHeaderForPrint = function (fntz) {
        var headerData = this.header;
        console.log(headerData);
        var headerStr = '';
        for (var key in headerData) {
            if (headerData.hasOwnProperty(key)) {
                headerStr +=
                    '<tr>' + ("<td>" + key + "</td>") + (" <td>" + headerData[key] + "</td>") + '</tr>';
            }
        }
        return ('<div class="header" style="font: 11pt sans-serif; font-size:${fntz}">' +
            '<table>' +
            headerStr +
            '</table>' +
            '</div>');
    };
    PCEService.prototype.getPlanCardFooterForPrint = function (fntz) {
        var footerData = this.getFooter();
        footerData = footerData.replace('<Organization Name>', '&lt;Organization Name&gt;');
        return "<div style=\"text-align:center; font-size: 14px\"><p><strong> " + footerData + " </strong></p></div>";
    };
    // doPrintFrame(htmlstr) {
    //    htmlstr = htmlstr + this.appendStyleForTable();
    //   const frame1 = document.createElement('iframe');
    //   frame1.name = 'frame1';
    //   frame1.style.position = 'absolute';
    //   frame1.style.top = '-1000000px';
    //   document.body.appendChild(frame1);
    //   const frameDoc = frame1.contentWindow ? frame1.contentWindow :
    //     frame1.contentDocument['document'] ? frame1.contentDocument['document'] : frame1.contentDocument;
    //   frameDoc.document.open();
    //   frameDoc.document.write(htmlstr);
    //   frameDoc.document.close();
    //   if (frameDoc.queryCommandSupported && frameDoc.queryCommandSupported('print')) {
    //     frameDoc.execCommand('print', false, null);
    //   } else {
    //     // window.frames['frame1'].focus();
    //     // window.frames['frame1'].print();
    //     frame1.contentWindow.document.write(htmlstr);
    //     frame1.contentWindow.print();
    //   }
    // }
    PCEService.prototype.doPrintFrame = function (htmlstr) {
        var ua = window.navigator.userAgent;
        var msie = ua.indexOf('MSIE');
        if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
            htmlstr = htmlstr + this.appendStyleForTable(true);
        }
        else {
            htmlstr = htmlstr + this.appendStyleForTable(false);
        }
        htmlstr = htmlstr + this.appendStyleForTable();
        var frame1 = document.createElement('iframe');
        frame1.name = 'frame1';
        frame1.style.position = 'absolute';
        frame1.style.top = '-1000000px';
        document.body.appendChild(frame1);
        var frameDoc = frame1.contentWindow
            ? frame1.contentWindow
            : frame1.contentDocument['document']
                ? frame1.contentDocument['document']
                : frame1.contentDocument;
        frameDoc.document.open();
        frameDoc.document.write(htmlstr);
        frameDoc.document.close();
        window.setTimeout(function () {
            if (msie > 0 || !!navigator.userAgent.match(/Trident.*rv\:11\./)) {
                var result = frame1.contentWindow.document.execCommand('print', false, null);
                if (!result) {
                    window.frames['frame1'].contentWindow.print();
                }
            }
            else {
                frame1.contentWindow.print();
            }
        }, 1000);
    };
    PCEService.prototype.appendStyleForTable = function (type) {
        // tslint:disable-next-line:max-line-length
        // return '<style> @media all { table,th,td{ border: 1px solid black; border-collapse: collapse  }  table{ page-break-after: auto; width:100%; margin-top:10px;font-size:0.3vw;counter-reset: page 1;}tr {page-break-inside: avoid;page-break-after: always}td:not(:first-child){padding:1px; white-space: nowrap; }table { page-break-inside: auto}tr { page-break-inside: auto;page-break-after: auto}thead {display: table-header-group}tfoot {display: table-footer-group}@media all and (-webkit-min-device-pixel-ratio:0) {<style> table,th,td{ border: 1px solid black; border-collapse: collapse  }  table{ page-break-after: auto; width:100%; margin-top:10px;font-size:0.8vw;} tr{page-break-inside: avoid;page-break-after: auto} td:not(:first-child){padding:1px; white-space: nowrap; } table{ page-break-inside: auto} tr{ page-break-inside: auto;page-break-after: auto} thead{display: table-header-group} tfoot{display: table-footer-group </style>';
        if (type) {
            // tslint:disable-next-line:max-line-length
            return '<style> @page {margin:1.5cm 0.4cm;} @media all { table,th,td{ border: 1px solid black; border-collapse: collapse  } .header td{width:50%;}table{ page-break-after: auto; width:100%; margin-top:10px;font-size:0.386vw;counter-reset: page 1;}tr {page-break-inside: avoid;page-break-after: always}td {padding:1px; white-space:wrap; max-width:10px; width:10px;word-wrap:break-word; }td:first-child{max-width:30px; width:30px;} th{ width:10px; word-wrap: break-word;} table { page-break-inside: auto}tr { page-break-inside: auto;page-break-after: auto}thead {display: table-header-group}tfoot {display: table-footer-group} } </style>';
        }
        else {
            // tslint:disable-next-line:max-line-length
            return '<style>@media all and (-webkit-min-device-pixel-ratio:0) { table,th,td{ border: 1px solid black; border-collapse: collapse  } .header td{width:50%;} table{ page-break-after: auto; width:100%; margin-top:10px;font-size:0.8vw;} tr{page-break-inside: avoid;page-break-after: auto} td:not(:first-child){padding:1px; white-space: nowrap; } table{ page-break-inside: auto} tr{ page-break-inside: auto;page-break-after: auto} thead{display: table-header-group} tfoot{display: table-footer-group} </style>';
        }
    };
    PCEService.ctorParameters = function () { return [
        { type: _angular_common__WEBPACK_IMPORTED_MODULE_1__["DatePipe"] },
        { type: _services_locale_app_resources_service__WEBPACK_IMPORTED_MODULE_4__["LocaleAppResourcesService"] }
    ]; };
    PCEService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_2__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common__WEBPACK_IMPORTED_MODULE_1__["DatePipe"],
            _services_locale_app_resources_service__WEBPACK_IMPORTED_MODULE_4__["LocaleAppResourcesService"]])
    ], PCEService);
    return PCEService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/reset-password.service.ts":
/*!********************************************************************!*\
  !*** ../common-library/src/lib/services/reset-password.service.ts ***!
  \********************************************************************/
/*! exports provided: ResetPasswordService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ResetPasswordService", function() { return ResetPasswordService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _base_connection_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./base-connection.service */ "../common-library/src/lib/services/base-connection.service.ts");
/* harmony import */ var _payload_command_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./payload-command.service */ "../common-library/src/lib/services/payload-command.service.ts");





var ResetPasswordService = /** @class */ (function () {
    function ResetPasswordService(payloadCommandService, baseConnectionService) {
        this.payloadCommandService = payloadCommandService;
        this.baseConnectionService = baseConnectionService;
    }
    ResetPasswordService.prototype.changeCurrUserPassword = function (params, actionParam) {
        var moduleInfo = {
            moduleName: 'NEWPLANTAB'
        };
        var passwordPayLoad = this.payloadCommandService.getCommandDetails('changeCurrUserPassword', params, null, null, moduleInfo);
        return this.baseConnectionService.sendRequest(passwordPayLoad).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (data) { return data; }));
        // return of([]);
    };
    ResetPasswordService.ctorParameters = function () { return [
        { type: _payload_command_service__WEBPACK_IMPORTED_MODULE_4__["PayloadCommandService"] },
        { type: _base_connection_service__WEBPACK_IMPORTED_MODULE_3__["BaseConnectionService"] }
    ]; };
    ResetPasswordService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_payload_command_service__WEBPACK_IMPORTED_MODULE_4__["PayloadCommandService"],
            _base_connection_service__WEBPACK_IMPORTED_MODULE_3__["BaseConnectionService"]])
    ], ResetPasswordService);
    return ResetPasswordService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/rest-api.service.ts":
/*!**************************************************************!*\
  !*** ../common-library/src/lib/services/rest-api.service.ts ***!
  \**************************************************************/
/*! exports provided: RestApiService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "RestApiService", function() { return RestApiService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common/http */ "../../node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");



var RestApiService = /** @class */ (function () {
    function RestApiService(httpClient) {
        this.httpClient = httpClient;
    }
    RestApiService.prototype.getMethod = function (endPointUrl, baseParam, httpOptions) {
        var _this = this;
        return this.httpClient.get("" + endPointUrl + baseParam.url, tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, httpOptions))
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return _this.handleResponse(res); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (error) { return _this.handleHttpError('get', error); }));
    };
    RestApiService.prototype.postMethod = function (endPointUrl, baseParam, httpOptions, reqData) {
        var _this = this;
        return this.httpClient.post("" + endPointUrl + baseParam.url, reqData, tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, httpOptions))
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return _this.handleResponse(res); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (error) { return _this.handleHttpError('post', error); }));
    };
    RestApiService.prototype.put = function (endPointUrl, baseParam, httpOptions, reqData) {
        var _this = this;
        return this.httpClient.put("" + endPointUrl + baseParam.url, reqData, tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, httpOptions))
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return _this.handleResponse(res); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (error) { return _this.handleHttpError('put', error); }));
    };
    RestApiService.prototype.delete = function (endPointUrl, baseParam, httpOptions, id) {
        var _this = this;
        return this.httpClient.delete("" + endPointUrl + baseParam.url + "/" + id, tslib__WEBPACK_IMPORTED_MODULE_0__["__assign"]({}, httpOptions))
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (res) { return _this.handleResponse(res); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["catchError"])(function (error) { return _this.handleHttpError('delete', error); }));
    };
    RestApiService.prototype.handleResponse = function (res) {
        return res.body ? res.body : res || {};
    };
    /**
     * Handles error
     * @param [operation]
     * @param [result]
     * @returns
     */
    RestApiService.prototype.handleHttpError = function (operation, error) {
        if (operation === void 0) { operation = 'operation'; }
        var errMsg;
        if (error instanceof _angular_common_http__WEBPACK_IMPORTED_MODULE_1__["HttpErrorResponse"]) {
            if (!navigator.onLine) {
                // No Internet connection
                console.log('No Internet Connection');
            }
            // TODO
            /* if (environment.production) {
                if (error.status === 401 || error.status === 0) {
                    // redirect to any where
                }
            } */
            errMsg = error.status + " - " + (error.message || '');
        }
        else {
            // server(api) side error
            errMsg = error.message ? error.message : error.toString();
        }
        console.log(operation + " failed: " + error.message);
        return Promise.reject(error);
    };
    return RestApiService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/server-status.service.ts":
/*!*******************************************************************!*\
  !*** ../common-library/src/lib/services/server-status.service.ts ***!
  \*******************************************************************/
/*! exports provided: ServerStatusService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ServerStatusService", function() { return ServerStatusService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../utils/cache/encryption-action.enum */ "../common-library/src/lib/utils/cache/encryption-action.enum.ts");
/* harmony import */ var _utils_cache_key_enum__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../utils/cache-key.enum */ "../common-library/src/lib/utils/cache-key.enum.ts");
/* harmony import */ var _utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./../utils/cache/cache-type.enum */ "../common-library/src/lib/utils/cache/cache-type.enum.ts");
/* harmony import */ var _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./../utils/cache/store-type.enum */ "../common-library/src/lib/utils/cache/store-type.enum.ts");
/* harmony import */ var _base_connection_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./base-connection.service */ "../common-library/src/lib/services/base-connection.service.ts");
/* harmony import */ var _payload_command_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./payload-command.service */ "../common-library/src/lib/services/payload-command.service.ts");
/* harmony import */ var _models_api_end_points_enum__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../models/api-end-points.enum */ "../common-library/src/lib/models/api-end-points.enum.ts");










var ServerStatusService = /** @class */ (function () {
    /**
     * Creates an instance of server status service.
     * @param payloadCommandService
     * @param baseConnectionService
     */
    function ServerStatusService(payloadCommandService, baseConnectionService) {
        this.payloadCommandService = payloadCommandService;
        this.baseConnectionService = baseConnectionService;
        this.serverStatus = null;
    }
    /**
     * Gets server status
     * @param serverInfo
     * @param [cacheType]
     * @returns
     */
    ServerStatusService.prototype.getServerStatus = function (serverInfo, actionParam) {
        if (!serverInfo) {
            throw new Error("server Info can not be empty or undefined");
        }
        if (!this.typeCheck(serverInfo)) {
            throw new Error("Invalid server Info object");
        }
        actionParam = !actionParam ? {} : actionParam;
        actionParam.cacheType = _utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_5__["CacheType"].sticky;
        actionParam.storeType = _utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_6__["StoreType"].Session;
        actionParam.cacheKey = _utils_cache_key_enum__WEBPACK_IMPORTED_MODULE_4__["CacheKey"].ServerKey;
        actionParam.reportError = false;
        actionParam.encryption = _utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_3__["EncryptionAction"].encrypt;
        actionParam.cmdName = ''; // reset cmd name
        actionParam.xmlRequest = '';
        var moduleInfo = {
            moduleName: 'NEWPLANTAB'
        };
        var headers = {
            'jsonRequest': 'true'
        };
        if (actionParam.endPoint) {
            actionParam.url = _models_api_end_points_enum__WEBPACK_IMPORTED_MODULE_9__["APIEndPoints"].SERVER_STATUS;
        }
        var that = this;
        // TODO Removed hard coded values
        var serverStatusPayload;
        if (actionParam.endPoint) {
            serverStatusPayload = that.payloadCommandService.getApiRequest('getServerStatus', serverInfo, headers, moduleInfo);
            return that.baseConnectionService.send(serverStatusPayload, actionParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (resp) {
                that.serverStatus = resp;
                return that.serverStatus;
            }));
        }
        else {
            serverStatusPayload = that.payloadCommandService.getCommandDetails('getServerStatus', serverInfo, null, null, moduleInfo);
            return that.baseConnectionService.sendRequest(serverStatusPayload, actionParam).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_2__["map"])(function (resp) {
                that.serverStatus = resp;
                return that.serverStatus;
            }));
        }
    };
    ServerStatusService.prototype.typeCheck = function (obj) {
        return (obj.clientVersion !== undefined && obj.clientBuildID !== undefined && obj.clientBuildDate !== undefined);
    };
    ServerStatusService.ctorParameters = function () { return [
        { type: _payload_command_service__WEBPACK_IMPORTED_MODULE_8__["PayloadCommandService"] },
        { type: _base_connection_service__WEBPACK_IMPORTED_MODULE_7__["BaseConnectionService"] }
    ]; };
    ServerStatusService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_payload_command_service__WEBPACK_IMPORTED_MODULE_8__["PayloadCommandService"],
            _base_connection_service__WEBPACK_IMPORTED_MODULE_7__["BaseConnectionService"]])
    ], ServerStatusService);
    return ServerStatusService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/spinner.service.ts":
/*!*************************************************************!*\
  !*** ../common-library/src/lib/services/spinner.service.ts ***!
  \*************************************************************/
/*! exports provided: SpinnerService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SpinnerService", function() { return SpinnerService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/cdk/overlay */ "../../node_modules/@angular/cdk/esm5/overlay.es5.js");
/* harmony import */ var _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/cdk/portal */ "../../node_modules/@angular/cdk/esm5/portal.es5.js");
/* harmony import */ var _angular_material__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @angular/material */ "../../node_modules/@angular/material/esm5/material.es5.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");







var SpinnerService = /** @class */ (function () {
    function SpinnerService(overlay) {
        var _this = this;
        this.overlay = overlay;
        this.spinnerRef = this.cdkSpinnerCreate();
        this.spin$ = new rxjs__WEBPACK_IMPORTED_MODULE_5__["Subject"]();
        this.spin$
            .asObservable()
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["map"])(function (val) { return (val ? 1 : -1); }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_6__["scan"])(function (acc, one) { return (acc + one >= 0 ? acc + one : 0); }, 0))
            .subscribe(function (res) {
            if (res === 1) {
                _this.showSpinner();
            }
            else if (res === 0) {
                if (_this.spinnerRef.hasAttached()) {
                    _this.stopSpinner();
                }
            }
        });
    }
    SpinnerService.prototype.cdkSpinnerCreate = function () {
        return this.overlay.create({
            hasBackdrop: true,
            backdropClass: 'dark-backdrop',
            positionStrategy: this.overlay
                .position()
                .global()
                .centerHorizontally()
                .centerVertically(),
        });
    };
    SpinnerService.prototype.showSpinner = function () {
        this.spinnerRef.attach(new _angular_cdk_portal__WEBPACK_IMPORTED_MODULE_3__["ComponentPortal"](_angular_material__WEBPACK_IMPORTED_MODULE_4__["MatSpinner"]));
    };
    SpinnerService.prototype.stopSpinner = function () {
        this.spinnerRef.detach();
    };
    SpinnerService.ctorParameters = function () { return [
        { type: _angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_2__["Overlay"] }
    ]; };
    SpinnerService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_cdk_overlay__WEBPACK_IMPORTED_MODULE_2__["Overlay"]])
    ], SpinnerService);
    return SpinnerService;
}());



/***/ }),

/***/ "../common-library/src/lib/services/user-idle.service.ts":
/*!***************************************************************!*\
  !*** ../common-library/src/lib/services/user-idle.service.ts ***!
  \***************************************************************/
/*! exports provided: UserIdleService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UserIdleService", function() { return UserIdleService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _models_user_idle_config__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./../models/user-idle.config */ "../common-library/src/lib/models/user-idle.config.ts");





/**
 * User's idle service.
 */
var UserIdleService = /** @class */ (function () {
    function UserIdleService(config) {
        this.timerStart$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        this.timeout$ = new rxjs__WEBPACK_IMPORTED_MODULE_2__["Subject"]();
        /**
         * Idle value in seconds.
         * Default equals to 10 minutes.
         */
        this.idle = 600;
        /*   protected idle = 600; */
        /**
         * Timeout value in seconds.
         * Default equals to 5 minutes.
         */
        this.timeout = 300;
        /*   protected timeout = 3; */
        /**
         * Ping value in seconds.
         * * Default equals to 2 minutes.
         */
        /*   protected ping = 1; */
        this.ping = 120;
        if (config) {
            this.idle = config.idle;
            this.timeout = config.timeout;
            this.ping = config.ping;
        }
        this.activityEvents$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["merge"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(window, 'mousemove'), Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(window, 'resize'), Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(document, 'keydown'), Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["fromEvent"])(document, 'keyup'));
        this.idle$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["from"])(this.activityEvents$);
    }
    /**
     * Start watching for user idle and setup timer and ping.
     */
    UserIdleService.prototype.startWatching = function () {
        var _this = this;
        if (this.idleSubscription) {
            this.idleSubscription.unsubscribe();
        }
        // If any of user events is not active for idle-seconds when start timer.
        this.idleSubscription = this.idle$
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["bufferTime"])(5000), // Starting point of detecting of user's inactivity
        Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(function (arr) { return !arr.length && !_this.isInactivityTimer; }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function () { return _this.isInactivityTimer = true; }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])(function () { return Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["interval"])(1000).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["takeUntil"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["merge"])(_this.activityEvents$, Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["timer"])(_this.idle * 500).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function () { return _this.timerStart$.next(true); })))), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["finalize"])(function () { return (_this.isInactivityTimer = false); })); }))
            .subscribe();
        this.setupTimer(this.timeout);
        this.setupPing(this.ping);
    };
    UserIdleService.prototype.stopWatching = function () {
        this.stopTimer();
        if (this.idleSubscription) {
            this.idleSubscription.unsubscribe();
        }
    };
    UserIdleService.prototype.stopTimer = function () {
        this.timerStart$.next(false);
    };
    UserIdleService.prototype.resetTimer = function () {
        this.stopTimer();
        this.isTimeout = false;
    };
    /**
     * Return observable for timer's countdown number that emits after idle.
     */
    UserIdleService.prototype.onTimerStart = function () {
        var _this = this;
        return this.timerStart$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["distinctUntilChanged"])(), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["switchMap"])(function (start) { return (start ? _this.timer$ : Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["of"])(null)); }));
    };
    /**
     * Return observable for timeout is fired.
     */
    UserIdleService.prototype.onTimeout = function () {
        var _this = this;
        return this.timeout$.pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(function (timeout) { return !!timeout; }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function () { return _this.isTimeout = true; }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function () { return true; }));
    };
    UserIdleService.prototype.getConfigValue = function () {
        return {
            idle: this.idle,
            timeout: this.timeout,
            ping: this.ping
        };
    };
    /**
     * Set config values.
     * @param config
     */
    UserIdleService.prototype.setConfigValues = function (config) {
        if (this.idleSubscription && !this.idleSubscription.closed) {
            console.error('Call stopWatching() before set config values');
            return;
        }
        if (config.idle) {
            this.idle = config.idle;
        }
        if (config.ping) {
            this.ping = config.ping;
        }
        if (config.timeout) {
            this.timeout = config.timeout;
        }
    };
    /**
     * Setup timer.
     *
     * Counts every seconds and return n+1 and fire timeout for last count.
     * @param timeout Timeout in seconds.
     */
    UserIdleService.prototype.setupTimer = function (timeout) {
        var _this = this;
        this.timer$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["interval"])(1000).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["take"])(timeout), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["map"])(function () { return 1; }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["scan"])(function (acc, n) { return acc + n; }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["tap"])(function (count) {
            if (count === timeout) {
                _this.timeout$.next(true);
            }
        }));
    };
    /**
     * Setup ping.
     *
     * Pings every ping-seconds only if is not timeout.
     * @param ping
     */
    UserIdleService.prototype.setupPing = function (ping) {
        var _this = this;
        this.ping$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_2__["interval"])(ping * 1000).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_3__["filter"])(function () { return !_this.isTimeout; }));
    };
    UserIdleService.ctorParameters = function () { return [
        { type: _models_user_idle_config__WEBPACK_IMPORTED_MODULE_4__["UserIdleConfig"], decorators: [{ type: _angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"] }] }
    ]; };
    UserIdleService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])({
            providedIn: 'root'
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__param"](0, Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Optional"])()),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_models_user_idle_config__WEBPACK_IMPORTED_MODULE_4__["UserIdleConfig"]])
    ], UserIdleService);
    return UserIdleService;
}());



/***/ }),

/***/ "../common-library/src/lib/utils/AppUtil.ts":
/*!**************************************************!*\
  !*** ../common-library/src/lib/utils/AppUtil.ts ***!
  \**************************************************/
/*! exports provided: AppUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppUtil", function() { return AppUtil; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_common__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/common */ "../../node_modules/@angular/common/fesm5/common.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! moment */ "../../node_modules/moment/moment.js");
/* harmony import */ var moment__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(moment__WEBPACK_IMPORTED_MODULE_2__);



var moment = moment__WEBPACK_IMPORTED_MODULE_2__;
/**
 * App util
 */
var AppUtil = /** @class */ (function () {
    function AppUtil() {
    }
    /**
     * Checks if the element exists in the given array
     *
     * @param arr
     * @param element
     * @returns
     * @memberof AppUtil
     */
    AppUtil.checkElementExistsInArray = function (arr, element) {
        if (arr === undefined || arr === null) {
            throw new Error('arr should be defined');
        }
        if (!(arr instanceof Array)) {
            throw new Error('arr should be an array');
        }
        if (element === undefined || element === null) {
            throw new Error('element should be defined');
        }
        var result = arr.some(function (el) {
            return el.key === element.key;
        });
        return result;
    };
    /**
     * extracts and concatenates the path from URL segments
     *
     * @param url
     * @returns
     * @memberof AppUtil
     */
    AppUtil.extractPathFromUrl = function (url) {
        if (url === undefined || url === null) {
            throw new Error('url must be defined');
        }
        if (!(url instanceof Array)) {
            throw new Error('url must be of type UrlSegment');
        }
        var paths = url.map(function (segment) { return segment.path; });
        var path = paths.join('/');
        return path;
    };
    AppUtil.getInitials = function (text, separator) {
        if (text === undefined || text === null) {
            throw new Error('text should be defined');
        }
        if (typeof text !== 'string') {
            throw new Error('text should be string');
        }
        var arr = text.split(separator);
        var initials = arr.map(function (t) {
            return t
                .trim()
                .charAt(0)
                .toUpperCase();
        });
        return initials.join('');
    };
    AppUtil.getNameInitials = function (name, separator) {
        if (name === undefined || name === null) {
            throw new Error('name should be defined');
        }
        if (typeof name !== 'string') {
            throw new Error('name should be string');
        }
        var arr = name.split(separator);
        var initials = [];
        if (arr.length > 0) {
            initials.push(arr[0]
                .trim()
                .charAt(0)
                .toUpperCase());
        }
        if (arr.length > 1) {
            initials.push(arr[arr.length - 1]
                .trim()
                .charAt(0)
                .toUpperCase());
        }
        return initials.join('');
    };
    AppUtil.generateUrl = function (baseHref, fragment) {
        var url = window.location.protocol +
            '//' +
            window.location.hostname +
            ':' +
            window.location.port +
            '/';
        if (baseHref) {
            url += baseHref + '/';
        }
        if (fragment) {
            url += fragment + '/';
        }
        url += 'index.html';
        return url;
    };
    AppUtil.generateFlexUrl = function (baseHref) {
        var url = '';
        url +=
            window.location.protocol +
                '//' +
                window.location.hostname +
                ':' +
                window.location.port +
                '/';
        if (baseHref) {
            url += baseHref + '/';
        }
        return url;
    };
    AppUtil.dayDiff = function (fromdt, todt) {
        var fromDate = moment(fromdt);
        var toDate = moment(todt);
        var daysDifference = toDate.diff(fromDate, 'days');
        return daysDifference;
        // const weekDiffernce = daysDifference / 7;
        // return weekDiffernce.toFixed(1) + ` ` + `Weeks`;
    };
    AppUtil.dateDiff = function (dt1, dt2, by, num) {
        var fromDate = moment(dt1);
        var toDate = moment(dt2);
        var dayDiff = toDate.diff(fromDate, 'd');
        if (by === 'd') {
            return dayDiff;
        }
        else {
            var weekDiff = (dayDiff + 1) / 7;
            return weekDiff.toFixed(num);
        }
    };
    AppUtil.dateAdd = function (date, num) {
        return moment(date).add(num, 'days');
    };
    AppUtil.dateSubstract = function (date, num) {
        return moment(date).subtract(num, 'days');
    };
    AppUtil.dateFormatter = function (date) {
        return moment(date).format('YYYY-MM-DD');
    };
    AppUtil.formatDate = function (date, format) {
        if (format === void 0) { format = 'YYYY-MM-DD'; }
        return moment(date).format(format);
    };
    AppUtil.formatDateStrict = function (date, format, emptyValue) {
        if (format === void 0) { format = 'DD-MMM-YYYY'; }
        if (emptyValue === void 0) { emptyValue = ''; }
        if (this.isDefined(date)) {
            return moment(date).format(format);
        }
        else {
            return emptyValue;
        }
    };
    AppUtil.dateCompare = function (dt1, dt2) {
        var date1 = dt1;
        var date2 = dt2;
        var days = moment(date2).diff(moment(date1), 'days');
        if (days >= 0) {
            return true;
        }
        else {
            return false;
        }
    };
    /********************************************************************
    * Function : isValidDate
    * Purpose: Utility method to validate date formate & the value.
    * Valid formate: DD-MMM-YYYY (For e.g. 05-Dec-2016). If user enters something which is not in this format
    * then it will return false. For e.g. 05..Dec.2016 will return false
    *********************************************************************/
    AppUtil.isValidDate = function (dateStr) {
        var currVal = dateStr;
        var months = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];
        if (currVal === '' && currVal) {
            return false;
        }
        var dtPattern = /^(([1-9]|0[1-9]|1[0-9]|2[0-9]|3[0-1])(-)(JAN|FEB|MAR|APR|MAY|JUN|JUL|AUG|SEP|OCT|NOV|DEC)(-)((19|20)\d{2}))$/i;
        var dtArray = currVal.match(dtPattern);
        if (dtArray === null || dtArray === undefined) {
            return false;
        }
        var dtDay = parseInt(dtArray[1], 10);
        var dtMonth = months.indexOf(dtArray[4].toUpperCase()) + 1;
        var dtYear = parseInt(dtArray[6], 10);
        if (isNaN(dtMonth)) {
            for (var i = 4; i <= 15; i++) {
                if ((dtArray[i])) {
                    dtMonth = i - 3;
                    break;
                }
            }
        }
        if (dtMonth < 1 || dtMonth > 12) {
            return false;
        }
        else if (dtDay < 1 || dtDay > 31) {
            return false;
        }
        else if ((dtMonth === 4 || dtMonth === 6 || dtMonth === 9 || dtMonth === 11) && dtDay === 31) {
            return false;
        }
        else if (dtMonth === 2) {
            var isleap = (dtYear % 4 === 0 && (dtYear % 100 !== 0 || dtYear % 400 === 0));
            if (dtDay > 29 || (dtDay === 29 && !isleap)) {
                return false;
            }
        }
        return true;
    };
    AppUtil.isDefined = function (value, isNumber) {
        if (isNumber === void 0) { isNumber = false; }
        var isDefined = false;
        if (value !== undefined && value !== null) {
            isDefined = true;
            if (isNumber) {
                value = parseFloat(value.toString().split(',').join(''));
                isDefined = (isDefined && !isNaN(value) && isFinite(value));
            }
            else {
                isDefined = (isDefined && value.toString().trim() !== '');
            }
        }
        return isDefined;
    };
    AppUtil.formatDecimal = function (value, format) {
        var formattedValue = Object(_angular_common__WEBPACK_IMPORTED_MODULE_1__["formatNumber"])(value, 'en-US', format);
        value = Number(formattedValue.split(',').join(''));
        if (isNaN(value)) {
            value = null;
        }
        return value;
    };
    AppUtil.stripNonnumbers = function (value) {
        var regEx = /[^0-9]/g;
        return value ? value.replace(regEx, '') : value;
    };
    AppUtil.isValidNumber = function (inputNumber) {
        if (inputNumber && (typeof inputNumber === 'string')) {
            inputNumber = inputNumber.toString().trim();
        }
        if (inputNumber || inputNumber === 0) {
            return !isNaN(inputNumber);
        }
        return false;
    };
    /**
     * Checks if the given arrays are equal. If yes returns true and false otherwise.
     *
     * @param a
     * @param b
     * @memberof AppUtil
     */
    AppUtil.areArraysEqual = function (a, b) {
        var arraysEqual = false;
        if (a && b) {
            arraysEqual = tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](a).sort().join(',') === tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](b).sort().join(',');
        }
        return arraysEqual;
    };
    /**
     * Clears the validators applied on the formgroup as well as all its descendants
     * and updates their validity
     *
     * @param formGroup
     * @memberof AppUtil
     */
    AppUtil.clearFormGroupValidators = function (formGroup) {
        if (formGroup) {
            for (var field in formGroup.controls) {
                if (formGroup.get(field)) {
                    var fg = formGroup.get(field);
                    fg.clearValidators();
                    fg.updateValueAndValidity();
                    if (fg.controls) {
                        this.clearFormGroupValidators(fg);
                    }
                }
            }
            formGroup.clearValidators();
            formGroup.updateValueAndValidity();
        }
    };
    /**
     * Resets the error if any set on the form group as well as all its descendants
     *
     * @param form
     * @memberof AppUtil
     */
    AppUtil.resetFormErrors = function (form) {
        if (form) {
            form.setErrors(null);
            var fg = form;
            if (fg && fg.controls && Object.keys(fg.controls).length > 0) {
                for (var field in fg.controls) {
                    if (fg.get(field)) {
                        var fgEntry = fg.get(field);
                        this.resetFormErrors(fgEntry);
                    }
                }
            }
        }
    };
    /**
      * Calcuaters rate per frequency
      * @param rate
      * @param reportingPeriodVal
      * @returns rate per frequency
      */
    AppUtil.calcuaterRatePerFrequency = function (rate, reportingPeriodVal, isModify) {
        var ZERO = 0;
        if (this.isDefined(rate)) {
            if (rate !== ZERO) {
                var freq = reportingPeriodVal;
                // if (isModify && isModify === true) {
                //   return rate * freq;
                // } else {
                //   return (rate / freq);
                // }
                return rate;
            }
            else {
                return ZERO;
            }
        }
        else {
            return ZERO;
        }
    };
    /**
      * Checks not empty
      * @param [param]
      * @returns true if not empty
      */
    AppUtil.checkNotEmpty = function (param) {
        var EMPTY = '';
        if (param !== null && param !== undefined) {
            if (param !== EMPTY) {
                return true;
            }
            else {
                return false;
            }
        }
        else {
            return false;
        }
    };
    /**
  * Dates formatters
  * @param [date]
  * @returns
  */
    AppUtil.dateFormatters = function (date) {
        var EMPTY = '';
        if (this.isDefined(date)) {
            return moment(date).format('YYYY-MM-DD');
        }
        return EMPTY;
    };
    return AppUtil;
}());



/***/ }),

/***/ "../common-library/src/lib/utils/cache-key.enum.ts":
/*!*********************************************************!*\
  !*** ../common-library/src/lib/utils/cache-key.enum.ts ***!
  \*********************************************************/
/*! exports provided: CacheKey */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CacheKey", function() { return CacheKey; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

/**
 * Cache key
 */
var CacheKey;
(function (CacheKey) {
    CacheKey["TermErrorKey"] = "TermErrorKey";
    CacheKey["TermLoginKey"] = "TermLoginKey";
    CacheKey["TermApplicationKey"] = "TermApplicationKey";
    CacheKey["TermKey"] = "TermKey";
    CacheKey["ServerKey"] = "ServerKey";
    CacheKey["UserDataKey"] = "UserDataKey";
    CacheKey["StudyDataKey"] = "StudyDataKey";
    CacheKey["StudyTagkey"] = "StudyTagKey";
    CacheKey["FilterDataKey"] = "FilterDataKey";
    CacheKey["GetAppDataKey"] = "GetAppDataKey";
    CacheKey["GetPlanListKey"] = "GetPlanListKey";
    CacheKey["GetStudyPlanKey"] = "GetStudyPlanKey";
    CacheKey["GetStudySummary"] = "GetStudySummaryKey";
    CacheKey["GetPlanList"] = "GetPlanListKey";
    CacheKey["updatePlantList"] = "updatePlanListKey";
    CacheKey["getSourceCohortList"] = "getSourceCohortList";
    CacheKey["getAllCohortList"] = "getAllCohortList";
    CacheKey["GetBriefPlanList"] = "GetBriefPlanList";
    CacheKey["GetPlanDetails"] = "getPlanDetails";
    CacheKey["GetFilterCountryData"] = "GetFilterCountryData";
    CacheKey["GetInterimAnalysisList"] = "GetInterimAnalysisList";
    CacheKey["GetStudyDetails"] = "getStudyDetails";
    CacheKey["GetStudyTags"] = "GetStudyTags";
    CacheKey["GetStudySettings"] = "getStudySettings";
    CacheKey["GetCohortDetails"] = "GetCohortDetails";
})(CacheKey || (CacheKey = {}));


/***/ }),

/***/ "../common-library/src/lib/utils/cache/cache-type.enum.ts":
/*!****************************************************************!*\
  !*** ../common-library/src/lib/utils/cache/cache-type.enum.ts ***!
  \****************************************************************/
/*! exports provided: CacheType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CacheType", function() { return CacheType; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

/**
 * Cache type
 */
var CacheType;
(function (CacheType) {
    CacheType["sticky"] = "Yes";
    CacheType["nonsticky"] = "No";
})(CacheType || (CacheType = {}));


/***/ }),

/***/ "../common-library/src/lib/utils/cache/encryption-action.enum.ts":
/*!***********************************************************************!*\
  !*** ../common-library/src/lib/utils/cache/encryption-action.enum.ts ***!
  \***********************************************************************/
/*! exports provided: EncryptionAction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "EncryptionAction", function() { return EncryptionAction; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

/**
 * Encryption action
 */
var EncryptionAction;
(function (EncryptionAction) {
    EncryptionAction["encrypt"] = "true";
    EncryptionAction["noencrypt"] = "false";
})(EncryptionAction || (EncryptionAction = {}));


/***/ }),

/***/ "../common-library/src/lib/utils/cache/store-type.enum.ts":
/*!****************************************************************!*\
  !*** ../common-library/src/lib/utils/cache/store-type.enum.ts ***!
  \****************************************************************/
/*! exports provided: StoreType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StoreType", function() { return StoreType; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

/**
 * Store type
 */
var StoreType;
(function (StoreType) {
    StoreType["InMemory"] = "In-Memory";
    StoreType["Session"] = "Session";
    // IndexDB = 'Index-DB',
})(StoreType || (StoreType = {}));


/***/ }),

/***/ "../common-library/src/lib/utils/common-routes.ts":
/*!********************************************************!*\
  !*** ../common-library/src/lib/utils/common-routes.ts ***!
  \********************************************************/
/*! exports provided: CommonRoutes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CommonRoutes", function() { return CommonRoutes; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _components_redirect_redirect_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/redirect/redirect.component */ "../common-library/src/lib/components/redirect/redirect.component.ts");


var CommonRoutes = /** @class */ (function () {
    function CommonRoutes() {
    }
    CommonRoutes.data = [
        {
            'path': 'new-plans',
            'component': _components_redirect_redirect_component__WEBPACK_IMPORTED_MODULE_1__["RedirectComponent"],
            'data': {
                'externalUrlFragment': 'app1',
                'moduleId': 35
            }
        },
        {
            'path': 'new-study',
            'component': _components_redirect_redirect_component__WEBPACK_IMPORTED_MODULE_1__["RedirectComponent"],
            'data': {
                'externalUrlFragment': 'app2',
                'moduleId': 36
            }
        }, {
            'path': 'new-countries',
            'component': _components_redirect_redirect_component__WEBPACK_IMPORTED_MODULE_1__["RedirectComponent"],
            'data': {
                'externalUrlFragment': 'app3',
                'moduleId': 9
            }
        }, {
            'path': 'new-sites',
            'component': _components_redirect_redirect_component__WEBPACK_IMPORTED_MODULE_1__["RedirectComponent"],
            'data': {
                'externalUrlFragment': 'app4',
                'moduleId': 5
            }
        }, {
            'path': 'new-login',
            'component': _components_redirect_redirect_component__WEBPACK_IMPORTED_MODULE_1__["RedirectComponent"],
            'data': {
                'externalUrlFragment': 'login',
                'moduleId': 39
            }
        }
    ];
    return CommonRoutes;
}());



/***/ }),

/***/ "../common-library/src/lib/utils/help-constants.ts":
/*!*********************************************************!*\
  !*** ../common-library/src/lib/utils/help-constants.ts ***!
  \*********************************************************/
/*! exports provided: HELP_MAP, HELP_ID_CONSTANTS, DEFAULT_HELP_ID, HELP_INDEX_PAGE_PATH, HOSTED_HELP_COMMAND, HOSTED_HELP_URL */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HELP_MAP", function() { return HELP_MAP; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HELP_ID_CONSTANTS", function() { return HELP_ID_CONSTANTS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_HELP_ID", function() { return DEFAULT_HELP_ID; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HELP_INDEX_PAGE_PATH", function() { return HELP_INDEX_PAGE_PATH; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HOSTED_HELP_COMMAND", function() { return HOSTED_HELP_COMMAND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HOSTED_HELP_URL", function() { return HOSTED_HELP_URL; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

/*
    HELP_MAP maps the helpId to its corresponding view path in online-help.
    You need to connect with tech pubs team for getting the helpId and its path.
 */
var HELP_MAP = {
    8007: 'New_Plans_Tab/Components_of_the_New_Plans_Tab.htm',
    8008: 'New_Plans_Tab/About_the_Plan_Properties_View.htm',
    8009: 'New_Plans_Tab/About_the_Plan_Design_View.htm',
    8010: 'New_Plans_Tab/About_the_Countries_View.htm',
    8011: 'New_Plans_Tab/About_the_Rate_Adjustments_View.htm',
    8012: 'New_Plans_Tab/About_the_Reports_View.htm',
    8014: 'New_Plans_Tab/Defining_Percent_Site_Initiation_Schedule.htm',
    8015: 'New_Plans_Tab/Defining_Custom_Site_Initiation_Schedule.htm'
};
/*
    HELP_ID_CONSTANTS maps the helpId constant to its corresponding helpId
 */
var HELP_ID_CONSTANTS = {
    NEW_PLANS_TAB_VIEW: 8007,
    PLAN_PROPERTIES_VIEW: 8008,
    PLAN_DESIGN_VIEW: 8009,
    COUNTRIES_VIEW: 8010,
    RATE_ADJUSTMENTS_VIEW: 8011,
    REPORTS_VIEW: 8012,
    PERCENT_SI_VIEW: 8014,
    CUSTOM_SI_VIEW: 8015,
    STUDY_ENROLLMENT_OVERVIEW_VIEW: 8016,
    STUDY_MILESTONES_VIEW: 8017,
    STUDY_REPORTS_VIEW: 8018,
    SITE_ENROLLMENT_DETAILS: 7000,
    SITE_SCORECARD: 7002,
    SITE_DATA_MANAGMENT: 7003,
    // TODO : Country team will change the later after discussing with Tejas
    COUNTRY_PERFORMANCE_VIEW: 6000,
    COHORT_PERFORMANCE_VIEW: 6000,
    COHORT_PERFORMANCE_CHART: 6000
};
var DEFAULT_HELP_ID = 8007;
var HELP_INDEX_PAGE_PATH = 'online-help/index.htm#t=';
var HOSTED_HELP_COMMAND = 'HostedHelp';
var HOSTED_HELP_URL = window.location.origin + "/dv/StudyOptimizer/hostedhelp";


/***/ }),

/***/ "../common-library/src/lib/utils/http-action-type.enum.ts":
/*!****************************************************************!*\
  !*** ../common-library/src/lib/utils/http-action-type.enum.ts ***!
  \****************************************************************/
/*! exports provided: HttpActionType */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HttpActionType", function() { return HttpActionType; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

/**
 * Http action type
 */
var HttpActionType;
(function (HttpActionType) {
    HttpActionType["get"] = "Get";
    HttpActionType["post"] = "Post";
    HttpActionType["delete"] = "Delete";
    HttpActionType["put"] = "Put";
})(HttpActionType || (HttpActionType = {}));


/***/ }),

/***/ "../common-library/src/lib/utils/index.enum.ts":
/*!*****************************************************!*\
  !*** ../common-library/src/lib/utils/index.enum.ts ***!
  \*****************************************************/
/*! exports provided: Index */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Index", function() { return Index; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

var Index;
(function (Index) {
    Index[Index["FIRST"] = 0] = "FIRST";
    Index[Index["SECOND"] = 1] = "SECOND";
    Index[Index["THIRD"] = 2] = "THIRD";
    Index[Index["FOURTH"] = 3] = "FOURTH";
})(Index || (Index = {}));


/***/ }),

/***/ "../common-library/src/lib/utils/service-constant.ts":
/*!***********************************************************!*\
  !*** ../common-library/src/lib/utils/service-constant.ts ***!
  \***********************************************************/
/*! exports provided: COMMON, BASE_TERMS_PARAMS, LOCALE_APP_TERMS_PARAMS, LOGOUT_PARAMS, LOGIN_PARAMS, REPORTING_PERIOD_CONST, BASE_HREF, DEBOUNCE_TIME, DISPATCH_URL, LOGGING_SERVLET_URL, VALID_DATE_FORMATS, DIALOG_CONFIG, ALERT_TYPE, CUSTOM_ERROR_CODES, INDICATOR, DATE_FORMAT */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMMON", function() { return COMMON; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BASE_TERMS_PARAMS", function() { return BASE_TERMS_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOCALE_APP_TERMS_PARAMS", function() { return LOCALE_APP_TERMS_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOGOUT_PARAMS", function() { return LOGOUT_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOGIN_PARAMS", function() { return LOGIN_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "REPORTING_PERIOD_CONST", function() { return REPORTING_PERIOD_CONST; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "BASE_HREF", function() { return BASE_HREF; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEBOUNCE_TIME", function() { return DEBOUNCE_TIME; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DISPATCH_URL", function() { return DISPATCH_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LOGGING_SERVLET_URL", function() { return LOGGING_SERVLET_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "VALID_DATE_FORMATS", function() { return VALID_DATE_FORMATS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DIALOG_CONFIG", function() { return DIALOG_CONFIG; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ALERT_TYPE", function() { return ALERT_TYPE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CUSTOM_ERROR_CODES", function() { return CUSTOM_ERROR_CODES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "INDICATOR", function() { return INDICATOR; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DATE_FORMAT", function() { return DATE_FORMAT; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

var COMMON = {
    RESULT_OK: 'OK',
    RESULT_ERROR: 'ERROR'
};
var BASE_TERMS_PARAMS = {
    commandName: 'GetTerms',
    category: {
        category: 'terms'
    }
};
var LOCALE_APP_TERMS_PARAMS = {
    commandName: 'GetTerms',
    category: {
        category: 'application'
    }
};
var LOGOUT_PARAMS = {
    commandName: 'Logout'
};
var LOGIN_PARAMS = {
    commandName: 'GetTerms',
    category: {
        category: 'login'
    }
};
var REPORTING_PERIOD_CONST = {
    MONTH: 'MONTH',
    WEEK: 'WEEK',
    YEAR: 'YEAR',
    QUARTER: 'QUARTER',
    DAILY: 'DAY'
};
var BASE_HREF = 'dv/StudyOptimizer';
var DEBOUNCE_TIME = 750;
var DISPATCH_URL = window.location.origin + "/dv/StudyOptimizer/dispatch";
var LOGGING_SERVLET_URL = window.location.origin + "/dv/StudyOptimizer/loggingServlet";
var VALID_DATE_FORMATS = [
    'MM-DD-YYYY',
    'MM/DD/YYYY',
    'YYYY-MM-DD',
    'YYYY/MM/DD',
    'DD-MMM-YYYY',
    'DD/MMM/YYYY',
    'DDMMMYYYY',
    'YYYY-MMM-DD',
    'YYYY/MMM/DD',
    'MMM-DD-YYYY',
    'MMM/DD/YYYY'
];
var DIALOG_CONFIG = {
    LOGOUT: {
        ID: 'LogoutDialog',
        WIDTH: '25%',
        PANEL_CLASS: 'logout-dialog'
    },
    ABOUT: {
        ID: 'AboutDialog',
        WIDTH: '50%',
        PANEL_CLASS: 'about-dialog'
    },
    PASSWORD: {
        ID: 'PasswordDialog',
        WIDTH: '50%',
        PANEL_CLASS: 'password-dialog'
    },
    CONFIRM_UNSAVED_DATA: {
        WIDTH: '310px',
        HEIGHT: '190',
        PANEL_CLASS: 'unsaved-data-confirmation-dialog'
    },
    DELETE_PLAN: {
        ID: 'DeletePlanDialog',
        WIDTH: '310px',
        HEIGHT: '180px',
        PANEL_CLASS: 'delete-plan-confirmation-dialog'
    },
};
var ALERT_TYPE = {
    CancelLabel: 'CancelLabel',
    OkLabel: 'OkLabel',
    OK: 'OK',
    YesLabel: 'YesLabel',
    NoLabel: 'NoLabel'
};
var CUSTOM_ERROR_CODES = {
    FSI_REQUIRED_FOR_FSS: {
        error: 'FSIRequiredForFSS',
        message: 'NonEmptyField'
    },
    REQUIRED: {
        error: 'required',
        message: 'NonEmptyField'
    },
    MIN: {
        error: 'min',
        message: 'minNumExceedError'
    },
    MAX: {
        error: 'max',
        message: 'maxNumExceedError'
    },
    MAT_DATEPICKER_PARSE: {
        error: 'matDatepickerParse',
        message: 'DateFormatIncorrect'
    },
    DAYS_TO_SI_AFTER_ARTB: {
        error: 'daysToSIAfterARTB',
        message: 'SIDateError'
    },
    ARTB_LT_EQ_FSI: {
        error: 'ARTB_LT_EQ_FSI',
        message: 'ARTblteqFSI'
    },
    ARTB__LT_EQ_FSS: {
        error: 'ARTB__LT_EQ_FSS',
        message: 'ARTblteqFSS'
    },
    FSI_GT_TLSS: {
        error: 'FSI_GT_TLSS',
        message: 'FSIgtTLSS'
    },
    FSILT_ERROR: {
        error: 'FSILT_ERROR',
        message: 'FSILTError'
    },
    DEPENDENCY_ERROR: {
        error: 'DEPENDENCY_ERROR',
        message: 'dependencyError'
    }
};
var INDICATOR = {
    INSERT: 'I',
    UPDATE: 'U',
    DELETE: 'D'
};
var DATE_FORMAT = {
    NOTE_API_DATE_FORMAT: 'MMM-DD-YYYY HH:MM:SS',
    NOTE_API_DATE_FORMAT_SMALL: 'MMM-DD-YYYY HH:mm:ss',
    SERVER_DATE_FORMAT: 'YYYY-MM-DD',
    MONTH_DATE_FORMAT: 'DD-MMM-YYYY'
};


/***/ }),

/***/ "../common-library/src/lib/utils/string-util.ts":
/*!******************************************************!*\
  !*** ../common-library/src/lib/utils/string-util.ts ***!
  \******************************************************/
/*! exports provided: StringUtil */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "StringUtil", function() { return StringUtil; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

/**
 * String util
 */
var StringUtil = /** @class */ (function () {
    function StringUtil() {
    }
    /**
     * Escapes html
     * @param text
     * @returns html
     */
    StringUtil.escapeHTML = function (text) {
        if (undefined === text || null === text) {
            throw new Error('text should be defined');
        }
        if (typeof text !== 'string') {
            throw new Error('text should be a string');
        }
        var replacements = {
            '<': '&lt;',
            '>': '&gt;',
            '&': '&amp;',
            '\"': '&quot;',
            '\'': '&apos;'
        };
        var result = text.replace(/[<>&"']/g, function (character) {
            return replacements[character];
        });
        return result;
    };
    /**
     * Interpolates arguments into string
     * for e.g. if str = test{0} and args=['abc']
     * the method will return string 'testabc'
     * @param str
     * @param args
     * @returns interpolate
     */
    StringUtil.interpolate = function (str, args) {
        if (undefined === str || null === str) {
            throw new Error('str should be defined');
        }
        if (typeof str !== 'string') {
            throw new Error('str should be a string');
        }
        if (undefined === args || null === args) {
            throw new Error('args should be defined');
        }
        if (!(args instanceof Array)) {
            throw new Error('args should be an array');
        }
        if (args.length === 0) {
            return str;
        }
        var result = str.replace(/(\{([0-9])\})/g, function (match, p1, idx) {
            return args[idx];
        });
        return result;
    };
    /**
     * Converts a string into CamelCase
     *
     * @param s
     * @returns string
     * @memberof AppUtil
     */
    StringUtil.camelize = function (s) {
        if (undefined === s || null === s) {
            throw new Error('s should be defined');
        }
        var ret = '';
        s = s.toLowerCase();
        var arr = s.split(' ');
        arr = arr.map(function (a) {
            var regex = /(?:^|[-_])(\w)/g;
            return a.replace(regex, function (stripped, letter) {
                return letter ? letter.toUpperCase() : '';
            });
        });
        ret = arr.join(' ');
        return ret;
    };
    StringUtil.substitute = function (str, args) {
        var result = str.replace(/(\{([0-9])\})/g, function (match, p1, idx) {
            return args[idx];
        });
        return result;
    };
    return StringUtil;
}());



/***/ }),

/***/ "../common-library/src/public_api.ts":
/*!*******************************************!*\
  !*** ../common-library/src/public_api.ts ***!
  \*******************************************/
/*! exports provided: ConfirmationDialogComponent, DisplayBannerComponent, NotesComponent, CommonLibraryModule, BaseConnectionService, BasePayloadCommandService, PayloadCommandService, DataService, BaseTermsService, ErrorTermsService, LocaleAppResourcesService, LoginTermsService, ServerStatusService, UserIdleService, ConfigurationService, DependencyManagerService, ErrorTermsStoreService, LogoutService, ResetPasswordService, PCEService, CacheStoreManagerService, EncryptionService, SpinnerService, DialogService, ApplicationError, UserIdleConfig, ListItem, UserProfile, AppWindow, CtosWindow, AppBootstrap, CryptoJSEncryption, HttpVerbs, APIEndPoints, AppUtil, StringUtil, COMMON, BASE_TERMS_PARAMS, LOCALE_APP_TERMS_PARAMS, LOGOUT_PARAMS, LOGIN_PARAMS, REPORTING_PERIOD_CONST, BASE_HREF, DEBOUNCE_TIME, DISPATCH_URL, LOGGING_SERVLET_URL, VALID_DATE_FORMATS, DIALOG_CONFIG, ALERT_TYPE, CUSTOM_ERROR_CODES, INDICATOR, DATE_FORMAT, HttpActionType, CacheKey, CommonRoutes, CacheType, StoreType, EncryptionAction, HELP_MAP, HELP_ID_CONSTANTS, DEFAULT_HELP_ID, HELP_INDEX_PAGE_PATH, HOSTED_HELP_COMMAND, HOSTED_HELP_URL, ComponentsModule, BreadcrumbService, InfoComponent, NestedDropdownComponent, ConfirmEqualValidatorDirective, SignedDecimalDirective, SignedIntegerDirective, LabelControlDirective, CommonAngularMaterialModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _lib_common_library_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/common-library.module */ "../common-library/src/lib/common-library.module.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CommonLibraryModule", function() { return _lib_common_library_module__WEBPACK_IMPORTED_MODULE_1__["CommonLibraryModule"]; });

/* harmony import */ var _lib_services_base_connection_service__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/services/base-connection.service */ "../common-library/src/lib/services/base-connection.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseConnectionService", function() { return _lib_services_base_connection_service__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"]; });

/* harmony import */ var _lib_services_base_payload_command_service__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/services/base-payload-command.service */ "../common-library/src/lib/services/base-payload-command.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BasePayloadCommandService", function() { return _lib_services_base_payload_command_service__WEBPACK_IMPORTED_MODULE_3__["BasePayloadCommandService"]; });

/* harmony import */ var _lib_services_payload_command_service__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/services/payload-command.service */ "../common-library/src/lib/services/payload-command.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PayloadCommandService", function() { return _lib_services_payload_command_service__WEBPACK_IMPORTED_MODULE_4__["PayloadCommandService"]; });

/* harmony import */ var _lib_services_data_service__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/services/data.service */ "../common-library/src/lib/services/data.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DataService", function() { return _lib_services_data_service__WEBPACK_IMPORTED_MODULE_5__["DataService"]; });

/* harmony import */ var _lib_services_base_terms_service__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/services/base-terms.service */ "../common-library/src/lib/services/base-terms.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BaseTermsService", function() { return _lib_services_base_terms_service__WEBPACK_IMPORTED_MODULE_6__["BaseTermsService"]; });

/* harmony import */ var _lib_services_error_terms_service__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/services/error-terms.service */ "../common-library/src/lib/services/error-terms.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ErrorTermsService", function() { return _lib_services_error_terms_service__WEBPACK_IMPORTED_MODULE_7__["ErrorTermsService"]; });

/* harmony import */ var _lib_services_locale_app_resources_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/services/locale-app-resources.service */ "../common-library/src/lib/services/locale-app-resources.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LocaleAppResourcesService", function() { return _lib_services_locale_app_resources_service__WEBPACK_IMPORTED_MODULE_8__["LocaleAppResourcesService"]; });

/* harmony import */ var _lib_services_login_terms_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/services/login-terms.service */ "../common-library/src/lib/services/login-terms.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LoginTermsService", function() { return _lib_services_login_terms_service__WEBPACK_IMPORTED_MODULE_9__["LoginTermsService"]; });

/* harmony import */ var _lib_services_server_status_service__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lib/services/server-status.service */ "../common-library/src/lib/services/server-status.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ServerStatusService", function() { return _lib_services_server_status_service__WEBPACK_IMPORTED_MODULE_10__["ServerStatusService"]; });

/* harmony import */ var _lib_services_user_idle_service__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lib/services/user-idle.service */ "../common-library/src/lib/services/user-idle.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UserIdleService", function() { return _lib_services_user_idle_service__WEBPACK_IMPORTED_MODULE_11__["UserIdleService"]; });

/* harmony import */ var _lib_services_configuration_service__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./lib/services/configuration.service */ "../common-library/src/lib/services/configuration.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConfigurationService", function() { return _lib_services_configuration_service__WEBPACK_IMPORTED_MODULE_12__["ConfigurationService"]; });

/* harmony import */ var _lib_services_dependency_manager_service__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./lib/services/dependency-manager.service */ "../common-library/src/lib/services/dependency-manager.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DependencyManagerService", function() { return _lib_services_dependency_manager_service__WEBPACK_IMPORTED_MODULE_13__["DependencyManagerService"]; });

/* harmony import */ var _lib_services_error_terms_store_service__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./lib/services/error-terms-store.service */ "../common-library/src/lib/services/error-terms-store.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ErrorTermsStoreService", function() { return _lib_services_error_terms_store_service__WEBPACK_IMPORTED_MODULE_14__["ErrorTermsStoreService"]; });

/* harmony import */ var _lib_services_logout_service__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./lib/services/logout.service */ "../common-library/src/lib/services/logout.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LogoutService", function() { return _lib_services_logout_service__WEBPACK_IMPORTED_MODULE_15__["LogoutService"]; });

/* harmony import */ var _lib_services_reset_password_service__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./lib/services/reset-password.service */ "../common-library/src/lib/services/reset-password.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ResetPasswordService", function() { return _lib_services_reset_password_service__WEBPACK_IMPORTED_MODULE_16__["ResetPasswordService"]; });

/* harmony import */ var _lib_services_pce_service__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./lib/services/pce.service */ "../common-library/src/lib/services/pce.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "PCEService", function() { return _lib_services_pce_service__WEBPACK_IMPORTED_MODULE_17__["PCEService"]; });

/* harmony import */ var _lib_services_cache_cache_store_manager_service__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./lib/services/cache/cache-store-manager.service */ "../common-library/src/lib/services/cache/cache-store-manager.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CacheStoreManagerService", function() { return _lib_services_cache_cache_store_manager_service__WEBPACK_IMPORTED_MODULE_18__["CacheStoreManagerService"]; });

/* harmony import */ var _lib_services_cache_encryption_service__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./lib/services/cache/encryption.service */ "../common-library/src/lib/services/cache/encryption.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EncryptionService", function() { return _lib_services_cache_encryption_service__WEBPACK_IMPORTED_MODULE_19__["EncryptionService"]; });

/* harmony import */ var _lib_services_spinner_service__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./lib/services/spinner.service */ "../common-library/src/lib/services/spinner.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SpinnerService", function() { return _lib_services_spinner_service__WEBPACK_IMPORTED_MODULE_20__["SpinnerService"]; });

/* harmony import */ var _lib_services_dialog_service__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./lib/services/dialog.service */ "../common-library/src/lib/services/dialog.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DialogService", function() { return _lib_services_dialog_service__WEBPACK_IMPORTED_MODULE_21__["DialogService"]; });

/* harmony import */ var _lib_models_ApplicationError__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./lib/models/ApplicationError */ "../common-library/src/lib/models/ApplicationError.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ApplicationError", function() { return _lib_models_ApplicationError__WEBPACK_IMPORTED_MODULE_22__["ApplicationError"]; });

/* harmony import */ var _lib_models_user_idle_config__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./lib/models/user-idle.config */ "../common-library/src/lib/models/user-idle.config.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UserIdleConfig", function() { return _lib_models_user_idle_config__WEBPACK_IMPORTED_MODULE_23__["UserIdleConfig"]; });

/* harmony import */ var _lib_models_list_item__WEBPACK_IMPORTED_MODULE_24__ = __webpack_require__(/*! ./lib/models/list-item */ "../common-library/src/lib/models/list-item.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ListItem", function() { return _lib_models_list_item__WEBPACK_IMPORTED_MODULE_24__["ListItem"]; });

/* harmony import */ var _lib_models_user_profile__WEBPACK_IMPORTED_MODULE_25__ = __webpack_require__(/*! ./lib/models/user-profile */ "../common-library/src/lib/models/user-profile.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "UserProfile", function() { return _lib_models_user_profile__WEBPACK_IMPORTED_MODULE_25__["UserProfile"]; });

/* harmony import */ var _lib_models_appWindow__WEBPACK_IMPORTED_MODULE_26__ = __webpack_require__(/*! ./lib/models/appWindow */ "../common-library/src/lib/models/appWindow.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AppWindow", function() { return _lib_models_appWindow__WEBPACK_IMPORTED_MODULE_26__["AppWindow"]; });

/* harmony import */ var _lib_models_ctos_window__WEBPACK_IMPORTED_MODULE_27__ = __webpack_require__(/*! ./lib/models/ctos-window */ "../common-library/src/lib/models/ctos-window.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CtosWindow", function() { return _lib_models_ctos_window__WEBPACK_IMPORTED_MODULE_27__["CtosWindow"]; });

/* harmony import */ var _lib_models_app_bootstrap__WEBPACK_IMPORTED_MODULE_28__ = __webpack_require__(/*! ./lib/models/app-bootstrap */ "../common-library/src/lib/models/app-bootstrap.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AppBootstrap", function() { return _lib_models_app_bootstrap__WEBPACK_IMPORTED_MODULE_28__["AppBootstrap"]; });

/* harmony import */ var _lib_models_cache_cryptoJS_encryption__WEBPACK_IMPORTED_MODULE_29__ = __webpack_require__(/*! ./lib/models/cache/cryptoJS-encryption */ "../common-library/src/lib/models/cache/cryptoJS-encryption.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CryptoJSEncryption", function() { return _lib_models_cache_cryptoJS_encryption__WEBPACK_IMPORTED_MODULE_29__["CryptoJSEncryption"]; });

/* harmony import */ var _lib_models_http_verbs__WEBPACK_IMPORTED_MODULE_30__ = __webpack_require__(/*! ./lib/models/http-verbs */ "../common-library/src/lib/models/http-verbs.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HttpVerbs", function() { return _lib_models_http_verbs__WEBPACK_IMPORTED_MODULE_30__["HttpVerbs"]; });

/* harmony import */ var _lib_models_api_end_points_enum__WEBPACK_IMPORTED_MODULE_31__ = __webpack_require__(/*! ./lib/models/api-end-points.enum */ "../common-library/src/lib/models/api-end-points.enum.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "APIEndPoints", function() { return _lib_models_api_end_points_enum__WEBPACK_IMPORTED_MODULE_31__["APIEndPoints"]; });

/* harmony import */ var _lib_utils_AppUtil__WEBPACK_IMPORTED_MODULE_32__ = __webpack_require__(/*! ./lib/utils/AppUtil */ "../common-library/src/lib/utils/AppUtil.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "AppUtil", function() { return _lib_utils_AppUtil__WEBPACK_IMPORTED_MODULE_32__["AppUtil"]; });

/* harmony import */ var _lib_utils_string_util__WEBPACK_IMPORTED_MODULE_33__ = __webpack_require__(/*! ./lib/utils/string-util */ "../common-library/src/lib/utils/string-util.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StringUtil", function() { return _lib_utils_string_util__WEBPACK_IMPORTED_MODULE_33__["StringUtil"]; });

/* harmony import */ var _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__ = __webpack_require__(/*! ./lib/utils/service-constant */ "../common-library/src/lib/utils/service-constant.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "COMMON", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["COMMON"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BASE_TERMS_PARAMS", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["BASE_TERMS_PARAMS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LOCALE_APP_TERMS_PARAMS", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["LOCALE_APP_TERMS_PARAMS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LOGOUT_PARAMS", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["LOGOUT_PARAMS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LOGIN_PARAMS", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["LOGIN_PARAMS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "REPORTING_PERIOD_CONST", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["REPORTING_PERIOD_CONST"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BASE_HREF", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["BASE_HREF"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DEBOUNCE_TIME", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["DEBOUNCE_TIME"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DISPATCH_URL", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["DISPATCH_URL"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LOGGING_SERVLET_URL", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["LOGGING_SERVLET_URL"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "VALID_DATE_FORMATS", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["VALID_DATE_FORMATS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DIALOG_CONFIG", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["DIALOG_CONFIG"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ALERT_TYPE", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["ALERT_TYPE"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CUSTOM_ERROR_CODES", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["CUSTOM_ERROR_CODES"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "INDICATOR", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["INDICATOR"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DATE_FORMAT", function() { return _lib_utils_service_constant__WEBPACK_IMPORTED_MODULE_34__["DATE_FORMAT"]; });

/* harmony import */ var _lib_utils_http_action_type_enum__WEBPACK_IMPORTED_MODULE_35__ = __webpack_require__(/*! ./lib/utils/http-action-type.enum */ "../common-library/src/lib/utils/http-action-type.enum.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HttpActionType", function() { return _lib_utils_http_action_type_enum__WEBPACK_IMPORTED_MODULE_35__["HttpActionType"]; });

/* harmony import */ var _lib_utils_cache_key_enum__WEBPACK_IMPORTED_MODULE_36__ = __webpack_require__(/*! ./lib/utils/cache-key.enum */ "../common-library/src/lib/utils/cache-key.enum.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CacheKey", function() { return _lib_utils_cache_key_enum__WEBPACK_IMPORTED_MODULE_36__["CacheKey"]; });

/* harmony import */ var _lib_utils_common_routes__WEBPACK_IMPORTED_MODULE_37__ = __webpack_require__(/*! ./lib/utils/common-routes */ "../common-library/src/lib/utils/common-routes.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CommonRoutes", function() { return _lib_utils_common_routes__WEBPACK_IMPORTED_MODULE_37__["CommonRoutes"]; });

/* harmony import */ var _lib_utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_38__ = __webpack_require__(/*! ./lib/utils/cache/cache-type.enum */ "../common-library/src/lib/utils/cache/cache-type.enum.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CacheType", function() { return _lib_utils_cache_cache_type_enum__WEBPACK_IMPORTED_MODULE_38__["CacheType"]; });

/* harmony import */ var _lib_utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_39__ = __webpack_require__(/*! ./lib/utils/cache/store-type.enum */ "../common-library/src/lib/utils/cache/store-type.enum.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "StoreType", function() { return _lib_utils_cache_store_type_enum__WEBPACK_IMPORTED_MODULE_39__["StoreType"]; });

/* harmony import */ var _lib_utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_40__ = __webpack_require__(/*! ./lib/utils/cache/encryption-action.enum */ "../common-library/src/lib/utils/cache/encryption-action.enum.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "EncryptionAction", function() { return _lib_utils_cache_encryption_action_enum__WEBPACK_IMPORTED_MODULE_40__["EncryptionAction"]; });

/* harmony import */ var _lib_utils_help_constants__WEBPACK_IMPORTED_MODULE_41__ = __webpack_require__(/*! ./lib/utils/help-constants */ "../common-library/src/lib/utils/help-constants.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HELP_MAP", function() { return _lib_utils_help_constants__WEBPACK_IMPORTED_MODULE_41__["HELP_MAP"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HELP_ID_CONSTANTS", function() { return _lib_utils_help_constants__WEBPACK_IMPORTED_MODULE_41__["HELP_ID_CONSTANTS"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_HELP_ID", function() { return _lib_utils_help_constants__WEBPACK_IMPORTED_MODULE_41__["DEFAULT_HELP_ID"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HELP_INDEX_PAGE_PATH", function() { return _lib_utils_help_constants__WEBPACK_IMPORTED_MODULE_41__["HELP_INDEX_PAGE_PATH"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HOSTED_HELP_COMMAND", function() { return _lib_utils_help_constants__WEBPACK_IMPORTED_MODULE_41__["HOSTED_HELP_COMMAND"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "HOSTED_HELP_URL", function() { return _lib_utils_help_constants__WEBPACK_IMPORTED_MODULE_41__["HOSTED_HELP_URL"]; });

/* harmony import */ var _lib_components_components_module__WEBPACK_IMPORTED_MODULE_42__ = __webpack_require__(/*! ./lib/components/components.module */ "../common-library/src/lib/components/components.module.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ComponentsModule", function() { return _lib_components_components_module__WEBPACK_IMPORTED_MODULE_42__["ComponentsModule"]; });

/* harmony import */ var _lib_components_breadcrumb_breadcrumb_service__WEBPACK_IMPORTED_MODULE_43__ = __webpack_require__(/*! ./lib/components/breadcrumb/breadcrumb.service */ "../common-library/src/lib/components/breadcrumb/breadcrumb.service.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "BreadcrumbService", function() { return _lib_components_breadcrumb_breadcrumb_service__WEBPACK_IMPORTED_MODULE_43__["BreadcrumbService"]; });

/* harmony import */ var _lib_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_44__ = __webpack_require__(/*! ./lib/components/confirmation-dialog/confirmation-dialog.component */ "../common-library/src/lib/components/confirmation-dialog/confirmation-dialog.component.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConfirmationDialogComponent", function() { return _lib_components_confirmation_dialog_confirmation_dialog_component__WEBPACK_IMPORTED_MODULE_44__["ConfirmationDialogComponent"]; });

/* harmony import */ var _lib_components_display_banner_display_banner_component__WEBPACK_IMPORTED_MODULE_45__ = __webpack_require__(/*! ./lib/components/display-banner/display-banner.component */ "../common-library/src/lib/components/display-banner/display-banner.component.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "DisplayBannerComponent", function() { return _lib_components_display_banner_display_banner_component__WEBPACK_IMPORTED_MODULE_45__["DisplayBannerComponent"]; });

/* harmony import */ var _lib_components_info_info_component__WEBPACK_IMPORTED_MODULE_46__ = __webpack_require__(/*! ./lib/components/info/info.component */ "../common-library/src/lib/components/info/info.component.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "InfoComponent", function() { return _lib_components_info_info_component__WEBPACK_IMPORTED_MODULE_46__["InfoComponent"]; });

/* harmony import */ var _lib_components_notes_notes_component__WEBPACK_IMPORTED_MODULE_47__ = __webpack_require__(/*! ./lib/components/notes/notes.component */ "../common-library/src/lib/components/notes/notes.component.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NotesComponent", function() { return _lib_components_notes_notes_component__WEBPACK_IMPORTED_MODULE_47__["NotesComponent"]; });

/* harmony import */ var _lib_components_nested_dropdown_nested_dropdown_component__WEBPACK_IMPORTED_MODULE_48__ = __webpack_require__(/*! ./lib/components/nested-dropdown/nested-dropdown.component */ "../common-library/src/lib/components/nested-dropdown/nested-dropdown.component.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "NestedDropdownComponent", function() { return _lib_components_nested_dropdown_nested_dropdown_component__WEBPACK_IMPORTED_MODULE_48__["NestedDropdownComponent"]; });

/* harmony import */ var _lib_directives_confirm_equal_validator_directive__WEBPACK_IMPORTED_MODULE_49__ = __webpack_require__(/*! ./lib/directives/confirm-equal-validator.directive */ "../common-library/src/lib/directives/confirm-equal-validator.directive.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ConfirmEqualValidatorDirective", function() { return _lib_directives_confirm_equal_validator_directive__WEBPACK_IMPORTED_MODULE_49__["ConfirmEqualValidatorDirective"]; });

/* harmony import */ var _lib_directives_signed_decimal_directive__WEBPACK_IMPORTED_MODULE_50__ = __webpack_require__(/*! ./lib/directives/signed-decimal.directive */ "../common-library/src/lib/directives/signed-decimal.directive.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SignedDecimalDirective", function() { return _lib_directives_signed_decimal_directive__WEBPACK_IMPORTED_MODULE_50__["SignedDecimalDirective"]; });

/* harmony import */ var _lib_directives_signed_integer_directive__WEBPACK_IMPORTED_MODULE_51__ = __webpack_require__(/*! ./lib/directives/signed-integer.directive */ "../common-library/src/lib/directives/signed-integer.directive.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "SignedIntegerDirective", function() { return _lib_directives_signed_integer_directive__WEBPACK_IMPORTED_MODULE_51__["SignedIntegerDirective"]; });

/* harmony import */ var _lib_directives_label_control_directive__WEBPACK_IMPORTED_MODULE_52__ = __webpack_require__(/*! ./lib/directives/label-control.directive */ "../common-library/src/lib/directives/label-control.directive.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "LabelControlDirective", function() { return _lib_directives_label_control_directive__WEBPACK_IMPORTED_MODULE_52__["LabelControlDirective"]; });

/* harmony import */ var _lib_common_angular_material_common_angular_material_module__WEBPACK_IMPORTED_MODULE_53__ = __webpack_require__(/*! ./lib/common-angular-material/common-angular-material.module */ "../common-library/src/lib/common-angular-material/common-angular-material.module.ts");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "CommonAngularMaterialModule", function() { return _lib_common_angular_material_common_angular_material_module__WEBPACK_IMPORTED_MODULE_53__["CommonAngularMaterialModule"]; });

/*
 * Public API Surface of common-library
 */


// SERVICES




















// MODELS










// UTILS










// COMPONENTS







// DIRECTIVES




// MODULES



/***/ }),

/***/ "./$$_lazy_route_resource lazy recursive":
/*!******************************************************!*\
  !*** ./$$_lazy_route_resource lazy namespace object ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

function webpackEmptyAsyncContext(req) {
	// Here Promise.resolve().then() is used instead of new Promise() to prevent
	// uncaught exception popping up in devtools
	return Promise.resolve().then(function() {
		var e = new Error("Cannot find module '" + req + "'");
		e.code = 'MODULE_NOT_FOUND';
		throw e;
	});
}
webpackEmptyAsyncContext.keys = function() { return []; };
webpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;
module.exports = webpackEmptyAsyncContext;
webpackEmptyAsyncContext.id = "./$$_lazy_route_resource lazy recursive";

/***/ }),

/***/ "./src/app/app-routing.module.ts":
/*!***************************************!*\
  !*** ./src/app/app-routing.module.ts ***!
  \***************************************/
/*! exports provided: AppRoutingModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppRoutingModule", function() { return AppRoutingModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var _custom_preload_strategy__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./custom-preload-strategy */ "./src/app/custom-preload-strategy.ts");
/* harmony import */ var environments_environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! environments/environment */ "../../environments/environment.ts");
/* harmony import */ var so_common_library__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! so-common-library */ "../../dist/so-common-library/fesm5/so-common-library.js");




var routes = [];


var appRoutes = [
    {
        path: 'sites',
        // loadChildren: '../app/study/study.module#StudyModule',
        loadChildren: function () { return __webpack_require__.e(/*! import() | app-sites-sites-module */ "app-sites-sites-module").then(__webpack_require__.bind(null, /*! ../app/sites/sites.module */ "./src/app/sites/sites.module.ts")).then(function (m) { return m.SitesModule; }); },
        canActivate: [so_common_library__WEBPACK_IMPORTED_MODULE_5__["AuthGuard"]],
        data: { 'loginUrl': environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].login_url, 'moduleId': 5 }
    },
    {
        path: '', redirectTo: 'sites', pathMatch: 'full', canActivate: [so_common_library__WEBPACK_IMPORTED_MODULE_5__["AuthGuard"]],
        data: { 'loginUrl': environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].login_url, 'moduleId': 5 }
    }
];
var AppRoutingModule = /** @class */ (function () {
    function AppRoutingModule() {
    }
    AppRoutingModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["NgModule"])({
            // imports: [RouterModule.forRoot(routes)],
            imports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"].forRoot(appRoutes, { paramsInheritanceStrategy: 'always', preloadingStrategy: _custom_preload_strategy__WEBPACK_IMPORTED_MODULE_3__["CustomPreloadStrategy"] })],
            exports: [_angular_router__WEBPACK_IMPORTED_MODULE_2__["RouterModule"]],
            providers: [_custom_preload_strategy__WEBPACK_IMPORTED_MODULE_3__["CustomPreloadStrategy"]]
        })
    ], AppRoutingModule);
    return AppRoutingModule;
}());



/***/ }),

/***/ "./src/app/app.component.scss":
/*!************************************!*\
  !*** ./src/app/app.component.scss ***!
  \************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ("\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJwcm9qZWN0cy9hcHA0L3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIn0= */");

/***/ }),

/***/ "./src/app/app.component.ts":
/*!**********************************!*\
  !*** ./src/app/app.component.ts ***!
  \**********************************/
/*! exports provided: AppComponent */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppComponent", function() { return AppComponent; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_router__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/router */ "../../node_modules/@angular/router/fesm5/router.js");
/* harmony import */ var common_library__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! common-library */ "../../dist/common-library/fesm5/common-library.js");
/* harmony import */ var so_common_library__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! so-common-library */ "../../dist/so-common-library/fesm5/so-common-library.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var _app_constant__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./app.constant */ "./src/app/app.constant.ts");
/* harmony import */ var environments_environment__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! environments/environment */ "../../environments/environment.ts");








var AppComponent = /** @class */ (function () {
    function AppComponent(router, userDataService, windowService) {
        var _a;
        this.router = router;
        this.userDataService = userDataService;
        this.windowService = windowService;
        if (environments_environment__WEBPACK_IMPORTED_MODULE_7__["environment"].production) {
            (_a = this.router.config).unshift.apply(_a, tslib__WEBPACK_IMPORTED_MODULE_0__["__spread"](common_library__WEBPACK_IMPORTED_MODULE_3__["CommonRoutes"].data));
            this.windowService.redirectAsPerParams();
        }
        // this.appBootstrapService.init();
        // this.activityEvents();
    }
    AppComponent.prototype.ngOnInit = function () {
        // Initialize Appcues by identifying current user
        window.Appcues.identify(this.userDataService.getUserId(), {
            name: this.userDataService.getUserName(),
            email: this.userDataService.getUserName(),
            created_at: 1551171156765,
        });
        // Subscribe to router events
        this.router.events.subscribe(function (res) {
            // check for NavigationEnd event to notify Appcues about 'page change'.
            if (res instanceof _angular_router__WEBPACK_IMPORTED_MODULE_2__["NavigationEnd"]) {
                if (window.Appcues) { // casting window as any to avoid, TypeScript compilation error.
                    window.Appcues.page();
                }
            }
        });
        // --- End of Appcues integration code. ---
        // this.userDataService.userIdealWatch();
        // this.userActiveEvents();
    };
    /**
     * Monitor user activity events and store it in user ideal observable
     */
    AppComponent.prototype.activityEvents = function () {
        this.userDataService.userIdeal$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["from"])(Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["merge"])(
        // fromEvent(document, 'keydown'),
        // fromEvent(document, 'keyup'),
        Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["fromEvent"])(document, 'click')));
    };
    /**
     * Monitor user activity events and call keep user alive api call periodically
     */
    AppComponent.prototype.userActiveEvents = function () {
        var _this = this;
        var clicks$ = Object(rxjs__WEBPACK_IMPORTED_MODULE_5__["fromEvent"])(document, 'click');
        clicks$.subscribe(function (e) { return _this.userDataService.keepUserSessionAlive(_app_constant__WEBPACK_IMPORTED_MODULE_6__["COEFFICIENT"]); });
    };
    AppComponent.ctorParameters = function () { return [
        { type: _angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"] },
        { type: so_common_library__WEBPACK_IMPORTED_MODULE_4__["UserDataService"] },
        { type: so_common_library__WEBPACK_IMPORTED_MODULE_4__["WindowService"] }
    ]; };
    AppComponent = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Component"])({
            // tslint:disable-next-line:component-selector
            selector: 'ctos-root',
            template: tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! raw-loader!./app.component.html */ "../../node_modules/raw-loader/dist/cjs.js!./src/app/app.component.html")).default,
            styles: [tslib__WEBPACK_IMPORTED_MODULE_0__["__importDefault"](__webpack_require__(/*! ./app.component.scss */ "./src/app/app.component.scss")).default]
        }),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_router__WEBPACK_IMPORTED_MODULE_2__["Router"],
            so_common_library__WEBPACK_IMPORTED_MODULE_4__["UserDataService"],
            so_common_library__WEBPACK_IMPORTED_MODULE_4__["WindowService"]])
    ], AppComponent);
    return AppComponent;
}());



/***/ }),

/***/ "./src/app/app.constant.ts":
/*!*********************************!*\
  !*** ./src/app/app.constant.ts ***!
  \*********************************/
/*! exports provided: COEFFICIENT, USER_PARAMS, GSK_LOGO_URL, ALERT_CONFIRM_URL, ZERO, PAGE_IDS, SITE_MODULE, COMMAND, PAGES, SELECT_WORLD_WIDE, DEFAULT_SELECTED, WORLD_WIDE_CODE, UNMAPPED_COHORT, NO_ID_IN_SOURCE, MAPPED_COHORT, YES, NO, API_ENDPOINT, GEOGRAPHY_LEVEL, SITE_API_FORKJOIN_SEQ, SITE_DATA_MANAGEMENT_API_FORKJOIN_SEQ, ICON_CLEAR_TEMPLATE, ICON_DONE_TEMPLATE, FILTER_PREFERENCES */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COEFFICIENT", function() { return COEFFICIENT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "USER_PARAMS", function() { return USER_PARAMS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GSK_LOGO_URL", function() { return GSK_LOGO_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ALERT_CONFIRM_URL", function() { return ALERT_CONFIRM_URL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ZERO", function() { return ZERO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGE_IDS", function() { return PAGE_IDS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SITE_MODULE", function() { return SITE_MODULE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "COMMAND", function() { return COMMAND; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "PAGES", function() { return PAGES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SELECT_WORLD_WIDE", function() { return SELECT_WORLD_WIDE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DEFAULT_SELECTED", function() { return DEFAULT_SELECTED; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "WORLD_WIDE_CODE", function() { return WORLD_WIDE_CODE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "UNMAPPED_COHORT", function() { return UNMAPPED_COHORT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NO_ID_IN_SOURCE", function() { return NO_ID_IN_SOURCE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "MAPPED_COHORT", function() { return MAPPED_COHORT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "YES", function() { return YES; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "NO", function() { return NO; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "API_ENDPOINT", function() { return API_ENDPOINT; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "GEOGRAPHY_LEVEL", function() { return GEOGRAPHY_LEVEL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SITE_API_FORKJOIN_SEQ", function() { return SITE_API_FORKJOIN_SEQ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SITE_DATA_MANAGEMENT_API_FORKJOIN_SEQ", function() { return SITE_DATA_MANAGEMENT_API_FORKJOIN_SEQ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ICON_CLEAR_TEMPLATE", function() { return ICON_CLEAR_TEMPLATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ICON_DONE_TEMPLATE", function() { return ICON_DONE_TEMPLATE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FILTER_PREFERENCES", function() { return FILTER_PREFERENCES; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");

var COEFFICIENT = 0.5;
var USER_PARAMS = {
    commandName: 'getUserData',
    app: {
        appType: 'SOMAIN'
    }
};
var GSK_LOGO_URL = 'assets/images/';
var ALERT_CONFIRM_URL = 'assets/images/alertConfirm.png';
var ZERO = 0;
var PAGE_IDS = {
    ENROLLMENT_DETAILS: 'enrollment-details',
    ENROLLMENT_SCORECARD: 'enrollment-scorecard',
    DATA_MANAGEMENT_DETAILS: 'data-management-details'
};
var SITE_MODULE = 'SITES';
var COMMAND = {
    CENTER_SUMMARY: 'getCenterSummary',
    RECRUITMENT_CENTER_LIST: 'getRecruitmentCenterList',
    DM_CENTER_LIST: 'getDMCenterList'
};
var PAGES = {
    ENROLLMENT_DETAILS: 'ENRODET',
    DATA_MANAGEMENT_DETAILS: 'CNTRDM'
};
var SELECT_WORLD_WIDE = 'Worldwide';
var DEFAULT_SELECTED = 'All';
var WORLD_WIDE_CODE = 'WW';
var UNMAPPED_COHORT = 'Unmapped';
var NO_ID_IN_SOURCE = 'No ID in Source';
var MAPPED_COHORT = 'Mapped';
var YES = 'Y';
var NO = 'N';
var API_ENDPOINT = {
    CENTER_SUMMARY: 'center/summary',
    RECRUITMENT_CENTER_LIST: 'center/sitelist',
    DM_CENTER_LIST: 'center/dmcenterlist'
};
var GEOGRAPHY_LEVEL = {
    WORLDWIDE: 'WW',
    COHORT: 'Cohort',
    REGION: 'Region',
    COUNTRY: 'Country',
    SITE: 'Site'
};
var SITE_API_FORKJOIN_SEQ = {
    CENTER_SUMMARY: 0,
    RECRUITMENT_CENTER_LIST: 1,
    STUDY_SUMMARY: 2,
    DM_CENTER_LIST: 3
};
var SITE_DATA_MANAGEMENT_API_FORKJOIN_SEQ = {
    CENTER_SUMMARY: 0,
    DM_CENTER_LIST: 1
};
var ICON_CLEAR_TEMPLATE = '<i class="material-icons" style="color: red;"> clear </i>';
var ICON_DONE_TEMPLATE = '<i class="material-icons" style="color: green;"> done </i>';
var FILTER_PREFERENCES = {
    SITE_FILTER_PREFERENCE: 'sites_filter_preference',
    LASTVISITED_STUDYKEY: 'lastvisitedstudyID',
    GEOGRAPHY: 'geography_key',
    COHORT: 'cohort_key',
    MONITOR: 'monitor_key',
    RANDOMIZATION: 'randomization_key'
};


/***/ }),

/***/ "./src/app/app.module.ts":
/*!*******************************!*\
  !*** ./src/app/app.module.ts ***!
  \*******************************/
/*! exports provided: init, AppModule */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "init", function() { return init; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppModule", function() { return AppModule; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/platform-browser */ "../../node_modules/@angular/platform-browser/fesm5/platform-browser.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "../../node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _app_routing_module__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./app-routing.module */ "./src/app/app-routing.module.ts");
/* harmony import */ var _app_component__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./app.component */ "./src/app/app.component.ts");
/* harmony import */ var _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/platform-browser/animations */ "../../node_modules/@angular/platform-browser/fesm5/animations.js");
/* harmony import */ var so_common_library__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! so-common-library */ "../../dist/so-common-library/fesm5/so-common-library.js");
/* harmony import */ var _app_service__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./app.service */ "./src/app/app.service.ts");
/* harmony import */ var _header_header_service__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./header/header.service */ "./src/app/header/header.service.ts");
/* harmony import */ var _auth_interceptor__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./auth.interceptor */ "./src/app/auth.interceptor.ts");











function init(appService) {
    return function () {
        return appService.load();
    };
}
var AppModule = /** @class */ (function () {
    function AppModule() {
    }
    AppModule = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_3__["NgModule"])({
            declarations: [
                _app_component__WEBPACK_IMPORTED_MODULE_5__["AppComponent"]
            ],
            imports: [
                _app_routing_module__WEBPACK_IMPORTED_MODULE_4__["AppRoutingModule"],
                _angular_platform_browser__WEBPACK_IMPORTED_MODULE_1__["BrowserModule"],
                _angular_platform_browser_animations__WEBPACK_IMPORTED_MODULE_6__["BrowserAnimationsModule"],
                so_common_library__WEBPACK_IMPORTED_MODULE_7__["SoCommonLibraryModule"],
                _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClientModule"]
            ],
            providers: [
                { provide: _angular_core__WEBPACK_IMPORTED_MODULE_3__["ErrorHandler"], useClass: so_common_library__WEBPACK_IMPORTED_MODULE_7__["GlobalErrorHandler"] },
                // {
                //   provide: HTTP_INTERCEPTORS,
                //   useClass: Interceptor,
                //   multi: true
                // },
                {
                    provide: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HTTP_INTERCEPTORS"],
                    useClass: _auth_interceptor__WEBPACK_IMPORTED_MODULE_10__["AuthInterceptor"],
                    multi: true
                },
                {
                    provide: _angular_core__WEBPACK_IMPORTED_MODULE_3__["APP_INITIALIZER"],
                    useFactory: init,
                    deps: [_app_service__WEBPACK_IMPORTED_MODULE_8__["AppService"]],
                    multi: true
                },
                _app_service__WEBPACK_IMPORTED_MODULE_8__["AppService"],
                _header_header_service__WEBPACK_IMPORTED_MODULE_9__["HeaderService"]
            ],
            bootstrap: [_app_component__WEBPACK_IMPORTED_MODULE_5__["AppComponent"]]
        })
    ], AppModule);
    return AppModule;
}());



/***/ }),

/***/ "./src/app/app.service.ts":
/*!********************************!*\
  !*** ./src/app/app.service.ts ***!
  \********************************/
/*! exports provided: AppService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppService", function() { return AppService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var environments_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! environments/environment */ "../../environments/environment.ts");
/* harmony import */ var product_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! product.constants */ "../../product.constants.ts");
/* harmony import */ var so_common_library__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! so-common-library */ "../../dist/so-common-library/fesm5/so-common-library.js");





var AppService = /** @class */ (function () {
    function AppService(bootstrapService) {
        this.bootstrapService = bootstrapService;
    }
    // load() {
    //   const  serverInfo: ServerInfo = {
    //     clientVersion: BUILD_version,
    //     clientBuildID: BUILD_type,
    //     clientBuildDate: BUILD_date
    //   };
    //   return this.bootstrapService.call(environment, serverInfo);
    // }
    AppService.prototype.load = function () {
        var serverInfo = {
            clientVersion: product_constants__WEBPACK_IMPORTED_MODULE_3__["BUILD_version"],
            clientBuildID: product_constants__WEBPACK_IMPORTED_MODULE_3__["BUILD_type"],
            clientBuildDate: product_constants__WEBPACK_IMPORTED_MODULE_3__["BUILD_date"]
        };
        var actionParam = {};
        actionParam.endPoint = true;
        actionParam.prelogin = false;
        return this.bootstrapService.call(environments_environment__WEBPACK_IMPORTED_MODULE_2__["environment"], serverInfo, actionParam);
    };
    AppService.ctorParameters = function () { return [
        { type: so_common_library__WEBPACK_IMPORTED_MODULE_4__["AppBootstrapService"] }
    ]; };
    AppService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [so_common_library__WEBPACK_IMPORTED_MODULE_4__["AppBootstrapService"]])
    ], AppService);
    return AppService;
}());



/***/ }),

/***/ "./src/app/auth.interceptor.ts":
/*!*************************************!*\
  !*** ./src/app/auth.interceptor.ts ***!
  \*************************************/
/*! exports provided: AuthInterceptor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AuthInterceptor", function() { return AuthInterceptor; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_common_http__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/common/http */ "../../node_modules/@angular/common/fesm5/http.js");
/* harmony import */ var environments_environment__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! environments/environment */ "../../environments/environment.ts");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var common_library__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! common-library */ "../../dist/common-library/fesm5/common-library.js");
/* harmony import */ var so_common_library__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! so-common-library */ "../../dist/so-common-library/fesm5/so-common-library.js");
/* harmony import */ var _app_constant__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./app.constant */ "./src/app/app.constant.ts");









var AuthInterceptor = /** @class */ (function () {
    function AuthInterceptor(http, loadingScreenService, errorMessageService, errorTermsStoreService) {
        this.http = http;
        this.loadingScreenService = loadingScreenService;
        this.errorMessageService = errorMessageService;
        this.errorTermsStoreService = errorTermsStoreService;
    }
    AuthInterceptor.prototype.intercept = function (req, next) {
        var _this = this;
        req = req.clone({
            withCredentials: true
        });
        if (environments_environment__WEBPACK_IMPORTED_MODULE_3__["environment"].production) {
            return next.handle(req).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["catchError"])(function (error, caught) {
                // intercept the response error and display it in console
                console.log('Error Occurred', error);
                _this.loadingScreenService.stopLoading();
                // return the error to the method that called it
                // TODO move error in new error inteceptor
                if (error && error.status === _app_constant__WEBPACK_IMPORTED_MODULE_8__["ZERO"]) {
                    var globalErrorHandler = new so_common_library__WEBPACK_IMPORTED_MODULE_7__["GlobalErrorHandler"](_this.errorTermsStoreService, _this.errorMessageService);
                    globalErrorHandler.handleError(error);
                }
                return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["throwError"])(error);
            }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["finalize"])(function () {
                _this.loadingScreenService.stopLoading();
            }));
        }
        else {
            // get command name - ex- getPlanDetails
            var params = req.params;
            /* console.log('Params : ', params.toString());
            console.log('Params : ', params.get('category')); */
            var parameter_1 = params.get('category');
            var commandName = req.headers.get('command');
            if (!commandName) {
                return next.handle(req);
            }
            // Fetch the respective static json and return as an observable
            return Object(rxjs__WEBPACK_IMPORTED_MODULE_4__["from"])(this.http.get('./assets/data/' + commandName + '.json').pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function (data) {
                var responseData;
                // If the static json consists of parameter nodes then fetch and send the respective node
                // else send the complete json as respnse
                if (parameter_1) {
                    if (data.hasOwnProperty(parameter_1)) {
                        responseData = data[parameter_1];
                    }
                }
                else {
                    responseData = data;
                }
                // Wrap the json in HttpResponse object
                return new _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpResponse"]({ status: 200, body: responseData });
            })));
        }
    };
    AuthInterceptor.ctorParameters = function () { return [
        { type: _angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"] },
        { type: so_common_library__WEBPACK_IMPORTED_MODULE_7__["LoadingScreenService"] },
        { type: so_common_library__WEBPACK_IMPORTED_MODULE_7__["ErrorMessageService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_6__["ErrorTermsStoreService"] }
    ]; };
    AuthInterceptor = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])() // { providedIn: 'root' }
        ,
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [_angular_common_http__WEBPACK_IMPORTED_MODULE_2__["HttpClient"],
            so_common_library__WEBPACK_IMPORTED_MODULE_7__["LoadingScreenService"],
            so_common_library__WEBPACK_IMPORTED_MODULE_7__["ErrorMessageService"],
            common_library__WEBPACK_IMPORTED_MODULE_6__["ErrorTermsStoreService"]])
    ], AuthInterceptor);
    return AuthInterceptor;
}());



/***/ }),

/***/ "./src/app/custom-preload-strategy.ts":
/*!********************************************!*\
  !*** ./src/app/custom-preload-strategy.ts ***!
  \********************************************/
/*! exports provided: CustomPreloadStrategy */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CustomPreloadStrategy", function() { return CustomPreloadStrategy; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");


var CustomPreloadStrategy = /** @class */ (function () {
    function CustomPreloadStrategy() {
    }
    CustomPreloadStrategy.prototype.preload = function (route, load) {
        return route.data && route.data.preload ? load() : Object(rxjs__WEBPACK_IMPORTED_MODULE_1__["of"])(null);
    };
    return CustomPreloadStrategy;
}());



/***/ }),

/***/ "./src/app/header/header.service.ts":
/*!******************************************!*\
  !*** ./src/app/header/header.service.ts ***!
  \******************************************/
/*! exports provided: HeaderService */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "HeaderService", function() { return HeaderService; });
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var common_library__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! common-library */ "../../dist/common-library/fesm5/common-library.js");
/* harmony import */ var so_common_library__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! so-common-library */ "../../dist/so-common-library/fesm5/so-common-library.js");
/* harmony import */ var rxjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! rxjs */ "../../node_modules/rxjs/_esm5/index.js");
/* harmony import */ var rxjs_operators__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! rxjs/operators */ "../../node_modules/rxjs/_esm5/operators/index.js");
/* harmony import */ var _angular_forms__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @angular/forms */ "../../node_modules/@angular/forms/fesm5/forms.js");
/* harmony import */ var projects_common_library_src_public_api__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! projects/common-library/src/public_api */ "../common-library/src/public_api.ts");








var HeaderService = /** @class */ (function () {
    function HeaderService(localeAppResourcesService, studyListService, userDataService, dialogService, payloadCommandService, baseConnectionService, resourceService, appDataService, studySearchFB) {
        this.localeAppResourcesService = localeAppResourcesService;
        this.studyListService = studyListService;
        this.userDataService = userDataService;
        this.dialogService = dialogService;
        this.payloadCommandService = payloadCommandService;
        this.baseConnectionService = baseConnectionService;
        this.resourceService = resourceService;
        this.appDataService = appDataService;
        this.studySearchFB = studySearchFB;
        this.searchListFormGroupName = this.studySearchFB.group({
            searchListControl: [''],
            filterListControl: ['']
        });
        this._studySummary = new rxjs__WEBPACK_IMPORTED_MODULE_4__["BehaviorSubject"]({});
    }
    HeaderService.prototype.getLastVisitedStudyKey = function () {
        return this.userDataService.getLastVisitedStudyKey();
    };
    Object.defineProperty(HeaderService.prototype, "studySummary", {
        get: function () {
            return this._studySummary.asObservable();
        },
        enumerable: true,
        configurable: true
    });
    HeaderService.prototype.setSelectedStudyKey = function (data) {
        this.dialogService.selectedStudyKey = data;
    };
    HeaderService.prototype.getStudytags = function (actionParam) {
        return this.studyListService.getStudyTags(actionParam);
    };
    HeaderService.prototype.isCohortStudy = function (studyID) {
        var studyTag = this.studyListService.getStudyInfoByKey(studyID);
        return studyTag && studyTag.cohortInd;
    };
    HeaderService.prototype.updateSelectedStudyPreferences = function (selectedStudy) {
        var self = this;
        var actionParam = {};
        actionParam.endPoint = true;
        var userPreferences = self.userDataService.getUserPreferences();
        var preferenceBookmarks = self.userDataService.getPreferenceBookmarks(userPreferences);
        // update the found preference
        preferenceBookmarks.lastVisitedStudy = selectedStudy.key;
        preferenceBookmarks.mruStudyList = self.getUpdatedMRUStudyList(preferenceBookmarks.mruStudyList.toString(), selectedStudy);
        // create payload
        var preferenceBookmarksIndex = self.userDataService.getPreferenceBookmarksIndex(userPreferences);
        var preferenceBookmarksObj = userPreferences[preferenceBookmarksIndex];
        // call updateUserPreference API
        actionParam.url = common_library__WEBPACK_IMPORTED_MODULE_2__["APIEndPoints"].USER_PREFERENCE;
        actionParam.httpMethod = projects_common_library_src_public_api__WEBPACK_IMPORTED_MODULE_7__["HttpVerbs"].put;
        return self.userDataService
            .updateUserPreference(preferenceBookmarksObj, actionParam)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function (resp) {
            return resp;
        }), Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["catchError"])(function (error) {
            throw error;
        }));
    };
    // updateSelectedStudyPreferences(selectedStudy: any): Observable<any> {
    //   const self = this;
    //   const actionParam: Action = {};
    //   actionParam.endPoint = true;
    //   return self.userDataService.getUserData(USER_PARAMS, actionParam).pipe(
    //     map((res: any) => res),
    //     mergeMap((data: any) => {
    //       if (data.result === COMMON.RESULT_OK) {
    //         const userPreferences = self.userDataService.getUserPreferences();
    //         const preferenceBookmarks = self.userDataService.getPreferenceBookmarks(
    //           userPreferences
    //         );
    //         // update the found preference
    //         preferenceBookmarks.lastVisitedStudy = selectedStudy.key;
    //         preferenceBookmarks.mruStudyList = self.getUpdatedMRUStudyList(
    //           preferenceBookmarks.mruStudyList.toString(),
    //           selectedStudy
    //         );
    //         // create payload
    //         const preferenceBookmarksIndex = self.userDataService.getPreferenceBookmarksIndex(
    //           userPreferences
    //         );
    //         const preferenceBookmarksObj =
    //           userPreferences[preferenceBookmarksIndex];
    //         // call updateUserPreference API
    //         actionParam.url = APIEndPoints.USER_PREFERENCE;
    //         actionParam.httpMethod = HttpVerbs.put;
    //         return self.userDataService
    //           .updateUserPreference(preferenceBookmarksObj, actionParam)
    //           .pipe(
    //             map(resp => {
    //               return resp;
    //             }),
    //             catchError(error => {
    //               throw error;
    //             })
    //           );
    //       } else {
    //         throw new ApplicationError(data.error.message, data.error.errorCode);
    //       }
    //     }),
    //     catchError(error => {
    //       throw error;
    //     })
    //   );
    // }
    HeaderService.prototype.getStudyRefreshDate = function () {
        var self = this;
        var studyKey = self.userDataService.getLastVisitedStudyKey();
        return self.getStudySummaryDetails(studyKey).pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function (resp) {
            return self.studyRefreshDateMap(resp);
        }));
    };
    HeaderService.prototype.getUpdatedMRUStudyList = function (studyList, selectedStudy) {
        // tslint:disable-next-line:prefer-const
        var studyListArr = studyList.split(';');
        var index = studyListArr.indexOf(selectedStudy.key.toString());
        if (index > -1) {
            studyListArr.splice(index, 1);
        }
        if (studyListArr.length > 4) {
            studyListArr.shift();
        }
        studyListArr.push(selectedStudy.key);
        return studyListArr.join(';');
    };
    /**
    * Gets study summary details
    * @param studyKey
    * @param [baseParam]
    * @returns
    */
    HeaderService.prototype.getStudySummaryDetails = function (studyKey, baseParam) {
        var _this = this;
        var studyParam = {
            commandName: so_common_library__WEBPACK_IMPORTED_MODULE_3__["COMMAND"].STUDYSUMMARY,
            param: {
                studyKey: studyKey
            }
        };
        var that = this;
        var moduleInfo = so_common_library__WEBPACK_IMPORTED_MODULE_3__["CTOSUtil"].getModuleInfo('PLANCARD', studyKey);
        // const planListPayLoad = that.payloadCommandService.getCommandDetails(
        //   studyParam.commandName,
        //   studyParam.param,
        //   null,
        //   null,
        //   moduleInfo
        // );
        var payload = this.payloadCommandService.getApiRequest(studyParam.commandName, studyParam.param, null, moduleInfo);
        var actionParam = {};
        if (!baseParam) {
            baseParam = actionParam;
        }
        // baseParam.cacheKey =
        //   CacheKey.GetStudySummary + '_' + studyParam.param.studyKey;
        baseParam.url = common_library__WEBPACK_IMPORTED_MODULE_2__["APIEndPoints"].STUDY_SUMMARY;
        // return that.baseConnectionService
        //   .sendRequest(planListPayLoad, baseParam)
        //   .pipe(
        //     map(resp => {
        //       this._studySummary.next(resp);
        //       return resp.studySummary;
        //     })
        //   );
        return this.baseConnectionService
            .send(payload, baseParam)
            .pipe(Object(rxjs_operators__WEBPACK_IMPORTED_MODULE_5__["map"])(function (response) {
            _this._studySummary.next(response);
            return response.studySummary;
        }));
    };
    HeaderService.prototype.studyRefreshDateMap = function (response) {
        var studyRefreshDate = '';
        if (response && response.studyThumbnail && common_library__WEBPACK_IMPORTED_MODULE_2__["AppUtil"].isDefined(response.studyThumbnail.studyRefreshDate, false)) {
            studyRefreshDate = response.studyThumbnail.studyRefreshDate;
        }
        return studyRefreshDate;
    };
    HeaderService.ctorParameters = function () { return [
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["LocaleAppResourcesService"] },
        { type: so_common_library__WEBPACK_IMPORTED_MODULE_3__["StudyListService"] },
        { type: so_common_library__WEBPACK_IMPORTED_MODULE_3__["UserDataService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["DialogService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["PayloadCommandService"] },
        { type: common_library__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"] },
        { type: so_common_library__WEBPACK_IMPORTED_MODULE_3__["ResourceService"] },
        { type: so_common_library__WEBPACK_IMPORTED_MODULE_3__["AppDataService"] },
        { type: _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormBuilder"] }
    ]; };
    HeaderService = tslib__WEBPACK_IMPORTED_MODULE_0__["__decorate"]([
        Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["Injectable"])(),
        tslib__WEBPACK_IMPORTED_MODULE_0__["__metadata"]("design:paramtypes", [common_library__WEBPACK_IMPORTED_MODULE_2__["LocaleAppResourcesService"],
            so_common_library__WEBPACK_IMPORTED_MODULE_3__["StudyListService"],
            so_common_library__WEBPACK_IMPORTED_MODULE_3__["UserDataService"],
            common_library__WEBPACK_IMPORTED_MODULE_2__["DialogService"],
            common_library__WEBPACK_IMPORTED_MODULE_2__["PayloadCommandService"],
            common_library__WEBPACK_IMPORTED_MODULE_2__["BaseConnectionService"],
            so_common_library__WEBPACK_IMPORTED_MODULE_3__["ResourceService"],
            so_common_library__WEBPACK_IMPORTED_MODULE_3__["AppDataService"],
            _angular_forms__WEBPACK_IMPORTED_MODULE_6__["FormBuilder"]])
    ], HeaderService);
    return HeaderService;
}());



/***/ }),

/***/ "./src/main.ts":
/*!*********************!*\
  !*** ./src/main.ts ***!
  \*********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! tslib */ "../../node_modules/tslib/tslib.es6.js");
/* harmony import */ var _angular_core__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @angular/core */ "../../node_modules/@angular/core/fesm5/core.js");
/* harmony import */ var _angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @angular/platform-browser-dynamic */ "../../node_modules/@angular/platform-browser-dynamic/fesm5/platform-browser-dynamic.js");
/* harmony import */ var _app_app_module__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./app/app.module */ "./src/app/app.module.ts");
/* harmony import */ var environments_environment__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! environments/environment */ "../../environments/environment.ts");





if (environments_environment__WEBPACK_IMPORTED_MODULE_4__["environment"].production) {
    Object(_angular_core__WEBPACK_IMPORTED_MODULE_1__["enableProdMode"])();
}
Object(_angular_platform_browser_dynamic__WEBPACK_IMPORTED_MODULE_2__["platformBrowserDynamic"])().bootstrapModule(_app_app_module__WEBPACK_IMPORTED_MODULE_3__["AppModule"])
    .catch(function (err) { return console.error(err); });


/***/ }),

/***/ 0:
/*!***************************!*\
  !*** multi ./src/main.ts ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(/*! D:\DecisionView\6.1Country\studyoptimizer\client\nworkspace\client-studyOptimizer-app\projects\app4\src\main.ts */"./src/main.ts");


/***/ }),

/***/ 1:
/*!********************!*\
  !*** fs (ignored) ***!
  \********************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 2:
/*!************************!*\
  !*** crypto (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ }),

/***/ 3:
/*!************************!*\
  !*** stream (ignored) ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* (ignored) */

/***/ })

},[[0,"runtime","vendor"]]]);
//# sourceMappingURL=main.js.map